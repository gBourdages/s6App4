
c:/Users/Gabriel/Desktop/s6App4/target/2.1.0/argon/s6App4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002714  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6730  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  2003e470  000d6734  0001e470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000308  2003e4e8  2003e4e8  0002e4e8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d67ac  000d67ac  000267ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d67d4  000d67d4  000267d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00115507  00000000  00000000  000267d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013424  00000000  00000000  0013bcdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00023351  00000000  00000000  0014f103  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000023e8  00000000  00000000  00172454  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006848  00000000  00000000  0017483c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035458  00000000  00000000  0017b084  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002fff3  00000000  00000000  001b04dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00103e10  00000000  00000000  001e04cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005f80  00000000  00000000  002e42e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f9f7 	bl	d6420 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f9ff 	bl	d643c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e470 	.word	0x2003e470
   d4048:	000d6734 	.word	0x000d6734
   d404c:	2003e4e8 	.word	0x2003e4e8
   d4050:	2003e4e8 	.word	0x2003e4e8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 f9c3 	bl	d53e8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6704 	.word	0x000d6704
   d407c:	000d6728 	.word	0x000d6728

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b9bc 	b.w	d43fc <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 fd4f 	bl	d4b28 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 b96d 	b.w	d536c <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 b811 	b.w	d50b8 <malloc>

000d4096 <_Znaj>:
   d4096:	f001 b80f 	b.w	d50b8 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 b815 	b.w	d50c8 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40b0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	2b2f      	cmp	r3, #47	; 0x2f
{
   d40b6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40b8:	d904      	bls.n	d40c4 <nrf_gpio_pin_port_decode+0x14>
   d40ba:	4a07      	ldr	r2, [pc, #28]	; (d40d8 <nrf_gpio_pin_port_decode+0x28>)
   d40bc:	2100      	movs	r1, #0
   d40be:	200a      	movs	r0, #10
   d40c0:	f000 ff5e 	bl	d4f80 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40c4:	6823      	ldr	r3, [r4, #0]
   d40c6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40c8:	bf83      	ittte	hi
   d40ca:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d40ce:	4803      	ldrhi	r0, [pc, #12]	; (d40dc <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40d0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d40d2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d40d6:	bd10      	pop	{r4, pc}
   d40d8:	000d4d31 	.word	0x000d4d31
   d40dc:	50000300 	.word	0x50000300

000d40e0 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40e0:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d40e2:	2301      	movs	r3, #1
   d40e4:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d40e6:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d40e8:	4604      	mov	r4, r0
        if (th->func) {
   d40ea:	b143      	cbz	r3, d40fe <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d40ec:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40ee:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d40f0:	2301      	movs	r3, #1
   d40f2:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d40f4:	2000      	movs	r0, #0
    }
   d40f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d40fa:	f000 be71 	b.w	d4de0 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d40fe:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d4100:	2800      	cmp	r0, #0
   d4102:	d0f5      	beq.n	d40f0 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d4104:	6883      	ldr	r3, [r0, #8]
   d4106:	b90b      	cbnz	r3, d410c <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d4108:	f001 fd23 	bl	d5b52 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d410c:	68c3      	ldr	r3, [r0, #12]
   d410e:	e7ee      	b.n	d40ee <_ZN6Thread3runEPv+0xe>

000d4110 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4110:	b510      	push	{r4, lr}
   d4112:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4114:	6800      	ldr	r0, [r0, #0]
   d4116:	b108      	cbz	r0, d411c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4118:	f000 ffd6 	bl	d50c8 <free>
class SystemClass {
   d411c:	4620      	mov	r0, r4
   d411e:	bd10      	pop	{r4, pc}

000d4120 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0>:
      operator()(_Tp* __ptr) const
   d4120:	b538      	push	{r3, r4, r5, lr}
	delete __ptr;
   d4122:	4604      	mov	r4, r0
   d4124:	b188      	cbz	r0, d414a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0+0x2a>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d4126:	6805      	ldr	r5, [r0, #0]
   d4128:	b14d      	cbz	r5, d413e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0+0x1e>
      if (_M_manager)
   d412a:	68ab      	ldr	r3, [r5, #8]
   d412c:	b11b      	cbz	r3, d4136 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d412e:	2203      	movs	r2, #3
   d4130:	4629      	mov	r1, r5
   d4132:	4628      	mov	r0, r5
   d4134:	4798      	blx	r3
	delete __ptr;
   d4136:	2110      	movs	r1, #16
   d4138:	4628      	mov	r0, r5
   d413a:	f001 fd04 	bl	d5b46 <_ZdlPvj>
   d413e:	4620      	mov	r0, r4
   d4140:	2114      	movs	r1, #20
      }
   d4142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d4146:	f001 bcfe 	b.w	d5b46 <_ZdlPvj>
      }
   d414a:	bd38      	pop	{r3, r4, r5, pc}

000d414c <_ZN6ThreadD1Ev>:
    ~Thread()
   d414c:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d414e:	6803      	ldr	r3, [r0, #0]
   d4150:	4604      	mov	r4, r0
        if (!isValid())
   d4152:	b19b      	cbz	r3, d417c <_ZN6ThreadD1Ev+0x30>
        return isValid() && os_thread_is_current(d_->handle);
   d4154:	6858      	ldr	r0, [r3, #4]
   d4156:	f000 fe03 	bl	d4d60 <os_thread_is_current>
   d415a:	b978      	cbnz	r0, d417c <_ZN6ThreadD1Ev+0x30>
   d415c:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d415e:	7c5a      	ldrb	r2, [r3, #17]
   d4160:	b912      	cbnz	r2, d4168 <_ZN6ThreadD1Ev+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d4162:	6858      	ldr	r0, [r3, #4]
   d4164:	f000 fe04 	bl	d4d70 <os_thread_join>
        os_thread_cleanup(d_->handle);
   d4168:	6823      	ldr	r3, [r4, #0]
   d416a:	6858      	ldr	r0, [r3, #4]
   d416c:	f000 fe08 	bl	d4d80 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4170:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4172:	2300      	movs	r3, #0
   d4174:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d4176:	b108      	cbz	r0, d417c <_ZN6ThreadD1Ev+0x30>
	  get_deleter()(std::move(__p));
   d4178:	f7ff ffd2 	bl	d4120 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0>
	if (__ptr != nullptr)
   d417c:	6820      	ldr	r0, [r4, #0]
   d417e:	b108      	cbz	r0, d4184 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(std::move(__ptr));
   d4180:	f7ff ffce 	bl	d4120 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0>
    }
   d4184:	4620      	mov	r0, r4
   d4186:	bd10      	pop	{r4, pc}

000d4188 <_ZN11SystemClass10ticksDelayEm>:
        return SYSTEM_US_TICKS;
    }

    static inline uint32_t ticks()
    {
        return SYSTEM_TICK_COUNTER;
   d4188:	4b03      	ldr	r3, [pc, #12]	; (d4198 <_ZN11SystemClass10ticksDelayEm+0x10>)
   d418a:	6859      	ldr	r1, [r3, #4]
   d418c:	685a      	ldr	r2, [r3, #4]
    }

    static inline void ticksDelay(uint32_t duration)
    {
        uint32_t start = ticks();
        while ((ticks()-start)<duration) {}
   d418e:	1a52      	subs	r2, r2, r1
   d4190:	4282      	cmp	r2, r0
   d4192:	d3fb      	bcc.n	d418c <_ZN11SystemClass10ticksDelayEm+0x4>
    }
   d4194:	4770      	bx	lr
   d4196:	bf00      	nop
   d4198:	e0001000 	.word	0xe0001000

000d419c <_Z17sendManchesterLOWv>:
  sendManchesterHIGH();
  sendManchesterLOW();
  sendManchesterHIGH();
}

void sendManchesterLOW() {
   d419c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d419e:	4d37      	ldr	r5, [pc, #220]	; (d427c <_Z17sendManchesterLOWv+0xe0>)
   d41a0:	4c37      	ldr	r4, [pc, #220]	; (d4280 <_Z17sendManchesterLOWv+0xe4>)
   d41a2:	782b      	ldrb	r3, [r5, #0]
   d41a4:	f3bf 8f5b 	dmb	ish
   d41a8:	f013 0f01 	tst.w	r3, #1
   d41ac:	d109      	bne.n	d41c2 <_Z17sendManchesterLOWv+0x26>
   d41ae:	4628      	mov	r0, r5
   d41b0:	f7ff ff75 	bl	d409e <__cxa_guard_acquire>
   d41b4:	b128      	cbz	r0, d41c2 <_Z17sendManchesterLOWv+0x26>
   d41b6:	f000 fd7b 	bl	d4cb0 <HAL_Pin_Map>
   d41ba:	6020      	str	r0, [r4, #0]
   d41bc:	4628      	mov	r0, r5
   d41be:	f7ff ff73 	bl	d40a8 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d41c2:	6823      	ldr	r3, [r4, #0]
   d41c4:	f893 3020 	ldrb.w	r3, [r3, #32]
   d41c8:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d41ca:	782b      	ldrb	r3, [r5, #0]
   d41cc:	f3bf 8f5b 	dmb	ish
   d41d0:	07d9      	lsls	r1, r3, #31
   d41d2:	d409      	bmi.n	d41e8 <_Z17sendManchesterLOWv+0x4c>
   d41d4:	4829      	ldr	r0, [pc, #164]	; (d427c <_Z17sendManchesterLOWv+0xe0>)
   d41d6:	f7ff ff62 	bl	d409e <__cxa_guard_acquire>
   d41da:	b128      	cbz	r0, d41e8 <_Z17sendManchesterLOWv+0x4c>
   d41dc:	f000 fd68 	bl	d4cb0 <HAL_Pin_Map>
   d41e0:	6020      	str	r0, [r4, #0]
   d41e2:	4826      	ldr	r0, [pc, #152]	; (d427c <_Z17sendManchesterLOWv+0xe0>)
   d41e4:	f7ff ff60 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d41e8:	6823      	ldr	r3, [r4, #0]
   d41ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d41ee:	f003 031f 	and.w	r3, r3, #31
   d41f2:	4333      	orrs	r3, r6
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d41f4:	a801      	add	r0, sp, #4
   d41f6:	9301      	str	r3, [sp, #4]
   d41f8:	f7ff ff5a 	bl	d40b0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d41fc:	9a01      	ldr	r2, [sp, #4]
  pinResetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d41fe:	4e21      	ldr	r6, [pc, #132]	; (d4284 <_Z17sendManchesterLOWv+0xe8>)
   d4200:	2301      	movs	r3, #1
   d4202:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4204:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   d4208:	6830      	ldr	r0, [r6, #0]
   d420a:	f7ff ffbd 	bl	d4188 <_ZN11SystemClass10ticksDelayEm>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d420e:	782b      	ldrb	r3, [r5, #0]
   d4210:	f3bf 8f5b 	dmb	ish
   d4214:	07da      	lsls	r2, r3, #31
   d4216:	d409      	bmi.n	d422c <_Z17sendManchesterLOWv+0x90>
   d4218:	4818      	ldr	r0, [pc, #96]	; (d427c <_Z17sendManchesterLOWv+0xe0>)
   d421a:	f7ff ff40 	bl	d409e <__cxa_guard_acquire>
   d421e:	b128      	cbz	r0, d422c <_Z17sendManchesterLOWv+0x90>
   d4220:	f000 fd46 	bl	d4cb0 <HAL_Pin_Map>
   d4224:	6020      	str	r0, [r4, #0]
   d4226:	4815      	ldr	r0, [pc, #84]	; (d427c <_Z17sendManchesterLOWv+0xe0>)
   d4228:	f7ff ff3e 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d422c:	6823      	ldr	r3, [r4, #0]
   d422e:	f893 3020 	ldrb.w	r3, [r3, #32]
   d4232:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4234:	782b      	ldrb	r3, [r5, #0]
   d4236:	f3bf 8f5b 	dmb	ish
   d423a:	07db      	lsls	r3, r3, #31
   d423c:	d409      	bmi.n	d4252 <_Z17sendManchesterLOWv+0xb6>
   d423e:	480f      	ldr	r0, [pc, #60]	; (d427c <_Z17sendManchesterLOWv+0xe0>)
   d4240:	f7ff ff2d 	bl	d409e <__cxa_guard_acquire>
   d4244:	b128      	cbz	r0, d4252 <_Z17sendManchesterLOWv+0xb6>
   d4246:	f000 fd33 	bl	d4cb0 <HAL_Pin_Map>
   d424a:	6020      	str	r0, [r4, #0]
   d424c:	480b      	ldr	r0, [pc, #44]	; (d427c <_Z17sendManchesterLOWv+0xe0>)
   d424e:	f7ff ff2b 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4252:	6823      	ldr	r3, [r4, #0]
   d4254:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d4258:	f003 031f 	and.w	r3, r3, #31
   d425c:	433b      	orrs	r3, r7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d425e:	a801      	add	r0, sp, #4
   d4260:	9301      	str	r3, [sp, #4]
   d4262:	f7ff ff25 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4266:	9a01      	ldr	r2, [sp, #4]
   d4268:	2301      	movs	r3, #1
   d426a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d426c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d4270:	6830      	ldr	r0, [r6, #0]
   d4272:	f7ff ff89 	bl	d4188 <_ZN11SystemClass10ticksDelayEm>
}
   d4276:	b003      	add	sp, #12
   d4278:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d427a:	bf00      	nop
   d427c:	2003e4ec 	.word	0x2003e4ec
   d4280:	2003e4f0 	.word	0x2003e4f0
   d4284:	2003e618 	.word	0x2003e618

000d4288 <_Z18sendManchesterHIGHv>:

void sendManchesterHIGH() {
   d4288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d428a:	4d37      	ldr	r5, [pc, #220]	; (d4368 <_Z18sendManchesterHIGHv+0xe0>)
   d428c:	4c37      	ldr	r4, [pc, #220]	; (d436c <_Z18sendManchesterHIGHv+0xe4>)
   d428e:	782b      	ldrb	r3, [r5, #0]
   d4290:	f3bf 8f5b 	dmb	ish
   d4294:	f013 0f01 	tst.w	r3, #1
   d4298:	d109      	bne.n	d42ae <_Z18sendManchesterHIGHv+0x26>
   d429a:	4628      	mov	r0, r5
   d429c:	f7ff feff 	bl	d409e <__cxa_guard_acquire>
   d42a0:	b128      	cbz	r0, d42ae <_Z18sendManchesterHIGHv+0x26>
   d42a2:	f000 fd05 	bl	d4cb0 <HAL_Pin_Map>
   d42a6:	6020      	str	r0, [r4, #0]
   d42a8:	4628      	mov	r0, r5
   d42aa:	f7ff fefd 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42ae:	6823      	ldr	r3, [r4, #0]
   d42b0:	f893 3020 	ldrb.w	r3, [r3, #32]
   d42b4:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42b6:	782b      	ldrb	r3, [r5, #0]
   d42b8:	f3bf 8f5b 	dmb	ish
   d42bc:	07d9      	lsls	r1, r3, #31
   d42be:	d409      	bmi.n	d42d4 <_Z18sendManchesterHIGHv+0x4c>
   d42c0:	4829      	ldr	r0, [pc, #164]	; (d4368 <_Z18sendManchesterHIGHv+0xe0>)
   d42c2:	f7ff feec 	bl	d409e <__cxa_guard_acquire>
   d42c6:	b128      	cbz	r0, d42d4 <_Z18sendManchesterHIGHv+0x4c>
   d42c8:	f000 fcf2 	bl	d4cb0 <HAL_Pin_Map>
   d42cc:	6020      	str	r0, [r4, #0]
   d42ce:	4826      	ldr	r0, [pc, #152]	; (d4368 <_Z18sendManchesterHIGHv+0xe0>)
   d42d0:	f7ff feea 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42d4:	6823      	ldr	r3, [r4, #0]
   d42d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d42da:	f003 031f 	and.w	r3, r3, #31
   d42de:	4333      	orrs	r3, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d42e0:	a801      	add	r0, sp, #4
   d42e2:	9301      	str	r3, [sp, #4]
   d42e4:	f7ff fee4 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d42e8:	9a01      	ldr	r2, [sp, #4]
  pinSetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d42ea:	4e21      	ldr	r6, [pc, #132]	; (d4370 <_Z18sendManchesterHIGHv+0xe8>)
   d42ec:	2301      	movs	r3, #1
   d42ee:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d42f0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
   d42f4:	6830      	ldr	r0, [r6, #0]
   d42f6:	f7ff ff47 	bl	d4188 <_ZN11SystemClass10ticksDelayEm>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42fa:	782b      	ldrb	r3, [r5, #0]
   d42fc:	f3bf 8f5b 	dmb	ish
   d4300:	07da      	lsls	r2, r3, #31
   d4302:	d409      	bmi.n	d4318 <_Z18sendManchesterHIGHv+0x90>
   d4304:	4818      	ldr	r0, [pc, #96]	; (d4368 <_Z18sendManchesterHIGHv+0xe0>)
   d4306:	f7ff feca 	bl	d409e <__cxa_guard_acquire>
   d430a:	b128      	cbz	r0, d4318 <_Z18sendManchesterHIGHv+0x90>
   d430c:	f000 fcd0 	bl	d4cb0 <HAL_Pin_Map>
   d4310:	6020      	str	r0, [r4, #0]
   d4312:	4815      	ldr	r0, [pc, #84]	; (d4368 <_Z18sendManchesterHIGHv+0xe0>)
   d4314:	f7ff fec8 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4318:	6823      	ldr	r3, [r4, #0]
   d431a:	f893 3020 	ldrb.w	r3, [r3, #32]
   d431e:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4320:	782b      	ldrb	r3, [r5, #0]
   d4322:	f3bf 8f5b 	dmb	ish
   d4326:	07db      	lsls	r3, r3, #31
   d4328:	d409      	bmi.n	d433e <_Z18sendManchesterHIGHv+0xb6>
   d432a:	480f      	ldr	r0, [pc, #60]	; (d4368 <_Z18sendManchesterHIGHv+0xe0>)
   d432c:	f7ff feb7 	bl	d409e <__cxa_guard_acquire>
   d4330:	b128      	cbz	r0, d433e <_Z18sendManchesterHIGHv+0xb6>
   d4332:	f000 fcbd 	bl	d4cb0 <HAL_Pin_Map>
   d4336:	6020      	str	r0, [r4, #0]
   d4338:	480b      	ldr	r0, [pc, #44]	; (d4368 <_Z18sendManchesterHIGHv+0xe0>)
   d433a:	f7ff feb5 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d433e:	6823      	ldr	r3, [r4, #0]
   d4340:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d4344:	f003 031f 	and.w	r3, r3, #31
   d4348:	433b      	orrs	r3, r7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d434a:	a801      	add	r0, sp, #4
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	f7ff feaf 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4352:	9a01      	ldr	r2, [sp, #4]
   d4354:	2301      	movs	r3, #1
   d4356:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   d4358:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d435c:	6830      	ldr	r0, [r6, #0]
   d435e:	f7ff ff13 	bl	d4188 <_ZN11SystemClass10ticksDelayEm>
}
   d4362:	b003      	add	sp, #12
   d4364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4366:	bf00      	nop
   d4368:	2003e4ec 	.word	0x2003e4ec
   d436c:	2003e4f0 	.word	0x2003e4f0
   d4370:	2003e618 	.word	0x2003e618

000d4374 <_Z9preambulev>:
void preambule() {
   d4374:	b508      	push	{r3, lr}
  sendManchesterLOW();
   d4376:	f7ff ff11 	bl	d419c <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d437a:	f7ff ff85 	bl	d4288 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d437e:	f7ff ff0d 	bl	d419c <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d4382:	f7ff ff81 	bl	d4288 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d4386:	f7ff ff09 	bl	d419c <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d438a:	f7ff ff7d 	bl	d4288 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d438e:	f7ff ff05 	bl	d419c <_Z17sendManchesterLOWv>
}
   d4392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendManchesterHIGH();
   d4396:	f7ff bf77 	b.w	d4288 <_Z18sendManchesterHIGHv>

000d439a <_Z17sendManchesterBitb>:

void sendManchesterBit(bool value) {
  if (value) {
   d439a:	b108      	cbz	r0, d43a0 <_Z17sendManchesterBitb+0x6>
    sendManchesterHIGH();
   d439c:	f7ff bf74 	b.w	d4288 <_Z18sendManchesterHIGHv>
    return;
  }
  sendManchesterLOW();
   d43a0:	f7ff befc 	b.w	d419c <_Z17sendManchesterLOWv>

000d43a4 <_Z9sendBytesPhh>:
void sendBytes(uint8_t* bytes, uint8_t length) {
   d43a4:	b570      	push	{r4, r5, r6, lr}
   d43a6:	4604      	mov	r4, r0
   d43a8:	1846      	adds	r6, r0, r1
  for (int i = 0; i < length; ++i) {
   d43aa:	42b4      	cmp	r4, r6
   d43ac:	d00b      	beq.n	d43c6 <_Z9sendBytesPhh+0x22>
    for (int j = 0; j < 8; ++j) {
   d43ae:	2500      	movs	r5, #0
      sendManchesterBit(bytes[i] & (0b00000001 << j));
   d43b0:	7820      	ldrb	r0, [r4, #0]
   d43b2:	4128      	asrs	r0, r5
   d43b4:	f000 0001 	and.w	r0, r0, #1
    for (int j = 0; j < 8; ++j) {
   d43b8:	3501      	adds	r5, #1
      sendManchesterBit(bytes[i] & (0b00000001 << j));
   d43ba:	f7ff ffee 	bl	d439a <_Z17sendManchesterBitb>
    for (int j = 0; j < 8; ++j) {
   d43be:	2d08      	cmp	r5, #8
   d43c0:	d1f6      	bne.n	d43b0 <_Z9sendBytesPhh+0xc>
  for (int i = 0; i < length; ++i) {
   d43c2:	3401      	adds	r4, #1
   d43c4:	e7f1      	b.n	d43aa <_Z9sendBytesPhh+0x6>
}
   d43c6:	bd70      	pop	{r4, r5, r6, pc}

000d43c8 <_Z8sendByteh>:
void sendByte(uint8_t byte) {
   d43c8:	b538      	push	{r3, r4, r5, lr}
   d43ca:	4605      	mov	r5, r0
  for (int j = 0; j < 8; ++j) {
   d43cc:	2400      	movs	r4, #0
      sendManchesterBit(byte & (0b00000001 << j));
   d43ce:	fa45 f004 	asr.w	r0, r5, r4
   d43d2:	f000 0001 	and.w	r0, r0, #1
  for (int j = 0; j < 8; ++j) {
   d43d6:	3401      	adds	r4, #1
      sendManchesterBit(byte & (0b00000001 << j));
   d43d8:	f7ff ffdf 	bl	d439a <_Z17sendManchesterBitb>
  for (int j = 0; j < 8; ++j) {
   d43dc:	2c08      	cmp	r4, #8
   d43de:	d1f6      	bne.n	d43ce <_Z8sendByteh+0x6>
}
   d43e0:	bd38      	pop	{r3, r4, r5, pc}

000d43e2 <_Z12sendDualBytet>:
void sendDualByte(uint16_t byte) {
   d43e2:	b538      	push	{r3, r4, r5, lr}
   d43e4:	4605      	mov	r5, r0
  for (int j = 0; j < 16; ++j) {
   d43e6:	2400      	movs	r4, #0
      sendManchesterBit(byte & (0b0000000000000001 << j));
   d43e8:	fa45 f004 	asr.w	r0, r5, r4
   d43ec:	f000 0001 	and.w	r0, r0, #1
  for (int j = 0; j < 16; ++j) {
   d43f0:	3401      	adds	r4, #1
      sendManchesterBit(byte & (0b0000000000000001 << j));
   d43f2:	f7ff ffd2 	bl	d439a <_Z17sendManchesterBitb>
  for (int j = 0; j < 16; ++j) {
   d43f6:	2c10      	cmp	r4, #16
   d43f8:	d1f6      	bne.n	d43e8 <_Z12sendDualBytet+0x6>
}
   d43fa:	bd38      	pop	{r3, r4, r5, pc}

000d43fc <setup>:

//Variables pour la gestion d'erreur
volatile uint32_t lastWaitingTick = 0;
volatile bool error = false;

void setup() {
   d43fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	Serial.begin(9600);
   d43fe:	f001 f8f3 	bl	d55e8 <_Z16_fetch_usbserialv>
   d4402:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4406:	f001 f8e3 	bl	d55d0 <_ZN9USBSerial5beginEl>
  pinMode(OUTPUT_PIN, OUTPUT_OPEN_DRAIN);
   d440a:	2105      	movs	r1, #5
   d440c:	2002      	movs	r0, #2
   d440e:	f001 fb43 	bl	d5a98 <pinMode>
  pinMode(INPUT_PIN, INPUT_PULLUP);
  attachInterrupt(INPUT_PIN, interrupt, CHANGE);
   d4412:	2400      	movs	r4, #0
  pinMode(INPUT_PIN, INPUT_PULLUP);
   d4414:	2102      	movs	r1, #2
   d4416:	2004      	movs	r0, #4
   d4418:	f001 fb3e 	bl	d5a98 <pinMode>
  attachInterrupt(INPUT_PIN, interrupt, CHANGE);
   d441c:	4920      	ldr	r1, [pc, #128]	; (d44a0 <setup+0xa4>)
   d441e:	9400      	str	r4, [sp, #0]
   d4420:	f04f 33ff 	mov.w	r3, #4294967295
   d4424:	4622      	mov	r2, r4
   d4426:	2004      	movs	r0, #4
   d4428:	f001 f90a 	bl	d5640 <_Z15attachInterrupttPFvvE13InterruptModeah>
  os_mutex_create(&transmitMutex);
   d442c:	481d      	ldr	r0, [pc, #116]	; (d44a4 <setup+0xa8>)
   d442e:	f000 fcaf 	bl	d4d90 <os_mutex_create>
        : d_(new(std::nothrow) Data)
   d4432:	491d      	ldr	r1, [pc, #116]	; (d44a8 <setup+0xac>)
   d4434:	2014      	movs	r0, #20
   d4436:	f001 fb88 	bl	d5b4a <_ZnwjRKSt9nothrow_t>
   d443a:	b128      	cbz	r0, d4448 <setup+0x4c>
            exited(false) {
   d443c:	e9c0 4400 	strd	r4, r4, [r0]
   d4440:	e9c0 4402 	strd	r4, r4, [r0, #8]
   d4444:	7404      	strb	r4, [r0, #16]
   d4446:	7444      	strb	r4, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d4448:	9003      	str	r0, [sp, #12]
        if (!d_) {
   d444a:	b1a8      	cbz	r0, d4478 <setup+0x7c>
        d_->func = function;
   d444c:	4b17      	ldr	r3, [pc, #92]	; (d44ac <setup+0xb0>)
   d444e:	6083      	str	r3, [r0, #8]
        d_->func_param = function_param;
   d4450:	2300      	movs	r3, #0
   d4452:	60c3      	str	r3, [r0, #12]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d4454:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d4458:	e9cd 0300 	strd	r0, r3, [sp]
   d445c:	4914      	ldr	r1, [pc, #80]	; (d44b0 <setup+0xb4>)
   d445e:	4b15      	ldr	r3, [pc, #84]	; (d44b4 <setup+0xb8>)
   d4460:	2202      	movs	r2, #2
   d4462:	3004      	adds	r0, #4
   d4464:	f000 fc74 	bl	d4d50 <os_thread_create>
   d4468:	b930      	cbnz	r0, d4478 <setup+0x7c>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d446a:	9b03      	ldr	r3, [sp, #12]
        while (!d_->started) {
   d446c:	7c1b      	ldrb	r3, [r3, #16]
   d446e:	b94b      	cbnz	r3, d4484 <setup+0x88>
            HAL_Delay_Milliseconds(1);
   d4470:	2001      	movs	r0, #1
   d4472:	f000 fc55 	bl	d4d20 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d4476:	e7f8      	b.n	d446a <setup+0x6e>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4478:	9803      	ldr	r0, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d447a:	2300      	movs	r3, #0
   d447c:	9303      	str	r3, [sp, #12]
	if (__p != pointer())
   d447e:	b108      	cbz	r0, d4484 <setup+0x88>
	  get_deleter()(std::move(__p));
   d4480:	f7ff fe4e 	bl	d4120 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0>
	_M_t._M_ptr() = pointer();
   d4484:	2300      	movs	r3, #0
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d4486:	9a03      	ldr	r2, [sp, #12]
	_M_t._M_ptr() = pointer();
   d4488:	9303      	str	r3, [sp, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d448a:	4b0b      	ldr	r3, [pc, #44]	; (d44b8 <setup+0xbc>)
   d448c:	6818      	ldr	r0, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
   d448e:	601a      	str	r2, [r3, #0]
	if (__p != pointer())
   d4490:	b108      	cbz	r0, d4496 <setup+0x9a>
	  get_deleter()(std::move(__p));
   d4492:	f7ff fe45 	bl	d4120 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0>
  sendingThread = Thread("sendingThread", sendingThreadFunction);
   d4496:	a803      	add	r0, sp, #12
   d4498:	f7ff fe58 	bl	d414c <_ZN6ThreadD1Ev>
}
   d449c:	b004      	add	sp, #16
   d449e:	bd10      	pop	{r4, pc}
   d44a0:	000d461d 	.word	0x000d461d
   d44a4:	2003e640 	.word	0x2003e640
   d44a8:	000d6700 	.word	0x000d6700
   d44ac:	000d4a9d 	.word	0x000d4a9d
   d44b0:	000d6520 	.word	0x000d6520
   d44b4:	000d40e1 	.word	0x000d40e1
   d44b8:	2003e634 	.word	0x2003e634

000d44bc <_Z18registerHeaderDatab>:
      break;
  }
}

void registerHeaderData(bool data) {
  if (data)
   d44bc:	4a06      	ldr	r2, [pc, #24]	; (d44d8 <_Z18registerHeaderDatab+0x1c>)
   d44be:	b128      	cbz	r0, d44cc <_Z18registerHeaderDatab+0x10>
    header |= headerMask;
   d44c0:	4906      	ldr	r1, [pc, #24]	; (d44dc <_Z18registerHeaderDatab+0x20>)
   d44c2:	8810      	ldrh	r0, [r2, #0]
   d44c4:	880b      	ldrh	r3, [r1, #0]
   d44c6:	4303      	orrs	r3, r0
   d44c8:	b29b      	uxth	r3, r3
   d44ca:	800b      	strh	r3, [r1, #0]
  headerMask <<= 1;
   d44cc:	8813      	ldrh	r3, [r2, #0]
   d44ce:	b29b      	uxth	r3, r3
   d44d0:	005b      	lsls	r3, r3, #1
   d44d2:	b29b      	uxth	r3, r3
   d44d4:	8013      	strh	r3, [r2, #0]
}
   d44d6:	4770      	bx	lr
   d44d8:	2003e476 	.word	0x2003e476
   d44dc:	2003e608 	.word	0x2003e608

000d44e0 <_Z15registerMsgDatab>:

void registerMsgData(bool data) {
  if (data)
   d44e0:	4a05      	ldr	r2, [pc, #20]	; (d44f8 <_Z15registerMsgDatab+0x18>)
   d44e2:	b120      	cbz	r0, d44ee <_Z15registerMsgDatab+0xe>
    msgBuffer |= msgMask;
   d44e4:	4905      	ldr	r1, [pc, #20]	; (d44fc <_Z15registerMsgDatab+0x1c>)
   d44e6:	7810      	ldrb	r0, [r2, #0]
   d44e8:	780b      	ldrb	r3, [r1, #0]
   d44ea:	4303      	orrs	r3, r0
   d44ec:	700b      	strb	r3, [r1, #0]
  msgMask <<= 1;
   d44ee:	7813      	ldrb	r3, [r2, #0]
   d44f0:	005b      	lsls	r3, r3, #1
   d44f2:	b2db      	uxtb	r3, r3
   d44f4:	7013      	strb	r3, [r2, #0]
}
   d44f6:	4770      	bx	lr
   d44f8:	2003e478 	.word	0x2003e478
   d44fc:	2003e620 	.word	0x2003e620

000d4500 <_Z15registerCRCDatab>:

void registerCRCData(bool data) {
  if (data)
   d4500:	4a06      	ldr	r2, [pc, #24]	; (d451c <_Z15registerCRCDatab+0x1c>)
   d4502:	b128      	cbz	r0, d4510 <_Z15registerCRCDatab+0x10>
    crcBuffer |= crcMask;
   d4504:	4906      	ldr	r1, [pc, #24]	; (d4520 <_Z15registerCRCDatab+0x20>)
   d4506:	8810      	ldrh	r0, [r2, #0]
   d4508:	880b      	ldrh	r3, [r1, #0]
   d450a:	4303      	orrs	r3, r0
   d450c:	b29b      	uxth	r3, r3
   d450e:	800b      	strh	r3, [r1, #0]
  crcMask <<= 1;
   d4510:	8813      	ldrh	r3, [r2, #0]
   d4512:	b29b      	uxth	r3, r3
   d4514:	005b      	lsls	r3, r3, #1
   d4516:	b29b      	uxth	r3, r3
   d4518:	8013      	strh	r3, [r2, #0]
}
   d451a:	4770      	bx	lr
   d451c:	2003e472 	.word	0x2003e472
   d4520:	2003e604 	.word	0x2003e604

000d4524 <_Z19registerEndByteDatab>:

void registerEndByteData(bool data) {
  if (data)
   d4524:	4a05      	ldr	r2, [pc, #20]	; (d453c <_Z19registerEndByteDatab+0x18>)
   d4526:	b120      	cbz	r0, d4532 <_Z19registerEndByteDatab+0xe>
    endByteBuffer |= endByteMask;
   d4528:	4905      	ldr	r1, [pc, #20]	; (d4540 <_Z19registerEndByteDatab+0x1c>)
   d452a:	7810      	ldrb	r0, [r2, #0]
   d452c:	780b      	ldrb	r3, [r1, #0]
   d452e:	4303      	orrs	r3, r0
   d4530:	700b      	strb	r3, [r1, #0]
  endByteMask <<= 1;
   d4532:	7813      	ldrb	r3, [r2, #0]
   d4534:	005b      	lsls	r3, r3, #1
   d4536:	b2db      	uxtb	r3, r3
   d4538:	7013      	strb	r3, [r2, #0]
}
   d453a:	4770      	bx	lr
   d453c:	2003e474 	.word	0x2003e474
   d4540:	2003e606 	.word	0x2003e606

000d4544 <_Z21registerStartByteDatab>:

void registerStartByteData(bool data) {
  if (data)
   d4544:	4a05      	ldr	r2, [pc, #20]	; (d455c <_Z21registerStartByteDatab+0x18>)
   d4546:	b120      	cbz	r0, d4552 <_Z21registerStartByteDatab+0xe>
    startByteBuffer |= startByteMask;
   d4548:	4905      	ldr	r1, [pc, #20]	; (d4560 <_Z21registerStartByteDatab+0x1c>)
   d454a:	7810      	ldrb	r0, [r2, #0]
   d454c:	780b      	ldrb	r3, [r1, #0]
   d454e:	4303      	orrs	r3, r0
   d4550:	700b      	strb	r3, [r1, #0]
  startByteMask <<= 1;
   d4552:	7813      	ldrb	r3, [r2, #0]
   d4554:	005b      	lsls	r3, r3, #1
   d4556:	b2db      	uxtb	r3, r3
   d4558:	7013      	strb	r3, [r2, #0]
}
   d455a:	4770      	bx	lr
   d455c:	2003e479 	.word	0x2003e479
   d4560:	2003e638 	.word	0x2003e638

000d4564 <_Z15registerAckDatab>:

void registerAckData(bool data) {
  if (data)
   d4564:	4a06      	ldr	r2, [pc, #24]	; (d4580 <_Z15registerAckDatab+0x1c>)
   d4566:	b128      	cbz	r0, d4574 <_Z15registerAckDatab+0x10>
    ackBuffer |= ackMask;
   d4568:	4906      	ldr	r1, [pc, #24]	; (d4584 <_Z15registerAckDatab+0x20>)
   d456a:	8810      	ldrh	r0, [r2, #0]
   d456c:	880b      	ldrh	r3, [r1, #0]
   d456e:	4303      	orrs	r3, r0
   d4570:	b29b      	uxth	r3, r3
   d4572:	800b      	strh	r3, [r1, #0]
  ackMask <<= 1;
   d4574:	8813      	ldrh	r3, [r2, #0]
   d4576:	b29b      	uxth	r3, r3
   d4578:	005b      	lsls	r3, r3, #1
   d457a:	b29b      	uxth	r3, r3
   d457c:	8013      	strh	r3, [r2, #0]
}
   d457e:	4770      	bx	lr
   d4580:	2003e470 	.word	0x2003e470
   d4584:	2003e500 	.word	0x2003e500

000d4588 <_Z10triggErrorv>:


void triggError() {
   d4588:	b508      	push	{r3, lr}
  noInterrupts();
   d458a:	f001 f883 	bl	d5694 <_Z12noInterruptsv>
  error = true;
   d458e:	4b05      	ldr	r3, [pc, #20]	; (d45a4 <_Z10triggErrorv+0x1c>)
   d4590:	2201      	movs	r2, #1
   d4592:	701a      	strb	r2, [r3, #0]
  Serial.println("ERROR TRIGGED");
   d4594:	f001 f828 	bl	d55e8 <_Z16_fetch_usbserialv>
}
   d4598:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("ERROR TRIGGED");
   d459c:	4902      	ldr	r1, [pc, #8]	; (d45a8 <_Z10triggErrorv+0x20>)
   d459e:	f000 be68 	b.w	d5272 <_ZN5Print7printlnEPKc>
   d45a2:	bf00      	nop
   d45a4:	2003e607 	.word	0x2003e607
   d45a8:	000d652e 	.word	0x000d652e

000d45ac <_Z8resetMEFv>:

void resetMEF() {
  state = WAITING;
   d45ac:	4a0e      	ldr	r2, [pc, #56]	; (d45e8 <_Z8resetMEFv+0x3c>)
  byteCount = 0;
  preambuleStateTimes = 0;

  headerMask = 0b0000000000000001;
   d45ae:	490f      	ldr	r1, [pc, #60]	; (d45ec <_Z8resetMEFv+0x40>)
  state = WAITING;
   d45b0:	2300      	movs	r3, #0
   d45b2:	6013      	str	r3, [r2, #0]
  byteCount = 0;
   d45b4:	4a0e      	ldr	r2, [pc, #56]	; (d45f0 <_Z8resetMEFv+0x44>)
   d45b6:	7013      	strb	r3, [r2, #0]
  preambuleStateTimes = 0;
   d45b8:	4a0e      	ldr	r2, [pc, #56]	; (d45f4 <_Z8resetMEFv+0x48>)
   d45ba:	6013      	str	r3, [r2, #0]
  headerMask = 0b0000000000000001;
   d45bc:	2201      	movs	r2, #1
   d45be:	800a      	strh	r2, [r1, #0]
  header = 0b0000000000000000;
   d45c0:	490d      	ldr	r1, [pc, #52]	; (d45f8 <_Z8resetMEFv+0x4c>)
   d45c2:	800b      	strh	r3, [r1, #0]

  msgMask = 0b00000001;
   d45c4:	490d      	ldr	r1, [pc, #52]	; (d45fc <_Z8resetMEFv+0x50>)
   d45c6:	700a      	strb	r2, [r1, #0]
  msgBuffer = 0b00000000;
   d45c8:	490d      	ldr	r1, [pc, #52]	; (d4600 <_Z8resetMEFv+0x54>)
   d45ca:	700b      	strb	r3, [r1, #0]

  crcMask = 0b0000000000000001;
   d45cc:	490d      	ldr	r1, [pc, #52]	; (d4604 <_Z8resetMEFv+0x58>)
   d45ce:	800a      	strh	r2, [r1, #0]
  crcBuffer = 0b0000000000000000;
   d45d0:	490d      	ldr	r1, [pc, #52]	; (d4608 <_Z8resetMEFv+0x5c>)
   d45d2:	800b      	strh	r3, [r1, #0]

  endByteMask = 0b00000001;
   d45d4:	490d      	ldr	r1, [pc, #52]	; (d460c <_Z8resetMEFv+0x60>)
   d45d6:	700a      	strb	r2, [r1, #0]
  endByteBuffer = 0b00000000;
   d45d8:	490d      	ldr	r1, [pc, #52]	; (d4610 <_Z8resetMEFv+0x64>)
   d45da:	700b      	strb	r3, [r1, #0]

  startByteMask = 0b00000001;
   d45dc:	490d      	ldr	r1, [pc, #52]	; (d4614 <_Z8resetMEFv+0x68>)
   d45de:	700a      	strb	r2, [r1, #0]
  startByteBuffer = 0b00000000;
   d45e0:	4a0d      	ldr	r2, [pc, #52]	; (d4618 <_Z8resetMEFv+0x6c>)
   d45e2:	7013      	strb	r3, [r2, #0]
}
   d45e4:	4770      	bx	lr
   d45e6:	bf00      	nop
   d45e8:	2003e63c 	.word	0x2003e63c
   d45ec:	2003e476 	.word	0x2003e476
   d45f0:	2003e601 	.word	0x2003e601
   d45f4:	2003e62c 	.word	0x2003e62c
   d45f8:	2003e608 	.word	0x2003e608
   d45fc:	2003e478 	.word	0x2003e478
   d4600:	2003e620 	.word	0x2003e620
   d4604:	2003e472 	.word	0x2003e472
   d4608:	2003e604 	.word	0x2003e604
   d460c:	2003e474 	.word	0x2003e474
   d4610:	2003e606 	.word	0x2003e606
   d4614:	2003e479 	.word	0x2003e479
   d4618:	2003e638 	.word	0x2003e638

000d461c <_Z9interruptv>:
void interrupt() {
   d461c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
        return SYSTEM_TICK_COUNTER;
   d4620:	4ba2      	ldr	r3, [pc, #648]	; (d48ac <_Z9interruptv+0x290>)
  interruptTick = System.ticks();
   d4622:	4ca3      	ldr	r4, [pc, #652]	; (d48b0 <_Z9interruptv+0x294>)
   d4624:	685b      	ldr	r3, [r3, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4626:	4ea3      	ldr	r6, [pc, #652]	; (d48b4 <_Z9interruptv+0x298>)
   d4628:	6023      	str	r3, [r4, #0]
   d462a:	7833      	ldrb	r3, [r6, #0]
   d462c:	4fa2      	ldr	r7, [pc, #648]	; (d48b8 <_Z9interruptv+0x29c>)
   d462e:	f3bf 8f5b 	dmb	ish
   d4632:	f013 0f01 	tst.w	r3, #1
   d4636:	d109      	bne.n	d464c <_Z9interruptv+0x30>
   d4638:	4630      	mov	r0, r6
   d463a:	f7ff fd30 	bl	d409e <__cxa_guard_acquire>
   d463e:	b128      	cbz	r0, d464c <_Z9interruptv+0x30>
   d4640:	f000 fb36 	bl	d4cb0 <HAL_Pin_Map>
   d4644:	6038      	str	r0, [r7, #0]
   d4646:	4630      	mov	r0, r6
   d4648:	f7ff fd2e 	bl	d40a8 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d464c:	683b      	ldr	r3, [r7, #0]
   d464e:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4652:	7833      	ldrb	r3, [r6, #0]
   d4654:	f3bf 8f5b 	dmb	ish
   d4658:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d465a:	ea4f 1845 	mov.w	r8, r5, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d465e:	d409      	bmi.n	d4674 <_Z9interruptv+0x58>
   d4660:	4894      	ldr	r0, [pc, #592]	; (d48b4 <_Z9interruptv+0x298>)
   d4662:	f7ff fd1c 	bl	d409e <__cxa_guard_acquire>
   d4666:	b128      	cbz	r0, d4674 <_Z9interruptv+0x58>
   d4668:	f000 fb22 	bl	d4cb0 <HAL_Pin_Map>
   d466c:	6038      	str	r0, [r7, #0]
   d466e:	4891      	ldr	r0, [pc, #580]	; (d48b4 <_Z9interruptv+0x298>)
   d4670:	f7ff fd1a 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4674:	683b      	ldr	r3, [r7, #0]
  inputPinValue = pinReadFast(INPUT_PIN);
   d4676:	4e91      	ldr	r6, [pc, #580]	; (d48bc <_Z9interruptv+0x2a0>)
   d4678:	f893 5041 	ldrb.w	r5, [r3, #65]	; 0x41
   d467c:	f005 051f 	and.w	r5, r5, #31
   d4680:	ea45 0508 	orr.w	r5, r5, r8
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4684:	a801      	add	r0, sp, #4
   d4686:	9501      	str	r5, [sp, #4]
   d4688:	f7ff fd12 	bl	d40b0 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   d468c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
    return nrf_gpio_pin_read(nrf_pin);
   d4690:	9501      	str	r5, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4692:	a801      	add	r0, sp, #4
   d4694:	f7ff fd0c 	bl	d40b0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4698:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   d469a:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
  switch (state) {
   d469e:	4d88      	ldr	r5, [pc, #544]	; (d48c0 <_Z9interruptv+0x2a4>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d46a0:	40d3      	lsrs	r3, r2
  inputPinValue = pinReadFast(INPUT_PIN);
   d46a2:	f003 0301 	and.w	r3, r3, #1
   d46a6:	7033      	strb	r3, [r6, #0]
  switch (state) {
   d46a8:	682b      	ldr	r3, [r5, #0]
   d46aa:	2b07      	cmp	r3, #7
   d46ac:	d82b      	bhi.n	d4706 <_Z9interruptv+0xea>
   d46ae:	e8df f013 	tbh	[pc, r3, lsl #1]
   d46b2:	0008      	.short	0x0008
   d46b4:	002d0010 	.word	0x002d0010
   d46b8:	008e005b 	.word	0x008e005b
   d46bc:	015e012f 	.word	0x015e012f
   d46c0:	00cc      	.short	0x00cc
    lastWaitingTick = interruptTick;
   d46c2:	4b80      	ldr	r3, [pc, #512]	; (d48c4 <_Z9interruptv+0x2a8>)
   d46c4:	6822      	ldr	r2, [r4, #0]
   d46c6:	601a      	str	r2, [r3, #0]
    if(inputPinValue)
   d46c8:	7833      	ldrb	r3, [r6, #0]
   d46ca:	b9e3      	cbnz	r3, d4706 <_Z9interruptv+0xea>
    state = PREAMBULE;
   d46cc:	2301      	movs	r3, #1
        state = HEADER;
   d46ce:	602b      	str	r3, [r5, #0]
   d46d0:	e019      	b.n	d4706 <_Z9interruptv+0xea>
    if(!inputPinValue) {
   d46d2:	7833      	ldrb	r3, [r6, #0]
   d46d4:	b93b      	cbnz	r3, d46e6 <_Z9interruptv+0xca>
      period = interruptTick - periodStart;
   d46d6:	4a7c      	ldr	r2, [pc, #496]	; (d48c8 <_Z9interruptv+0x2ac>)
   d46d8:	6823      	ldr	r3, [r4, #0]
   d46da:	6811      	ldr	r1, [r2, #0]
   d46dc:	1a5b      	subs	r3, r3, r1
   d46de:	497b      	ldr	r1, [pc, #492]	; (d48cc <_Z9interruptv+0x2b0>)
   d46e0:	600b      	str	r3, [r1, #0]
      periodStart = interruptTick;
   d46e2:	6823      	ldr	r3, [r4, #0]
   d46e4:	6013      	str	r3, [r2, #0]
    if (++preambuleStateTimes >= 8) {
   d46e6:	4a7a      	ldr	r2, [pc, #488]	; (d48d0 <_Z9interruptv+0x2b4>)
   d46e8:	6813      	ldr	r3, [r2, #0]
   d46ea:	3301      	adds	r3, #1
   d46ec:	2b07      	cmp	r3, #7
   d46ee:	6013      	str	r3, [r2, #0]
   d46f0:	d909      	bls.n	d4706 <_Z9interruptv+0xea>
      state = START;
   d46f2:	2302      	movs	r3, #2
   d46f4:	602b      	str	r3, [r5, #0]
      manchesterTicksReceiver = period / 4;
   d46f6:	4b75      	ldr	r3, [pc, #468]	; (d48cc <_Z9interruptv+0x2b0>)
   d46f8:	4a76      	ldr	r2, [pc, #472]	; (d48d4 <_Z9interruptv+0x2b8>)
   d46fa:	681b      	ldr	r3, [r3, #0]
   d46fc:	089b      	lsrs	r3, r3, #2
   d46fe:	6013      	str	r3, [r2, #0]
      lastStateChange = interruptTick;
   d4700:	4b75      	ldr	r3, [pc, #468]	; (d48d8 <_Z9interruptv+0x2bc>)
   d4702:	6822      	ldr	r2, [r4, #0]
   d4704:	601a      	str	r2, [r3, #0]
}
   d4706:	b002      	add	sp, #8
   d4708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d470c:	4f72      	ldr	r7, [pc, #456]	; (d48d8 <_Z9interruptv+0x2bc>)
   d470e:	6820      	ldr	r0, [r4, #0]
   d4710:	683b      	ldr	r3, [r7, #0]
   d4712:	4a70      	ldr	r2, [pc, #448]	; (d48d4 <_Z9interruptv+0x2b8>)
   d4714:	1ac0      	subs	r0, r0, r3
   d4716:	f8d2 a000 	ldr.w	sl, [r2]
   d471a:	f001 fb5f 	bl	d5ddc <__aeabi_ui2d>
   d471e:	4680      	mov	r8, r0
   d4720:	4650      	mov	r0, sl
   d4722:	4689      	mov	r9, r1
   d4724:	f001 fb5a 	bl	d5ddc <__aeabi_ui2d>
   d4728:	4b6c      	ldr	r3, [pc, #432]	; (d48dc <_Z9interruptv+0x2c0>)
   d472a:	2200      	movs	r2, #0
   d472c:	f001 fbd0 	bl	d5ed0 <__aeabi_dmul>
   d4730:	4602      	mov	r2, r0
   d4732:	460b      	mov	r3, r1
   d4734:	4640      	mov	r0, r8
   d4736:	4649      	mov	r1, r9
   d4738:	f001 fe3c 	bl	d63b4 <__aeabi_dcmplt>
   d473c:	2800      	cmp	r0, #0
   d473e:	d1e2      	bne.n	d4706 <_Z9interruptv+0xea>
      lastStateChange = interruptTick;
   d4740:	6823      	ldr	r3, [r4, #0]
   d4742:	603b      	str	r3, [r7, #0]
      registerStartByteData(!inputPinValue);
   d4744:	7830      	ldrb	r0, [r6, #0]
   d4746:	f080 0001 	eor.w	r0, r0, #1
   d474a:	f7ff fefb 	bl	d4544 <_Z21registerStartByteDatab>
      if (!startByteMask) {
   d474e:	4b64      	ldr	r3, [pc, #400]	; (d48e0 <_Z9interruptv+0x2c4>)
   d4750:	781b      	ldrb	r3, [r3, #0]
   d4752:	2b00      	cmp	r3, #0
   d4754:	d1d7      	bne.n	d4706 <_Z9interruptv+0xea>
        if(startByteBuffer != 0b01111110) {
   d4756:	4b63      	ldr	r3, [pc, #396]	; (d48e4 <_Z9interruptv+0x2c8>)
   d4758:	781b      	ldrb	r3, [r3, #0]
   d475a:	2b7e      	cmp	r3, #126	; 0x7e
   d475c:	d002      	beq.n	d4764 <_Z9interruptv+0x148>
          triggError();
   d475e:	f7ff ff13 	bl	d4588 <_Z10triggErrorv>
          break;
   d4762:	e7d0      	b.n	d4706 <_Z9interruptv+0xea>
        state = HEADER;
   d4764:	2303      	movs	r3, #3
   d4766:	e7b2      	b.n	d46ce <_Z9interruptv+0xb2>
    if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d4768:	4f5b      	ldr	r7, [pc, #364]	; (d48d8 <_Z9interruptv+0x2bc>)
   d476a:	6820      	ldr	r0, [r4, #0]
   d476c:	683b      	ldr	r3, [r7, #0]
   d476e:	4a59      	ldr	r2, [pc, #356]	; (d48d4 <_Z9interruptv+0x2b8>)
   d4770:	1ac0      	subs	r0, r0, r3
   d4772:	f8d2 a000 	ldr.w	sl, [r2]
   d4776:	f001 fb31 	bl	d5ddc <__aeabi_ui2d>
   d477a:	4680      	mov	r8, r0
   d477c:	4650      	mov	r0, sl
   d477e:	4689      	mov	r9, r1
   d4780:	f001 fb2c 	bl	d5ddc <__aeabi_ui2d>
   d4784:	4b55      	ldr	r3, [pc, #340]	; (d48dc <_Z9interruptv+0x2c0>)
   d4786:	2200      	movs	r2, #0
   d4788:	f001 fba2 	bl	d5ed0 <__aeabi_dmul>
   d478c:	4602      	mov	r2, r0
   d478e:	460b      	mov	r3, r1
   d4790:	4640      	mov	r0, r8
   d4792:	4649      	mov	r1, r9
   d4794:	f001 fe0e 	bl	d63b4 <__aeabi_dcmplt>
   d4798:	2800      	cmp	r0, #0
   d479a:	d1b4      	bne.n	d4706 <_Z9interruptv+0xea>
    lastStateChange = interruptTick;
   d479c:	6823      	ldr	r3, [r4, #0]
   d479e:	603b      	str	r3, [r7, #0]
    registerHeaderData(!inputPinValue);
   d47a0:	7830      	ldrb	r0, [r6, #0]
   d47a2:	f080 0001 	eor.w	r0, r0, #1
   d47a6:	f7ff fe89 	bl	d44bc <_Z18registerHeaderDatab>
    if (!headerMask) {
   d47aa:	4b4f      	ldr	r3, [pc, #316]	; (d48e8 <_Z9interruptv+0x2cc>)
   d47ac:	881b      	ldrh	r3, [r3, #0]
   d47ae:	b29b      	uxth	r3, r3
   d47b0:	2b00      	cmp	r3, #0
   d47b2:	d1a8      	bne.n	d4706 <_Z9interruptv+0xea>
      if (header & 0b0000000000000001)
   d47b4:	4b4d      	ldr	r3, [pc, #308]	; (d48ec <_Z9interruptv+0x2d0>)
   d47b6:	881a      	ldrh	r2, [r3, #0]
   d47b8:	07d2      	lsls	r2, r2, #31
        state = ACK;
   d47ba:	bf4c      	ite	mi
   d47bc:	2207      	movmi	r2, #7
        state = MESSAGE;
   d47be:	2204      	movpl	r2, #4
   d47c0:	602a      	str	r2, [r5, #0]
      msgLength = (header & 0b1111111100000000) >> 8;
   d47c2:	881b      	ldrh	r3, [r3, #0]
   d47c4:	4a4a      	ldr	r2, [pc, #296]	; (d48f0 <_Z9interruptv+0x2d4>)
   d47c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d47ca:	7013      	strb	r3, [r2, #0]
   d47cc:	e79b      	b.n	d4706 <_Z9interruptv+0xea>
    if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d47ce:	4f42      	ldr	r7, [pc, #264]	; (d48d8 <_Z9interruptv+0x2bc>)
   d47d0:	6820      	ldr	r0, [r4, #0]
   d47d2:	683b      	ldr	r3, [r7, #0]
   d47d4:	4a3f      	ldr	r2, [pc, #252]	; (d48d4 <_Z9interruptv+0x2b8>)
   d47d6:	1ac0      	subs	r0, r0, r3
   d47d8:	f8d2 a000 	ldr.w	sl, [r2]
   d47dc:	f001 fafe 	bl	d5ddc <__aeabi_ui2d>
   d47e0:	4680      	mov	r8, r0
   d47e2:	4650      	mov	r0, sl
   d47e4:	4689      	mov	r9, r1
   d47e6:	f001 faf9 	bl	d5ddc <__aeabi_ui2d>
   d47ea:	4b3c      	ldr	r3, [pc, #240]	; (d48dc <_Z9interruptv+0x2c0>)
   d47ec:	2200      	movs	r2, #0
   d47ee:	f001 fb6f 	bl	d5ed0 <__aeabi_dmul>
   d47f2:	4602      	mov	r2, r0
   d47f4:	460b      	mov	r3, r1
   d47f6:	4640      	mov	r0, r8
   d47f8:	4649      	mov	r1, r9
   d47fa:	f001 fddb 	bl	d63b4 <__aeabi_dcmplt>
   d47fe:	2800      	cmp	r0, #0
   d4800:	d181      	bne.n	d4706 <_Z9interruptv+0xea>
    lastStateChange = interruptTick;
   d4802:	6823      	ldr	r3, [r4, #0]
   d4804:	603b      	str	r3, [r7, #0]
    registerMsgData(!inputPinValue);
   d4806:	7830      	ldrb	r0, [r6, #0]
   d4808:	f080 0001 	eor.w	r0, r0, #1
   d480c:	f7ff fe68 	bl	d44e0 <_Z15registerMsgDatab>
    if (!msgMask) {
   d4810:	4938      	ldr	r1, [pc, #224]	; (d48f4 <_Z9interruptv+0x2d8>)
   d4812:	780b      	ldrb	r3, [r1, #0]
   d4814:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   d4818:	2b00      	cmp	r3, #0
   d481a:	f47f af74 	bne.w	d4706 <_Z9interruptv+0xea>
      byteBuffer[byteCount++] = msgBuffer;
   d481e:	4a36      	ldr	r2, [pc, #216]	; (d48f8 <_Z9interruptv+0x2dc>)
   d4820:	4836      	ldr	r0, [pc, #216]	; (d48fc <_Z9interruptv+0x2e0>)
   d4822:	7813      	ldrb	r3, [r2, #0]
   d4824:	4f36      	ldr	r7, [pc, #216]	; (d4900 <_Z9interruptv+0x2e4>)
   d4826:	b2de      	uxtb	r6, r3
   d4828:	3301      	adds	r3, #1
   d482a:	b2db      	uxtb	r3, r3
   d482c:	7013      	strb	r3, [r2, #0]
   d482e:	7803      	ldrb	r3, [r0, #0]
   d4830:	b2db      	uxtb	r3, r3
   d4832:	55bb      	strb	r3, [r7, r6]
      msgMask = 0b00000001;
   d4834:	2301      	movs	r3, #1
      msgBuffer = 0b00000000;
   d4836:	7004      	strb	r4, [r0, #0]
      msgMask = 0b00000001;
   d4838:	700b      	strb	r3, [r1, #0]
      if (byteCount == msgLength) {
   d483a:	4b2d      	ldr	r3, [pc, #180]	; (d48f0 <_Z9interruptv+0x2d4>)
   d483c:	7812      	ldrb	r2, [r2, #0]
   d483e:	781b      	ldrb	r3, [r3, #0]
   d4840:	429a      	cmp	r2, r3
   d4842:	f47f af60 	bne.w	d4706 <_Z9interruptv+0xea>
        state = CRC;
   d4846:	2305      	movs	r3, #5
   d4848:	e741      	b.n	d46ce <_Z9interruptv+0xb2>
    if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d484a:	4f23      	ldr	r7, [pc, #140]	; (d48d8 <_Z9interruptv+0x2bc>)
   d484c:	6820      	ldr	r0, [r4, #0]
   d484e:	683b      	ldr	r3, [r7, #0]
   d4850:	4a20      	ldr	r2, [pc, #128]	; (d48d4 <_Z9interruptv+0x2b8>)
   d4852:	1ac0      	subs	r0, r0, r3
   d4854:	f8d2 a000 	ldr.w	sl, [r2]
   d4858:	f001 fac0 	bl	d5ddc <__aeabi_ui2d>
   d485c:	4680      	mov	r8, r0
   d485e:	4650      	mov	r0, sl
   d4860:	4689      	mov	r9, r1
   d4862:	f001 fabb 	bl	d5ddc <__aeabi_ui2d>
   d4866:	4b1d      	ldr	r3, [pc, #116]	; (d48dc <_Z9interruptv+0x2c0>)
   d4868:	2200      	movs	r2, #0
   d486a:	f001 fb31 	bl	d5ed0 <__aeabi_dmul>
   d486e:	4602      	mov	r2, r0
   d4870:	460b      	mov	r3, r1
   d4872:	4640      	mov	r0, r8
   d4874:	4649      	mov	r1, r9
   d4876:	f001 fd9d 	bl	d63b4 <__aeabi_dcmplt>
   d487a:	2800      	cmp	r0, #0
   d487c:	f47f af43 	bne.w	d4706 <_Z9interruptv+0xea>
    lastStateChange = interruptTick;
   d4880:	6823      	ldr	r3, [r4, #0]
   d4882:	603b      	str	r3, [r7, #0]
    registerAckData(!inputPinValue);
   d4884:	7830      	ldrb	r0, [r6, #0]
   d4886:	f080 0001 	eor.w	r0, r0, #1
   d488a:	f7ff fe6b 	bl	d4564 <_Z15registerAckDatab>
    if (!ackMask) {
   d488e:	4b1d      	ldr	r3, [pc, #116]	; (d4904 <_Z9interruptv+0x2e8>)
   d4890:	881b      	ldrh	r3, [r3, #0]
   d4892:	b29b      	uxth	r3, r3
   d4894:	2b00      	cmp	r3, #0
   d4896:	f47f af36 	bne.w	d4706 <_Z9interruptv+0xea>
      state = CRC;
   d489a:	2305      	movs	r3, #5
   d489c:	602b      	str	r3, [r5, #0]
      crcAck = ackBuffer;
   d489e:	4b1a      	ldr	r3, [pc, #104]	; (d4908 <_Z9interruptv+0x2ec>)
   d48a0:	4a1a      	ldr	r2, [pc, #104]	; (d490c <_Z9interruptv+0x2f0>)
   d48a2:	881b      	ldrh	r3, [r3, #0]
   d48a4:	b29b      	uxth	r3, r3
   d48a6:	8013      	strh	r3, [r2, #0]
   d48a8:	e72d      	b.n	d4706 <_Z9interruptv+0xea>
   d48aa:	bf00      	nop
   d48ac:	e0001000 	.word	0xe0001000
   d48b0:	2003e60c 	.word	0x2003e60c
   d48b4:	2003e4ec 	.word	0x2003e4ec
   d48b8:	2003e4f0 	.word	0x2003e4f0
   d48bc:	2003e60a 	.word	0x2003e60a
   d48c0:	2003e63c 	.word	0x2003e63c
   d48c4:	2003e614 	.word	0x2003e614
   d48c8:	2003e628 	.word	0x2003e628
   d48cc:	2003e624 	.word	0x2003e624
   d48d0:	2003e62c 	.word	0x2003e62c
   d48d4:	2003e61c 	.word	0x2003e61c
   d48d8:	2003e610 	.word	0x2003e610
   d48dc:	3ff80000 	.word	0x3ff80000
   d48e0:	2003e479 	.word	0x2003e479
   d48e4:	2003e638 	.word	0x2003e638
   d48e8:	2003e476 	.word	0x2003e476
   d48ec:	2003e608 	.word	0x2003e608
   d48f0:	2003e621 	.word	0x2003e621
   d48f4:	2003e478 	.word	0x2003e478
   d48f8:	2003e601 	.word	0x2003e601
   d48fc:	2003e620 	.word	0x2003e620
   d4900:	2003e502 	.word	0x2003e502
   d4904:	2003e470 	.word	0x2003e470
   d4908:	2003e500 	.word	0x2003e500
   d490c:	2003e602 	.word	0x2003e602
      if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d4910:	4f31      	ldr	r7, [pc, #196]	; (d49d8 <_Z9interruptv+0x3bc>)
   d4912:	6820      	ldr	r0, [r4, #0]
   d4914:	683b      	ldr	r3, [r7, #0]
   d4916:	4a31      	ldr	r2, [pc, #196]	; (d49dc <_Z9interruptv+0x3c0>)
   d4918:	1ac0      	subs	r0, r0, r3
   d491a:	f8d2 a000 	ldr.w	sl, [r2]
   d491e:	f001 fa5d 	bl	d5ddc <__aeabi_ui2d>
   d4922:	4680      	mov	r8, r0
   d4924:	4650      	mov	r0, sl
   d4926:	4689      	mov	r9, r1
   d4928:	f001 fa58 	bl	d5ddc <__aeabi_ui2d>
   d492c:	4b2c      	ldr	r3, [pc, #176]	; (d49e0 <_Z9interruptv+0x3c4>)
   d492e:	2200      	movs	r2, #0
   d4930:	f001 face 	bl	d5ed0 <__aeabi_dmul>
   d4934:	4602      	mov	r2, r0
   d4936:	460b      	mov	r3, r1
   d4938:	4640      	mov	r0, r8
   d493a:	4649      	mov	r1, r9
   d493c:	f001 fd3a 	bl	d63b4 <__aeabi_dcmplt>
   d4940:	2800      	cmp	r0, #0
   d4942:	f47f aee0 	bne.w	d4706 <_Z9interruptv+0xea>
      lastStateChange = interruptTick;
   d4946:	6823      	ldr	r3, [r4, #0]
   d4948:	603b      	str	r3, [r7, #0]
      registerCRCData(!inputPinValue);
   d494a:	7830      	ldrb	r0, [r6, #0]
   d494c:	f080 0001 	eor.w	r0, r0, #1
   d4950:	f7ff fdd6 	bl	d4500 <_Z15registerCRCDatab>
      if (!crcMask) {
   d4954:	4b23      	ldr	r3, [pc, #140]	; (d49e4 <_Z9interruptv+0x3c8>)
   d4956:	881b      	ldrh	r3, [r3, #0]
   d4958:	b29b      	uxth	r3, r3
   d495a:	2b00      	cmp	r3, #0
   d495c:	f47f aed3 	bne.w	d4706 <_Z9interruptv+0xea>
        receivedCrc = crcBuffer;
   d4960:	4b21      	ldr	r3, [pc, #132]	; (d49e8 <_Z9interruptv+0x3cc>)
   d4962:	4a22      	ldr	r2, [pc, #136]	; (d49ec <_Z9interruptv+0x3d0>)
   d4964:	881b      	ldrh	r3, [r3, #0]
   d4966:	b29b      	uxth	r3, r3
   d4968:	8013      	strh	r3, [r2, #0]
        state = END;
   d496a:	2306      	movs	r3, #6
   d496c:	e6af      	b.n	d46ce <_Z9interruptv+0xb2>
      if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d496e:	4f1a      	ldr	r7, [pc, #104]	; (d49d8 <_Z9interruptv+0x3bc>)
   d4970:	6820      	ldr	r0, [r4, #0]
   d4972:	683b      	ldr	r3, [r7, #0]
   d4974:	4a19      	ldr	r2, [pc, #100]	; (d49dc <_Z9interruptv+0x3c0>)
   d4976:	1ac0      	subs	r0, r0, r3
   d4978:	f8d2 a000 	ldr.w	sl, [r2]
   d497c:	f001 fa2e 	bl	d5ddc <__aeabi_ui2d>
   d4980:	4680      	mov	r8, r0
   d4982:	4650      	mov	r0, sl
   d4984:	4689      	mov	r9, r1
   d4986:	f001 fa29 	bl	d5ddc <__aeabi_ui2d>
   d498a:	4b15      	ldr	r3, [pc, #84]	; (d49e0 <_Z9interruptv+0x3c4>)
   d498c:	2200      	movs	r2, #0
   d498e:	f001 fa9f 	bl	d5ed0 <__aeabi_dmul>
   d4992:	4602      	mov	r2, r0
   d4994:	460b      	mov	r3, r1
   d4996:	4640      	mov	r0, r8
   d4998:	4649      	mov	r1, r9
   d499a:	f001 fd0b 	bl	d63b4 <__aeabi_dcmplt>
   d499e:	2800      	cmp	r0, #0
   d49a0:	f47f aeb1 	bne.w	d4706 <_Z9interruptv+0xea>
      lastStateChange = interruptTick;
   d49a4:	6823      	ldr	r3, [r4, #0]
   d49a6:	603b      	str	r3, [r7, #0]
      registerEndByteData(!inputPinValue);
   d49a8:	7830      	ldrb	r0, [r6, #0]
   d49aa:	f080 0001 	eor.w	r0, r0, #1
   d49ae:	f7ff fdb9 	bl	d4524 <_Z19registerEndByteDatab>
      if (!endByteMask) {
   d49b2:	4b0f      	ldr	r3, [pc, #60]	; (d49f0 <_Z9interruptv+0x3d4>)
   d49b4:	781b      	ldrb	r3, [r3, #0]
   d49b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d49ba:	2b00      	cmp	r3, #0
   d49bc:	f47f aea3 	bne.w	d4706 <_Z9interruptv+0xea>
        if(endByteBuffer != 0b01111110) {
   d49c0:	4b0c      	ldr	r3, [pc, #48]	; (d49f4 <_Z9interruptv+0x3d8>)
   d49c2:	781b      	ldrb	r3, [r3, #0]
   d49c4:	2b7e      	cmp	r3, #126	; 0x7e
   d49c6:	f47f aeca 	bne.w	d475e <_Z9interruptv+0x142>
        newMessage = true;
   d49ca:	4b0b      	ldr	r3, [pc, #44]	; (d49f8 <_Z9interruptv+0x3dc>)
   d49cc:	2101      	movs	r1, #1
   d49ce:	7019      	strb	r1, [r3, #0]
        state = WAITING;
   d49d0:	602a      	str	r2, [r5, #0]
        resetMEF();
   d49d2:	f7ff fdeb 	bl	d45ac <_Z8resetMEFv>
}
   d49d6:	e696      	b.n	d4706 <_Z9interruptv+0xea>
   d49d8:	2003e610 	.word	0x2003e610
   d49dc:	2003e61c 	.word	0x2003e61c
   d49e0:	3ff80000 	.word	0x3ff80000
   d49e4:	2003e472 	.word	0x2003e472
   d49e8:	2003e604 	.word	0x2003e604
   d49ec:	2003e630 	.word	0x2003e630
   d49f0:	2003e474 	.word	0x2003e474
   d49f4:	2003e606 	.word	0x2003e606
   d49f8:	2003e622 	.word	0x2003e622

000d49fc <_Z5crc16Phh>:

uint16_t crc16(uint8_t *input_str, uint8_t length ) {
   d49fc:	b510      	push	{r4, lr}
   d49fe:	4401      	add	r1, r0
   d4a00:	4604      	mov	r4, r0
	uint8_t x;
    uint16_t crc = 0xFFFF;
   d4a02:	f64f 70ff 	movw	r0, #65535	; 0xffff

    while (length--){
   d4a06:	428c      	cmp	r4, r1
   d4a08:	d00c      	beq.n	d4a24 <_Z5crc16Phh+0x28>
        x = crc >> 8 ^ *input_str++;
   d4a0a:	f814 3b01 	ldrb.w	r3, [r4], #1
   d4a0e:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
        x ^= x>>4;
   d4a12:	ea83 1313 	eor.w	r3, r3, r3, lsr #4
        crc = (crc << 8) ^ ((uint8_t)(x << 12)) ^ ((uint8_t)(x <<5)) ^ ((uint8_t)x);
   d4a16:	ea43 2200 	orr.w	r2, r3, r0, lsl #8
   d4a1a:	015b      	lsls	r3, r3, #5
   d4a1c:	b2db      	uxtb	r3, r3
   d4a1e:	4053      	eors	r3, r2
   d4a20:	b298      	uxth	r0, r3
    while (length--){
   d4a22:	e7f0      	b.n	d4a06 <_Z5crc16Phh+0xa>
    }
    return crc;
   d4a24:	bd10      	pop	{r4, pc}
	...

000d4a28 <_Z11sendMessagePhhhm>:
void sendMessage(uint8_t* message, uint8_t length, uint8_t flags, uint32_t ackDelay) {
   d4a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4a2c:	4607      	mov	r7, r0
   d4a2e:	460d      	mov	r5, r1
   d4a30:	4690      	mov	r8, r2
   d4a32:	461e      	mov	r6, r3
  uint16_t msgCrc = crc16(message, length);
   d4a34:	f7ff ffe2 	bl	d49fc <_Z5crc16Phh>
  while (crcAck != msgCrc) {
   d4a38:	f8df a058 	ldr.w	sl, [pc, #88]	; d4a94 <_Z11sendMessagePhhhm+0x6c>
    os_mutex_lock(transmitMutex);
   d4a3c:	f8df 9058 	ldr.w	r9, [pc, #88]	; d4a98 <_Z11sendMessagePhhhm+0x70>
  uint16_t msgCrc = crc16(message, length);
   d4a40:	4604      	mov	r4, r0
  while (crcAck != msgCrc) {
   d4a42:	f8ba 3000 	ldrh.w	r3, [sl]
   d4a46:	b29b      	uxth	r3, r3
   d4a48:	42a3      	cmp	r3, r4
   d4a4a:	d020      	beq.n	d4a8e <_Z11sendMessagePhhhm+0x66>
    os_mutex_lock(transmitMutex);
   d4a4c:	f8d9 0000 	ldr.w	r0, [r9]
   d4a50:	f000 f9a6 	bl	d4da0 <os_mutex_lock>
    preambule();
   d4a54:	f7ff fc8e 	bl	d4374 <_Z9preambulev>
    sendByte(0b01111110);
   d4a58:	207e      	movs	r0, #126	; 0x7e
   d4a5a:	f7ff fcb5 	bl	d43c8 <_Z8sendByteh>
    sendByte(flags);
   d4a5e:	4640      	mov	r0, r8
   d4a60:	f7ff fcb2 	bl	d43c8 <_Z8sendByteh>
    sendByte(length);
   d4a64:	4628      	mov	r0, r5
   d4a66:	f7ff fcaf 	bl	d43c8 <_Z8sendByteh>
    sendBytes(message, length);
   d4a6a:	4629      	mov	r1, r5
   d4a6c:	4638      	mov	r0, r7
   d4a6e:	f7ff fc99 	bl	d43a4 <_Z9sendBytesPhh>
    sendDualByte(msgCrc);
   d4a72:	4620      	mov	r0, r4
   d4a74:	f7ff fcb5 	bl	d43e2 <_Z12sendDualBytet>
    sendByte(0b01111110);
   d4a78:	207e      	movs	r0, #126	; 0x7e
   d4a7a:	f7ff fca5 	bl	d43c8 <_Z8sendByteh>
    os_mutex_unlock(transmitMutex);
   d4a7e:	f8d9 0000 	ldr.w	r0, [r9]
   d4a82:	f000 f995 	bl	d4db0 <os_mutex_unlock>
    delay(ackDelay);
   d4a86:	4630      	mov	r0, r6
   d4a88:	f000 fc2e 	bl	d52e8 <delay>
  while (crcAck != msgCrc) {
   d4a8c:	e7d9      	b.n	d4a42 <_Z11sendMessagePhhhm+0x1a>
}
   d4a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4a92:	bf00      	nop
   d4a94:	2003e602 	.word	0x2003e602
   d4a98:	2003e640 	.word	0x2003e640

000d4a9c <_Z21sendingThreadFunctionPv>:
void sendingThreadFunction(void *param) {
   d4a9c:	b508      	push	{r3, lr}
    sendMessage((uint8_t*)"Message Gab 1", 14, 0b00000000, 500);
   d4a9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4aa2:	2200      	movs	r2, #0
   d4aa4:	210e      	movs	r1, #14
   d4aa6:	4808      	ldr	r0, [pc, #32]	; (d4ac8 <_Z21sendingThreadFunctionPv+0x2c>)
   d4aa8:	f7ff ffbe 	bl	d4a28 <_Z11sendMessagePhhhm>
    delay(250);
   d4aac:	20fa      	movs	r0, #250	; 0xfa
   d4aae:	f000 fc1b 	bl	d52e8 <delay>
    sendMessage((uint8_t*)"Message Gab 2", 14, 0b00000000, 500);
   d4ab2:	4806      	ldr	r0, [pc, #24]	; (d4acc <_Z21sendingThreadFunctionPv+0x30>)
   d4ab4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   d4ab8:	2200      	movs	r2, #0
   d4aba:	210e      	movs	r1, #14
   d4abc:	f7ff ffb4 	bl	d4a28 <_Z11sendMessagePhhhm>
    delay(250);
   d4ac0:	20fa      	movs	r0, #250	; 0xfa
   d4ac2:	f000 fc11 	bl	d52e8 <delay>
	while(true) {
   d4ac6:	e7ea      	b.n	d4a9e <_Z21sendingThreadFunctionPv+0x2>
   d4ac8:	000d653c 	.word	0x000d653c
   d4acc:	000d654a 	.word	0x000d654a

000d4ad0 <_Z7sendAckt>:
void sendAck(uint16_t crc) {
   d4ad0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t crcSplit[2] = {(uint8_t)(crc & 0b1111111100000000 >> 8), (uint8_t)(crc & 0b0000000011111111)};
   d4ad2:	b2c3      	uxtb	r3, r0
  uint16_t crCeption = crc16(crcSplit, 2);
   d4ad4:	2102      	movs	r1, #2
void sendAck(uint16_t crc) {
   d4ad6:	4604      	mov	r4, r0
  uint16_t crCeption = crc16(crcSplit, 2);
   d4ad8:	a801      	add	r0, sp, #4
  uint8_t crcSplit[2] = {(uint8_t)(crc & 0b1111111100000000 >> 8), (uint8_t)(crc & 0b0000000011111111)};
   d4ada:	f88d 3004 	strb.w	r3, [sp, #4]
   d4ade:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t crCeption = crc16(crcSplit, 2);
   d4ae2:	f7ff ff8b 	bl	d49fc <_Z5crc16Phh>
  os_mutex_lock(transmitMutex);
   d4ae6:	4e0f      	ldr	r6, [pc, #60]	; (d4b24 <_Z7sendAckt+0x54>)
  uint16_t crCeption = crc16(crcSplit, 2);
   d4ae8:	4605      	mov	r5, r0
  os_mutex_lock(transmitMutex);
   d4aea:	6830      	ldr	r0, [r6, #0]
   d4aec:	f000 f958 	bl	d4da0 <os_mutex_lock>
  preambule();
   d4af0:	f7ff fc40 	bl	d4374 <_Z9preambulev>
  sendByte(0b01111110);
   d4af4:	207e      	movs	r0, #126	; 0x7e
   d4af6:	f7ff fc67 	bl	d43c8 <_Z8sendByteh>
  sendByte(0b00000001); //flags
   d4afa:	2001      	movs	r0, #1
   d4afc:	f7ff fc64 	bl	d43c8 <_Z8sendByteh>
  sendByte(2);          //length
   d4b00:	2002      	movs	r0, #2
   d4b02:	f7ff fc61 	bl	d43c8 <_Z8sendByteh>
  sendDualByte(crc);
   d4b06:	4620      	mov	r0, r4
   d4b08:	f7ff fc6b 	bl	d43e2 <_Z12sendDualBytet>
  sendDualByte(crCeption);
   d4b0c:	4628      	mov	r0, r5
   d4b0e:	f7ff fc68 	bl	d43e2 <_Z12sendDualBytet>
  sendByte(0b01111110);
   d4b12:	207e      	movs	r0, #126	; 0x7e
   d4b14:	f7ff fc58 	bl	d43c8 <_Z8sendByteh>
  os_mutex_unlock(transmitMutex);
   d4b18:	6830      	ldr	r0, [r6, #0]
   d4b1a:	f000 f949 	bl	d4db0 <os_mutex_unlock>
}
   d4b1e:	b002      	add	sp, #8
   d4b20:	bd70      	pop	{r4, r5, r6, pc}
   d4b22:	bf00      	nop
   d4b24:	2003e640 	.word	0x2003e640

000d4b28 <loop>:
void loop() {
   d4b28:	b538      	push	{r3, r4, r5, lr}
  if (newMessage) {
   d4b2a:	4b2f      	ldr	r3, [pc, #188]	; (d4be8 <loop+0xc0>)
   d4b2c:	781a      	ldrb	r2, [r3, #0]
   d4b2e:	b34a      	cbz	r2, d4b84 <loop+0x5c>
    newMessage = false;
   d4b30:	2200      	movs	r2, #0
   d4b32:	701a      	strb	r2, [r3, #0]
    if(receivedCrc == crc16((uint8_t*)byteBuffer, msgLength)) {
   d4b34:	4b2d      	ldr	r3, [pc, #180]	; (d4bec <loop+0xc4>)
   d4b36:	4d2e      	ldr	r5, [pc, #184]	; (d4bf0 <loop+0xc8>)
   d4b38:	7819      	ldrb	r1, [r3, #0]
   d4b3a:	482e      	ldr	r0, [pc, #184]	; (d4bf4 <loop+0xcc>)
   d4b3c:	f7ff ff5e 	bl	d49fc <_Z5crc16Phh>
   d4b40:	882b      	ldrh	r3, [r5, #0]
   d4b42:	b29b      	uxth	r3, r3
   d4b44:	4298      	cmp	r0, r3
   d4b46:	d147      	bne.n	d4bd8 <loop+0xb0>
      sendAck(receivedCrc);
   d4b48:	8828      	ldrh	r0, [r5, #0]
   d4b4a:	b280      	uxth	r0, r0
   d4b4c:	f7ff ffc0 	bl	d4ad0 <_Z7sendAckt>
      Serial.print("Message : ");
   d4b50:	f000 fd4a 	bl	d55e8 <_Z16_fetch_usbserialv>
   d4b54:	4928      	ldr	r1, [pc, #160]	; (d4bf8 <loop+0xd0>)
   d4b56:	f000 fb79 	bl	d524c <_ZN5Print5printEPKc>
      Serial.println((char*)byteBuffer);
   d4b5a:	f000 fd45 	bl	d55e8 <_Z16_fetch_usbserialv>
   d4b5e:	4925      	ldr	r1, [pc, #148]	; (d4bf4 <loop+0xcc>)
   d4b60:	f000 fb87 	bl	d5272 <_ZN5Print7printlnEPKc>
      Serial.print("Crc : ");
   d4b64:	f000 fd40 	bl	d55e8 <_Z16_fetch_usbserialv>
   d4b68:	4924      	ldr	r1, [pc, #144]	; (d4bfc <loop+0xd4>)
   d4b6a:	f000 fb6f 	bl	d524c <_ZN5Print5printEPKc>
      Serial.println(receivedCrc);
   d4b6e:	f000 fd3b 	bl	d55e8 <_Z16_fetch_usbserialv>
   d4b72:	8829      	ldrh	r1, [r5, #0]
   d4b74:	4604      	mov	r4, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4b76:	220a      	movs	r2, #10
   d4b78:	b289      	uxth	r1, r1
   d4b7a:	f000 fb84 	bl	d5286 <_ZN5Print11printNumberEmh>
        n += println();
   d4b7e:	4620      	mov	r0, r4
   d4b80:	f000 fb6b 	bl	d525a <_ZN5Print7printlnEv>
  if((state != WAITING) && (((System.ticks() - lastWaitingTick) / System.ticksPerMicrosecond()) > 1000000)) {
   d4b84:	4b1e      	ldr	r3, [pc, #120]	; (d4c00 <loop+0xd8>)
   d4b86:	681b      	ldr	r3, [r3, #0]
   d4b88:	b1a3      	cbz	r3, d4bb4 <loop+0x8c>
   d4b8a:	4b1e      	ldr	r3, [pc, #120]	; (d4c04 <loop+0xdc>)
   d4b8c:	4a1e      	ldr	r2, [pc, #120]	; (d4c08 <loop+0xe0>)
   d4b8e:	685b      	ldr	r3, [r3, #4]
   d4b90:	6812      	ldr	r2, [r2, #0]
        return SYSTEM_US_TICKS;
   d4b92:	491e      	ldr	r1, [pc, #120]	; (d4c0c <loop+0xe4>)
   d4b94:	1a9b      	subs	r3, r3, r2
   d4b96:	4a1e      	ldr	r2, [pc, #120]	; (d4c10 <loop+0xe8>)
   d4b98:	6812      	ldr	r2, [r2, #0]
   d4b9a:	fbb2 f2f1 	udiv	r2, r2, r1
   d4b9e:	fbb3 f3f2 	udiv	r3, r3, r2
   d4ba2:	428b      	cmp	r3, r1
   d4ba4:	d906      	bls.n	d4bb4 <loop+0x8c>
    resetMEF();
   d4ba6:	f7ff fd01 	bl	d45ac <_Z8resetMEFv>
    Serial.println("WAITING TIMEOUT");
   d4baa:	f000 fd1d 	bl	d55e8 <_Z16_fetch_usbserialv>
   d4bae:	4919      	ldr	r1, [pc, #100]	; (d4c14 <loop+0xec>)
   d4bb0:	f000 fb5f 	bl	d5272 <_ZN5Print7printlnEPKc>
  if (error) {
   d4bb4:	4b18      	ldr	r3, [pc, #96]	; (d4c18 <loop+0xf0>)
   d4bb6:	781a      	ldrb	r2, [r3, #0]
   d4bb8:	b1a2      	cbz	r2, d4be4 <loop+0xbc>
    error = false;
   d4bba:	2200      	movs	r2, #0
    delay(random(250, 750));
   d4bbc:	f240 21ee 	movw	r1, #750	; 0x2ee
   d4bc0:	20fa      	movs	r0, #250	; 0xfa
    error = false;
   d4bc2:	701a      	strb	r2, [r3, #0]
    delay(random(250, 750));
   d4bc4:	f000 fe31 	bl	d582a <_Z6randomii>
   d4bc8:	f000 fb8e 	bl	d52e8 <delay>
    resetMEF();
   d4bcc:	f7ff fcee 	bl	d45ac <_Z8resetMEFv>
}
   d4bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    interrupts();
   d4bd4:	f000 bd60 	b.w	d5698 <_Z10interruptsv>
      Serial.println("BAD MESSAGE RECEIVED");
   d4bd8:	f000 fd06 	bl	d55e8 <_Z16_fetch_usbserialv>
   d4bdc:	490f      	ldr	r1, [pc, #60]	; (d4c1c <loop+0xf4>)
   d4bde:	f000 fb48 	bl	d5272 <_ZN5Print7printlnEPKc>
   d4be2:	e7cf      	b.n	d4b84 <loop+0x5c>
}
   d4be4:	bd38      	pop	{r3, r4, r5, pc}
   d4be6:	bf00      	nop
   d4be8:	2003e622 	.word	0x2003e622
   d4bec:	2003e621 	.word	0x2003e621
   d4bf0:	2003e630 	.word	0x2003e630
   d4bf4:	2003e502 	.word	0x2003e502
   d4bf8:	000d6558 	.word	0x000d6558
   d4bfc:	000d6563 	.word	0x000d6563
   d4c00:	2003e63c 	.word	0x2003e63c
   d4c04:	e0001000 	.word	0xe0001000
   d4c08:	2003e614 	.word	0x2003e614
   d4c0c:	000f4240 	.word	0x000f4240
   d4c10:	2003e480 	.word	0x2003e480
   d4c14:	000d657f 	.word	0x000d657f
   d4c18:	2003e607 	.word	0x2003e607
   d4c1c:	000d656a 	.word	0x000d656a

000d4c20 <_GLOBAL__sub_I_SystemMode>:
   d4c20:	b538      	push	{r3, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4c22:	4d12      	ldr	r5, [pc, #72]	; (d4c6c <_GLOBAL__sub_I_SystemMode+0x4c>)
    SleepResult() {}
   d4c24:	4b12      	ldr	r3, [pc, #72]	; (d4c70 <_GLOBAL__sub_I_SystemMode+0x50>)
   d4c26:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4c28:	2400      	movs	r4, #0
        set_system_mode(mode);
   d4c2a:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   d4c2c:	602c      	str	r4, [r5, #0]
   d4c2e:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4c30:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4c32:	f000 f9ad 	bl	d4f90 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4c36:	4a0f      	ldr	r2, [pc, #60]	; (d4c74 <_GLOBAL__sub_I_SystemMode+0x54>)
   d4c38:	490f      	ldr	r1, [pc, #60]	; (d4c78 <_GLOBAL__sub_I_SystemMode+0x58>)
   d4c3a:	4628      	mov	r0, r5
   d4c3c:	f000 ff7e 	bl	d5b3c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4c40:	4621      	mov	r1, r4
   d4c42:	2001      	movs	r0, #1
   d4c44:	f000 f9b4 	bl	d4fb0 <system_thread_set_state>
        return SYSTEM_US_TICKS;
   d4c48:	4b0c      	ldr	r3, [pc, #48]	; (d4c7c <_GLOBAL__sub_I_SystemMode+0x5c>)
   d4c4a:	490d      	ldr	r1, [pc, #52]	; (d4c80 <_GLOBAL__sub_I_SystemMode+0x60>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	fbb3 f1f1 	udiv	r1, r3, r1
uint32_t manchesterTicks = System.ticksPerMicrosecond() * MANCHESTER_TIME;
   d4c52:	f240 23ee 	movw	r3, #750	; 0x2ee
   d4c56:	434b      	muls	r3, r1

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4c58:	480a      	ldr	r0, [pc, #40]	; (d4c84 <_GLOBAL__sub_I_SystemMode+0x64>)
   d4c5a:	490b      	ldr	r1, [pc, #44]	; (d4c88 <_GLOBAL__sub_I_SystemMode+0x68>)
   d4c5c:	6004      	str	r4, [r0, #0]
   d4c5e:	600b      	str	r3, [r1, #0]
   d4c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
Thread sendingThread;
   d4c64:	4a03      	ldr	r2, [pc, #12]	; (d4c74 <_GLOBAL__sub_I_SystemMode+0x54>)
   d4c66:	4909      	ldr	r1, [pc, #36]	; (d4c8c <_GLOBAL__sub_I_SystemMode+0x6c>)
   d4c68:	f000 bf68 	b.w	d5b3c <__aeabi_atexit>
   d4c6c:	2003e4f4 	.word	0x2003e4f4
   d4c70:	ffff0000 	.word	0xffff0000
   d4c74:	2003e4e8 	.word	0x2003e4e8
   d4c78:	000d4111 	.word	0x000d4111
   d4c7c:	2003e480 	.word	0x2003e480
   d4c80:	000f4240 	.word	0x000f4240
   d4c84:	2003e634 	.word	0x2003e634
   d4c88:	2003e618 	.word	0x2003e618
   d4c8c:	000d414d 	.word	0x000d414d

000d4c90 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <netdb_freeaddrinfo+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	689b      	ldr	r3, [r3, #8]
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	00030268 	.word	0x00030268

000d4ca0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <netdb_getaddrinfo+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	68db      	ldr	r3, [r3, #12]
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	00030268 	.word	0x00030268

000d4cb0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <HAL_Pin_Map+0xc>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	681b      	ldr	r3, [r3, #0]
   d4cb8:	9301      	str	r3, [sp, #4]
   d4cba:	bd08      	pop	{r3, pc}
   d4cbc:	0003022c 	.word	0x0003022c

000d4cc0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <HAL_Pin_Mode+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	689b      	ldr	r3, [r3, #8]
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	0003022c 	.word	0x0003022c

000d4cd0 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <HAL_Interrupts_Attach+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	699b      	ldr	r3, [r3, #24]
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	0003022c 	.word	0x0003022c

000d4ce0 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b02      	ldr	r3, [pc, #8]	; (d4cec <HAL_Interrupts_Detach+0xc>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	69db      	ldr	r3, [r3, #28]
   d4ce8:	9301      	str	r3, [sp, #4]
   d4cea:	bd08      	pop	{r3, pc}
   d4cec:	0003022c 	.word	0x0003022c

000d4cf0 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <HAL_Interrupts_Enable_All+0xc>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	6a1b      	ldr	r3, [r3, #32]
   d4cf8:	9301      	str	r3, [sp, #4]
   d4cfa:	bd08      	pop	{r3, pc}
   d4cfc:	0003022c 	.word	0x0003022c

000d4d00 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <HAL_Interrupts_Disable_All+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	0003022c 	.word	0x0003022c

000d4d10 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <HAL_RNG_GetRandomNumber+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	685b      	ldr	r3, [r3, #4]
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	00030218 	.word	0x00030218

000d4d20 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <HAL_Delay_Milliseconds+0xc>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	689b      	ldr	r3, [r3, #8]
   d4d28:	9301      	str	r3, [sp, #4]
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	00030218 	.word	0x00030218

000d4d30 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <HAL_Delay_Microseconds+0xc>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	68db      	ldr	r3, [r3, #12]
   d4d38:	9301      	str	r3, [sp, #4]
   d4d3a:	bd08      	pop	{r3, pc}
   d4d3c:	00030218 	.word	0x00030218

000d4d40 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4d40:	b508      	push	{r3, lr}
   d4d42:	4b02      	ldr	r3, [pc, #8]	; (d4d4c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4d44:	681b      	ldr	r3, [r3, #0]
   d4d46:	695b      	ldr	r3, [r3, #20]
   d4d48:	9301      	str	r3, [sp, #4]
   d4d4a:	bd08      	pop	{r3, pc}
   d4d4c:	00030218 	.word	0x00030218

000d4d50 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4d50:	b508      	push	{r3, lr}
   d4d52:	4b02      	ldr	r3, [pc, #8]	; (d4d5c <os_thread_create+0xc>)
   d4d54:	681b      	ldr	r3, [r3, #0]
   d4d56:	685b      	ldr	r3, [r3, #4]
   d4d58:	9301      	str	r3, [sp, #4]
   d4d5a:	bd08      	pop	{r3, pc}
   d4d5c:	00030248 	.word	0x00030248

000d4d60 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4d60:	b508      	push	{r3, lr}
   d4d62:	4b02      	ldr	r3, [pc, #8]	; (d4d6c <os_thread_is_current+0xc>)
   d4d64:	681b      	ldr	r3, [r3, #0]
   d4d66:	689b      	ldr	r3, [r3, #8]
   d4d68:	9301      	str	r3, [sp, #4]
   d4d6a:	bd08      	pop	{r3, pc}
   d4d6c:	00030248 	.word	0x00030248

000d4d70 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4d70:	b508      	push	{r3, lr}
   d4d72:	4b02      	ldr	r3, [pc, #8]	; (d4d7c <os_thread_join+0xc>)
   d4d74:	681b      	ldr	r3, [r3, #0]
   d4d76:	691b      	ldr	r3, [r3, #16]
   d4d78:	9301      	str	r3, [sp, #4]
   d4d7a:	bd08      	pop	{r3, pc}
   d4d7c:	00030248 	.word	0x00030248

000d4d80 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4d80:	b508      	push	{r3, lr}
   d4d82:	4b02      	ldr	r3, [pc, #8]	; (d4d8c <os_thread_cleanup+0xc>)
   d4d84:	681b      	ldr	r3, [r3, #0]
   d4d86:	695b      	ldr	r3, [r3, #20]
   d4d88:	9301      	str	r3, [sp, #4]
   d4d8a:	bd08      	pop	{r3, pc}
   d4d8c:	00030248 	.word	0x00030248

000d4d90 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4d90:	b508      	push	{r3, lr}
   d4d92:	4b02      	ldr	r3, [pc, #8]	; (d4d9c <os_mutex_create+0xc>)
   d4d94:	681b      	ldr	r3, [r3, #0]
   d4d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d98:	9301      	str	r3, [sp, #4]
   d4d9a:	bd08      	pop	{r3, pc}
   d4d9c:	00030248 	.word	0x00030248

000d4da0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d4da0:	b508      	push	{r3, lr}
   d4da2:	4b02      	ldr	r3, [pc, #8]	; (d4dac <os_mutex_lock+0xc>)
   d4da4:	681b      	ldr	r3, [r3, #0]
   d4da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4da8:	9301      	str	r3, [sp, #4]
   d4daa:	bd08      	pop	{r3, pc}
   d4dac:	00030248 	.word	0x00030248

000d4db0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d4db0:	b508      	push	{r3, lr}
   d4db2:	4b02      	ldr	r3, [pc, #8]	; (d4dbc <os_mutex_unlock+0xc>)
   d4db4:	681b      	ldr	r3, [r3, #0]
   d4db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4db8:	9301      	str	r3, [sp, #4]
   d4dba:	bd08      	pop	{r3, pc}
   d4dbc:	00030248 	.word	0x00030248

000d4dc0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4dc0:	b508      	push	{r3, lr}
   d4dc2:	4b02      	ldr	r3, [pc, #8]	; (d4dcc <os_mutex_recursive_create+0xc>)
   d4dc4:	681b      	ldr	r3, [r3, #0]
   d4dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4dc8:	9301      	str	r3, [sp, #4]
   d4dca:	bd08      	pop	{r3, pc}
   d4dcc:	00030248 	.word	0x00030248

000d4dd0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4dd0:	b508      	push	{r3, lr}
   d4dd2:	4b02      	ldr	r3, [pc, #8]	; (d4ddc <os_mutex_recursive_destroy+0xc>)
   d4dd4:	681b      	ldr	r3, [r3, #0]
   d4dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4dd8:	9301      	str	r3, [sp, #4]
   d4dda:	bd08      	pop	{r3, pc}
   d4ddc:	00030248 	.word	0x00030248

000d4de0 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4de0:	b508      	push	{r3, lr}
   d4de2:	4b02      	ldr	r3, [pc, #8]	; (d4dec <os_thread_exit+0xc>)
   d4de4:	681b      	ldr	r3, [r3, #0]
   d4de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4de8:	9301      	str	r3, [sp, #4]
   d4dea:	bd08      	pop	{r3, pc}
   d4dec:	00030248 	.word	0x00030248

000d4df0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4df0:	b508      	push	{r3, lr}
   d4df2:	4b02      	ldr	r3, [pc, #8]	; (d4dfc <inet_inet_ntop+0xc>)
   d4df4:	681b      	ldr	r3, [r3, #0]
   d4df6:	695b      	ldr	r3, [r3, #20]
   d4df8:	9301      	str	r3, [sp, #4]
   d4dfa:	bd08      	pop	{r3, pc}
   d4dfc:	00030264 	.word	0x00030264

000d4e00 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4e00:	b508      	push	{r3, lr}
   d4e02:	4b02      	ldr	r3, [pc, #8]	; (d4e0c <hal_usart_init+0xc>)
   d4e04:	681b      	ldr	r3, [r3, #0]
   d4e06:	681b      	ldr	r3, [r3, #0]
   d4e08:	9301      	str	r3, [sp, #4]
   d4e0a:	bd08      	pop	{r3, pc}
   d4e0c:	0003023c 	.word	0x0003023c

000d4e10 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4e10:	b508      	push	{r3, lr}
   d4e12:	4b02      	ldr	r3, [pc, #8]	; (d4e1c <hal_usart_write+0xc>)
   d4e14:	681b      	ldr	r3, [r3, #0]
   d4e16:	68db      	ldr	r3, [r3, #12]
   d4e18:	9301      	str	r3, [sp, #4]
   d4e1a:	bd08      	pop	{r3, pc}
   d4e1c:	0003023c 	.word	0x0003023c

000d4e20 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4e20:	b508      	push	{r3, lr}
   d4e22:	4b02      	ldr	r3, [pc, #8]	; (d4e2c <hal_usart_available+0xc>)
   d4e24:	681b      	ldr	r3, [r3, #0]
   d4e26:	691b      	ldr	r3, [r3, #16]
   d4e28:	9301      	str	r3, [sp, #4]
   d4e2a:	bd08      	pop	{r3, pc}
   d4e2c:	0003023c 	.word	0x0003023c

000d4e30 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4e30:	b508      	push	{r3, lr}
   d4e32:	4b02      	ldr	r3, [pc, #8]	; (d4e3c <hal_usart_read+0xc>)
   d4e34:	681b      	ldr	r3, [r3, #0]
   d4e36:	695b      	ldr	r3, [r3, #20]
   d4e38:	9301      	str	r3, [sp, #4]
   d4e3a:	bd08      	pop	{r3, pc}
   d4e3c:	0003023c 	.word	0x0003023c

000d4e40 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4e40:	b508      	push	{r3, lr}
   d4e42:	4b02      	ldr	r3, [pc, #8]	; (d4e4c <hal_usart_peek+0xc>)
   d4e44:	681b      	ldr	r3, [r3, #0]
   d4e46:	699b      	ldr	r3, [r3, #24]
   d4e48:	9301      	str	r3, [sp, #4]
   d4e4a:	bd08      	pop	{r3, pc}
   d4e4c:	0003023c 	.word	0x0003023c

000d4e50 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4e50:	b508      	push	{r3, lr}
   d4e52:	4b02      	ldr	r3, [pc, #8]	; (d4e5c <hal_usart_flush+0xc>)
   d4e54:	681b      	ldr	r3, [r3, #0]
   d4e56:	69db      	ldr	r3, [r3, #28]
   d4e58:	9301      	str	r3, [sp, #4]
   d4e5a:	bd08      	pop	{r3, pc}
   d4e5c:	0003023c 	.word	0x0003023c

000d4e60 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4e60:	b508      	push	{r3, lr}
   d4e62:	4b02      	ldr	r3, [pc, #8]	; (d4e6c <hal_usart_is_enabled+0xc>)
   d4e64:	681b      	ldr	r3, [r3, #0]
   d4e66:	6a1b      	ldr	r3, [r3, #32]
   d4e68:	9301      	str	r3, [sp, #4]
   d4e6a:	bd08      	pop	{r3, pc}
   d4e6c:	0003023c 	.word	0x0003023c

000d4e70 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4e70:	b508      	push	{r3, lr}
   d4e72:	4b02      	ldr	r3, [pc, #8]	; (d4e7c <hal_usart_available_data_for_write+0xc>)
   d4e74:	681b      	ldr	r3, [r3, #0]
   d4e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e78:	9301      	str	r3, [sp, #4]
   d4e7a:	bd08      	pop	{r3, pc}
   d4e7c:	0003023c 	.word	0x0003023c

000d4e80 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4e80:	b508      	push	{r3, lr}
   d4e82:	4b02      	ldr	r3, [pc, #8]	; (d4e8c <hal_i2c_write+0xc>)
   d4e84:	681b      	ldr	r3, [r3, #0]
   d4e86:	6a1b      	ldr	r3, [r3, #32]
   d4e88:	9301      	str	r3, [sp, #4]
   d4e8a:	bd08      	pop	{r3, pc}
   d4e8c:	00030228 	.word	0x00030228

000d4e90 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4e90:	b508      	push	{r3, lr}
   d4e92:	4b02      	ldr	r3, [pc, #8]	; (d4e9c <hal_i2c_available+0xc>)
   d4e94:	681b      	ldr	r3, [r3, #0]
   d4e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e98:	9301      	str	r3, [sp, #4]
   d4e9a:	bd08      	pop	{r3, pc}
   d4e9c:	00030228 	.word	0x00030228

000d4ea0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4ea0:	b508      	push	{r3, lr}
   d4ea2:	4b02      	ldr	r3, [pc, #8]	; (d4eac <hal_i2c_read+0xc>)
   d4ea4:	681b      	ldr	r3, [r3, #0]
   d4ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ea8:	9301      	str	r3, [sp, #4]
   d4eaa:	bd08      	pop	{r3, pc}
   d4eac:	00030228 	.word	0x00030228

000d4eb0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4eb0:	b508      	push	{r3, lr}
   d4eb2:	4b02      	ldr	r3, [pc, #8]	; (d4ebc <hal_i2c_peek+0xc>)
   d4eb4:	681b      	ldr	r3, [r3, #0]
   d4eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4eb8:	9301      	str	r3, [sp, #4]
   d4eba:	bd08      	pop	{r3, pc}
   d4ebc:	00030228 	.word	0x00030228

000d4ec0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4ec0:	b508      	push	{r3, lr}
   d4ec2:	4b02      	ldr	r3, [pc, #8]	; (d4ecc <hal_i2c_flush+0xc>)
   d4ec4:	681b      	ldr	r3, [r3, #0]
   d4ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ec8:	9301      	str	r3, [sp, #4]
   d4eca:	bd08      	pop	{r3, pc}
   d4ecc:	00030228 	.word	0x00030228

000d4ed0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4ed0:	b508      	push	{r3, lr}
   d4ed2:	4b02      	ldr	r3, [pc, #8]	; (d4edc <hal_i2c_is_enabled+0xc>)
   d4ed4:	681b      	ldr	r3, [r3, #0]
   d4ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ed8:	9301      	str	r3, [sp, #4]
   d4eda:	bd08      	pop	{r3, pc}
   d4edc:	00030228 	.word	0x00030228

000d4ee0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4ee0:	b508      	push	{r3, lr}
   d4ee2:	4b02      	ldr	r3, [pc, #8]	; (d4eec <hal_i2c_init+0xc>)
   d4ee4:	681b      	ldr	r3, [r3, #0]
   d4ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ee8:	9301      	str	r3, [sp, #4]
   d4eea:	bd08      	pop	{r3, pc}
   d4eec:	00030228 	.word	0x00030228

000d4ef0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4ef0:	b508      	push	{r3, lr}
   d4ef2:	4b02      	ldr	r3, [pc, #8]	; (d4efc <hal_spi_init+0xc>)
   d4ef4:	681b      	ldr	r3, [r3, #0]
   d4ef6:	69db      	ldr	r3, [r3, #28]
   d4ef8:	9301      	str	r3, [sp, #4]
   d4efa:	bd08      	pop	{r3, pc}
   d4efc:	00030230 	.word	0x00030230

000d4f00 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4f00:	b508      	push	{r3, lr}
   d4f02:	4b02      	ldr	r3, [pc, #8]	; (d4f0c <hal_spi_is_enabled+0xc>)
   d4f04:	681b      	ldr	r3, [r3, #0]
   d4f06:	6a1b      	ldr	r3, [r3, #32]
   d4f08:	9301      	str	r3, [sp, #4]
   d4f0a:	bd08      	pop	{r3, pc}
   d4f0c:	00030230 	.word	0x00030230

000d4f10 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4f10:	b508      	push	{r3, lr}
   d4f12:	4b02      	ldr	r3, [pc, #8]	; (d4f1c <HAL_USB_USART_Init+0xc>)
   d4f14:	681b      	ldr	r3, [r3, #0]
   d4f16:	681b      	ldr	r3, [r3, #0]
   d4f18:	9301      	str	r3, [sp, #4]
   d4f1a:	bd08      	pop	{r3, pc}
   d4f1c:	0003024c 	.word	0x0003024c

000d4f20 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4f20:	b508      	push	{r3, lr}
   d4f22:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <HAL_USB_USART_Begin+0xc>)
   d4f24:	681b      	ldr	r3, [r3, #0]
   d4f26:	685b      	ldr	r3, [r3, #4]
   d4f28:	9301      	str	r3, [sp, #4]
   d4f2a:	bd08      	pop	{r3, pc}
   d4f2c:	0003024c 	.word	0x0003024c

000d4f30 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4f30:	b508      	push	{r3, lr}
   d4f32:	4b02      	ldr	r3, [pc, #8]	; (d4f3c <HAL_USB_USART_Available_Data+0xc>)
   d4f34:	681b      	ldr	r3, [r3, #0]
   d4f36:	691b      	ldr	r3, [r3, #16]
   d4f38:	9301      	str	r3, [sp, #4]
   d4f3a:	bd08      	pop	{r3, pc}
   d4f3c:	0003024c 	.word	0x0003024c

000d4f40 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4f40:	b508      	push	{r3, lr}
   d4f42:	4b02      	ldr	r3, [pc, #8]	; (d4f4c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4f44:	681b      	ldr	r3, [r3, #0]
   d4f46:	695b      	ldr	r3, [r3, #20]
   d4f48:	9301      	str	r3, [sp, #4]
   d4f4a:	bd08      	pop	{r3, pc}
   d4f4c:	0003024c 	.word	0x0003024c

000d4f50 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f50:	b508      	push	{r3, lr}
   d4f52:	4b02      	ldr	r3, [pc, #8]	; (d4f5c <HAL_USB_USART_Receive_Data+0xc>)
   d4f54:	681b      	ldr	r3, [r3, #0]
   d4f56:	699b      	ldr	r3, [r3, #24]
   d4f58:	9301      	str	r3, [sp, #4]
   d4f5a:	bd08      	pop	{r3, pc}
   d4f5c:	0003024c 	.word	0x0003024c

000d4f60 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f60:	b508      	push	{r3, lr}
   d4f62:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <HAL_USB_USART_Send_Data+0xc>)
   d4f64:	681b      	ldr	r3, [r3, #0]
   d4f66:	69db      	ldr	r3, [r3, #28]
   d4f68:	9301      	str	r3, [sp, #4]
   d4f6a:	bd08      	pop	{r3, pc}
   d4f6c:	0003024c 	.word	0x0003024c

000d4f70 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4f70:	b508      	push	{r3, lr}
   d4f72:	4b02      	ldr	r3, [pc, #8]	; (d4f7c <HAL_USB_USART_Flush_Data+0xc>)
   d4f74:	681b      	ldr	r3, [r3, #0]
   d4f76:	6a1b      	ldr	r3, [r3, #32]
   d4f78:	9301      	str	r3, [sp, #4]
   d4f7a:	bd08      	pop	{r3, pc}
   d4f7c:	0003024c 	.word	0x0003024c

000d4f80 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4f80:	b508      	push	{r3, lr}
   d4f82:	4b02      	ldr	r3, [pc, #8]	; (d4f8c <panic_+0xc>)
   d4f84:	681b      	ldr	r3, [r3, #0]
   d4f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f88:	9301      	str	r3, [sp, #4]
   d4f8a:	bd08      	pop	{r3, pc}
   d4f8c:	00030260 	.word	0x00030260

000d4f90 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f90:	b508      	push	{r3, lr}
   d4f92:	4b02      	ldr	r3, [pc, #8]	; (d4f9c <set_system_mode+0xc>)
   d4f94:	681b      	ldr	r3, [r3, #0]
   d4f96:	685b      	ldr	r3, [r3, #4]
   d4f98:	9301      	str	r3, [sp, #4]
   d4f9a:	bd08      	pop	{r3, pc}
   d4f9c:	00030220 	.word	0x00030220

000d4fa0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4fa0:	b508      	push	{r3, lr}
   d4fa2:	4b02      	ldr	r3, [pc, #8]	; (d4fac <system_delay_ms+0xc>)
   d4fa4:	681b      	ldr	r3, [r3, #0]
   d4fa6:	695b      	ldr	r3, [r3, #20]
   d4fa8:	9301      	str	r3, [sp, #4]
   d4faa:	bd08      	pop	{r3, pc}
   d4fac:	00030220 	.word	0x00030220

000d4fb0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b02      	ldr	r3, [pc, #8]	; (d4fbc <system_thread_set_state+0xc>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4fb8:	9301      	str	r3, [sp, #4]
   d4fba:	bd08      	pop	{r3, pc}
   d4fbc:	00030220 	.word	0x00030220

000d4fc0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4fc0:	b508      	push	{r3, lr}
   d4fc2:	4b03      	ldr	r3, [pc, #12]	; (d4fd0 <system_ctrl_set_app_request_handler+0x10>)
   d4fc4:	681b      	ldr	r3, [r3, #0]
   d4fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4fca:	9301      	str	r3, [sp, #4]
   d4fcc:	bd08      	pop	{r3, pc}
   d4fce:	0000      	.short	0x0000
   d4fd0:	00030220 	.word	0x00030220

000d4fd4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b03      	ldr	r3, [pc, #12]	; (d4fe4 <system_ctrl_set_result+0x10>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4fde:	9301      	str	r3, [sp, #4]
   d4fe0:	bd08      	pop	{r3, pc}
   d4fe2:	0000      	.short	0x0000
   d4fe4:	00030220 	.word	0x00030220

000d4fe8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fe8:	b508      	push	{r3, lr}
   d4fea:	4b02      	ldr	r3, [pc, #8]	; (d4ff4 <network_connect+0xc>)
   d4fec:	681b      	ldr	r3, [r3, #0]
   d4fee:	685b      	ldr	r3, [r3, #4]
   d4ff0:	9301      	str	r3, [sp, #4]
   d4ff2:	bd08      	pop	{r3, pc}
   d4ff4:	00030240 	.word	0x00030240

000d4ff8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4ff8:	b508      	push	{r3, lr}
   d4ffa:	4b02      	ldr	r3, [pc, #8]	; (d5004 <network_connecting+0xc>)
   d4ffc:	681b      	ldr	r3, [r3, #0]
   d4ffe:	689b      	ldr	r3, [r3, #8]
   d5000:	9301      	str	r3, [sp, #4]
   d5002:	bd08      	pop	{r3, pc}
   d5004:	00030240 	.word	0x00030240

000d5008 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5008:	b508      	push	{r3, lr}
   d500a:	4b02      	ldr	r3, [pc, #8]	; (d5014 <network_disconnect+0xc>)
   d500c:	681b      	ldr	r3, [r3, #0]
   d500e:	68db      	ldr	r3, [r3, #12]
   d5010:	9301      	str	r3, [sp, #4]
   d5012:	bd08      	pop	{r3, pc}
   d5014:	00030240 	.word	0x00030240

000d5018 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5018:	b508      	push	{r3, lr}
   d501a:	4b02      	ldr	r3, [pc, #8]	; (d5024 <network_ready+0xc>)
   d501c:	681b      	ldr	r3, [r3, #0]
   d501e:	691b      	ldr	r3, [r3, #16]
   d5020:	9301      	str	r3, [sp, #4]
   d5022:	bd08      	pop	{r3, pc}
   d5024:	00030240 	.word	0x00030240

000d5028 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5028:	b508      	push	{r3, lr}
   d502a:	4b02      	ldr	r3, [pc, #8]	; (d5034 <network_on+0xc>)
   d502c:	681b      	ldr	r3, [r3, #0]
   d502e:	695b      	ldr	r3, [r3, #20]
   d5030:	9301      	str	r3, [sp, #4]
   d5032:	bd08      	pop	{r3, pc}
   d5034:	00030240 	.word	0x00030240

000d5038 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5038:	b508      	push	{r3, lr}
   d503a:	4b02      	ldr	r3, [pc, #8]	; (d5044 <network_off+0xc>)
   d503c:	681b      	ldr	r3, [r3, #0]
   d503e:	699b      	ldr	r3, [r3, #24]
   d5040:	9301      	str	r3, [sp, #4]
   d5042:	bd08      	pop	{r3, pc}
   d5044:	00030240 	.word	0x00030240

000d5048 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5048:	b508      	push	{r3, lr}
   d504a:	4b02      	ldr	r3, [pc, #8]	; (d5054 <network_listen+0xc>)
   d504c:	681b      	ldr	r3, [r3, #0]
   d504e:	69db      	ldr	r3, [r3, #28]
   d5050:	9301      	str	r3, [sp, #4]
   d5052:	bd08      	pop	{r3, pc}
   d5054:	00030240 	.word	0x00030240

000d5058 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5058:	b508      	push	{r3, lr}
   d505a:	4b02      	ldr	r3, [pc, #8]	; (d5064 <network_listening+0xc>)
   d505c:	681b      	ldr	r3, [r3, #0]
   d505e:	6a1b      	ldr	r3, [r3, #32]
   d5060:	9301      	str	r3, [sp, #4]
   d5062:	bd08      	pop	{r3, pc}
   d5064:	00030240 	.word	0x00030240

000d5068 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5068:	b508      	push	{r3, lr}
   d506a:	4b02      	ldr	r3, [pc, #8]	; (d5074 <network_set_listen_timeout+0xc>)
   d506c:	681b      	ldr	r3, [r3, #0]
   d506e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5070:	9301      	str	r3, [sp, #4]
   d5072:	bd08      	pop	{r3, pc}
   d5074:	00030240 	.word	0x00030240

000d5078 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5078:	b508      	push	{r3, lr}
   d507a:	4b02      	ldr	r3, [pc, #8]	; (d5084 <network_get_listen_timeout+0xc>)
   d507c:	681b      	ldr	r3, [r3, #0]
   d507e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5080:	9301      	str	r3, [sp, #4]
   d5082:	bd08      	pop	{r3, pc}
   d5084:	00030240 	.word	0x00030240

000d5088 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5088:	b508      	push	{r3, lr}
   d508a:	4b02      	ldr	r3, [pc, #8]	; (d5094 <network_is_on+0xc>)
   d508c:	681b      	ldr	r3, [r3, #0]
   d508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5090:	9301      	str	r3, [sp, #4]
   d5092:	bd08      	pop	{r3, pc}
   d5094:	00030240 	.word	0x00030240

000d5098 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5098:	b508      	push	{r3, lr}
   d509a:	4b02      	ldr	r3, [pc, #8]	; (d50a4 <network_is_off+0xc>)
   d509c:	681b      	ldr	r3, [r3, #0]
   d509e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d50a0:	9301      	str	r3, [sp, #4]
   d50a2:	bd08      	pop	{r3, pc}
   d50a4:	00030240 	.word	0x00030240

000d50a8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d50a8:	b508      	push	{r3, lr}
   d50aa:	4b02      	ldr	r3, [pc, #8]	; (d50b4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d50ac:	681b      	ldr	r3, [r3, #0]
   d50ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d50b0:	9301      	str	r3, [sp, #4]
   d50b2:	bd08      	pop	{r3, pc}
   d50b4:	00030244 	.word	0x00030244

000d50b8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d50b8:	b508      	push	{r3, lr}
   d50ba:	4b02      	ldr	r3, [pc, #8]	; (d50c4 <malloc+0xc>)
   d50bc:	681b      	ldr	r3, [r3, #0]
   d50be:	681b      	ldr	r3, [r3, #0]
   d50c0:	9301      	str	r3, [sp, #4]
   d50c2:	bd08      	pop	{r3, pc}
   d50c4:	0003021c 	.word	0x0003021c

000d50c8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d50c8:	b508      	push	{r3, lr}
   d50ca:	4b02      	ldr	r3, [pc, #8]	; (d50d4 <free+0xc>)
   d50cc:	681b      	ldr	r3, [r3, #0]
   d50ce:	685b      	ldr	r3, [r3, #4]
   d50d0:	9301      	str	r3, [sp, #4]
   d50d2:	bd08      	pop	{r3, pc}
   d50d4:	0003021c 	.word	0x0003021c

000d50d8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d50d8:	b508      	push	{r3, lr}
   d50da:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <abort+0xc>)
   d50dc:	681b      	ldr	r3, [r3, #0]
   d50de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50e0:	9301      	str	r3, [sp, #4]
   d50e2:	bd08      	pop	{r3, pc}
   d50e4:	0003021c 	.word	0x0003021c

000d50e8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d50e8:	b508      	push	{r3, lr}
   d50ea:	4b02      	ldr	r3, [pc, #8]	; (d50f4 <newlib_impure_ptr_callback+0xc>)
   d50ec:	681b      	ldr	r3, [r3, #0]
   d50ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d50f0:	9301      	str	r3, [sp, #4]
   d50f2:	bd08      	pop	{r3, pc}
   d50f4:	0003021c 	.word	0x0003021c

000d50f8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d50f8:	2200      	movs	r2, #0
   d50fa:	6840      	ldr	r0, [r0, #4]
   d50fc:	4611      	mov	r1, r2
   d50fe:	f7ff bfab 	b.w	d5058 <network_listening>

000d5102 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5102:	2200      	movs	r2, #0
   d5104:	6840      	ldr	r0, [r0, #4]
   d5106:	4611      	mov	r1, r2
   d5108:	f7ff bfb6 	b.w	d5078 <network_get_listen_timeout>

000d510c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d510c:	6840      	ldr	r0, [r0, #4]
   d510e:	2200      	movs	r2, #0
   d5110:	f7ff bfaa 	b.w	d5068 <network_set_listen_timeout>

000d5114 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5114:	6840      	ldr	r0, [r0, #4]
   d5116:	2200      	movs	r2, #0
   d5118:	f081 0101 	eor.w	r1, r1, #1
   d511c:	f7ff bf94 	b.w	d5048 <network_listen>

000d5120 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5120:	2300      	movs	r3, #0
   d5122:	6840      	ldr	r0, [r0, #4]
   d5124:	461a      	mov	r2, r3
   d5126:	4619      	mov	r1, r3
   d5128:	f7ff bf86 	b.w	d5038 <network_off>

000d512c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d512c:	2300      	movs	r3, #0
   d512e:	6840      	ldr	r0, [r0, #4]
   d5130:	461a      	mov	r2, r3
   d5132:	4619      	mov	r1, r3
   d5134:	f7ff bf78 	b.w	d5028 <network_on>

000d5138 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5138:	2200      	movs	r2, #0
   d513a:	6840      	ldr	r0, [r0, #4]
   d513c:	4611      	mov	r1, r2
   d513e:	f7ff bf6b 	b.w	d5018 <network_ready>

000d5142 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5142:	2200      	movs	r2, #0
   d5144:	6840      	ldr	r0, [r0, #4]
   d5146:	4611      	mov	r1, r2
   d5148:	f7ff bf56 	b.w	d4ff8 <network_connecting>

000d514c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d514c:	6840      	ldr	r0, [r0, #4]
   d514e:	2200      	movs	r2, #0
   d5150:	2102      	movs	r1, #2
   d5152:	f7ff bf59 	b.w	d5008 <network_disconnect>

000d5156 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5156:	2300      	movs	r3, #0
   d5158:	6840      	ldr	r0, [r0, #4]
   d515a:	461a      	mov	r2, r3
   d515c:	f7ff bf44 	b.w	d4fe8 <network_connect>

000d5160 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5160:	4b02      	ldr	r3, [pc, #8]	; (d516c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5162:	2203      	movs	r2, #3
   d5164:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5166:	4a02      	ldr	r2, [pc, #8]	; (d5170 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5168:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d516a:	4770      	bx	lr
   d516c:	2003e644 	.word	0x2003e644
   d5170:	000d6598 	.word	0x000d6598

000d5174 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5174:	b510      	push	{r4, lr}
   d5176:	4604      	mov	r4, r0
   d5178:	4608      	mov	r0, r1
{
    _spi = spi;
   d517a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d517c:	f7ff feb8 	bl	d4ef0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5180:	2300      	movs	r3, #0
   d5182:	6063      	str	r3, [r4, #4]
}
   d5184:	4620      	mov	r0, r4
   d5186:	bd10      	pop	{r4, pc}

000d5188 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5188:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d518a:	4b09      	ldr	r3, [pc, #36]	; (d51b0 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d518c:	4c09      	ldr	r4, [pc, #36]	; (d51b4 <_GLOBAL__sub_I_System+0x2c>)
   d518e:	2202      	movs	r2, #2
   d5190:	2000      	movs	r0, #0
   d5192:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5194:	4b08      	ldr	r3, [pc, #32]	; (d51b8 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5196:	6020      	str	r0, [r4, #0]
   d5198:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d519a:	71a0      	strb	r0, [r4, #6]
   d519c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d519e:	f7ff fef7 	bl	d4f90 <set_system_mode>
SystemClass System;
   d51a2:	4620      	mov	r0, r4
   d51a4:	4a05      	ldr	r2, [pc, #20]	; (d51bc <_GLOBAL__sub_I_System+0x34>)
   d51a6:	4906      	ldr	r1, [pc, #24]	; (d51c0 <_GLOBAL__sub_I_System+0x38>)
   d51a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d51ac:	f000 bcc6 	b.w	d5b3c <__aeabi_atexit>
   d51b0:	2003e658 	.word	0x2003e658
   d51b4:	2003e64c 	.word	0x2003e64c
   d51b8:	ffff0000 	.word	0xffff0000
   d51bc:	2003e4e8 	.word	0x2003e4e8
   d51c0:	000d4111 	.word	0x000d4111

000d51c4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d51c4:	b510      	push	{r4, lr}
   d51c6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d51c8:	6800      	ldr	r0, [r0, #0]
   d51ca:	b108      	cbz	r0, d51d0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d51cc:	f7ff fe00 	bl	d4dd0 <os_mutex_recursive_destroy>
    }
   d51d0:	4620      	mov	r0, r4
   d51d2:	bd10      	pop	{r4, pc}

000d51d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d51d4:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d51d6:	4c06      	ldr	r4, [pc, #24]	; (d51f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d51d8:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d51da:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d51dc:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d51de:	f7ff fdef 	bl	d4dc0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d51e2:	4620      	mov	r0, r4
   d51e4:	4a03      	ldr	r2, [pc, #12]	; (d51f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d51e6:	4904      	ldr	r1, [pc, #16]	; (d51f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d51e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d51ec:	f000 bca6 	b.w	d5b3c <__aeabi_atexit>
   d51f0:	2003e65c 	.word	0x2003e65c
   d51f4:	2003e4e8 	.word	0x2003e4e8
   d51f8:	000d51c5 	.word	0x000d51c5

000d51fc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d51fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d51fe:	4606      	mov	r6, r0
   d5200:	460d      	mov	r5, r1
  size_t n = 0;
   d5202:	188f      	adds	r7, r1, r2
   d5204:	2400      	movs	r4, #0
  while (size--) {
   d5206:	42bd      	cmp	r5, r7
   d5208:	d00c      	beq.n	d5224 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d520a:	6833      	ldr	r3, [r6, #0]
   d520c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5210:	689b      	ldr	r3, [r3, #8]
   d5212:	4630      	mov	r0, r6
   d5214:	4798      	blx	r3
     if (chunk>=0)
   d5216:	1e03      	subs	r3, r0, #0
   d5218:	db01      	blt.n	d521e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d521a:	441c      	add	r4, r3
  while (size--) {
   d521c:	e7f3      	b.n	d5206 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d521e:	2c00      	cmp	r4, #0
   d5220:	bf08      	it	eq
   d5222:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5224:	4620      	mov	r0, r4
   d5226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5228 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5228:	b513      	push	{r0, r1, r4, lr}
   d522a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d522c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d522e:	b159      	cbz	r1, d5248 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5230:	9101      	str	r1, [sp, #4]
   d5232:	f001 f963 	bl	d64fc <strlen>
   d5236:	6823      	ldr	r3, [r4, #0]
   d5238:	9901      	ldr	r1, [sp, #4]
   d523a:	68db      	ldr	r3, [r3, #12]
   d523c:	4602      	mov	r2, r0
   d523e:	4620      	mov	r0, r4
    }
   d5240:	b002      	add	sp, #8
   d5242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5246:	4718      	bx	r3
    }
   d5248:	b002      	add	sp, #8
   d524a:	bd10      	pop	{r4, pc}

000d524c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d524c:	b508      	push	{r3, lr}
  return write(str);
   d524e:	f7ff ffeb 	bl	d5228 <_ZN5Print5writeEPKc>
}
   d5252:	bd08      	pop	{r3, pc}

000d5254 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d5254:	6803      	ldr	r3, [r0, #0]
   d5256:	689b      	ldr	r3, [r3, #8]
   d5258:	4718      	bx	r3

000d525a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d525a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d525c:	210d      	movs	r1, #13
{
   d525e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5260:	f7ff fff8 	bl	d5254 <_ZN5Print5printEc>
  n += print('\n');
   d5264:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5266:	4604      	mov	r4, r0
  n += print('\n');
   d5268:	4628      	mov	r0, r5
   d526a:	f7ff fff3 	bl	d5254 <_ZN5Print5printEc>
  return n;
}
   d526e:	4420      	add	r0, r4
   d5270:	bd38      	pop	{r3, r4, r5, pc}

000d5272 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5272:	b538      	push	{r3, r4, r5, lr}
   d5274:	4605      	mov	r5, r0
  return write(str);
   d5276:	f7ff ffd7 	bl	d5228 <_ZN5Print5writeEPKc>
   d527a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d527c:	4628      	mov	r0, r5
   d527e:	f7ff ffec 	bl	d525a <_ZN5Print7printlnEv>
  return n;
}
   d5282:	4420      	add	r0, r4
   d5284:	bd38      	pop	{r3, r4, r5, pc}

000d5286 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5286:	b530      	push	{r4, r5, lr}
   d5288:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d528a:	2300      	movs	r3, #0
   d528c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5290:	2a01      	cmp	r2, #1
   d5292:	bf98      	it	ls
   d5294:	220a      	movls	r2, #10
   d5296:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5298:	460d      	mov	r5, r1
   d529a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d529e:	fb01 5312 	mls	r3, r1, r2, r5
   d52a2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d52a6:	2b09      	cmp	r3, #9
   d52a8:	bf94      	ite	ls
   d52aa:	3330      	addls	r3, #48	; 0x30
   d52ac:	3337      	addhi	r3, #55	; 0x37
   d52ae:	b2db      	uxtb	r3, r3
  } while(n);
   d52b0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d52b2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d52b6:	d9ef      	bls.n	d5298 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d52b8:	4621      	mov	r1, r4
   d52ba:	f7ff ffb5 	bl	d5228 <_ZN5Print5writeEPKc>
}
   d52be:	b00b      	add	sp, #44	; 0x2c
   d52c0:	bd30      	pop	{r4, r5, pc}
	...

000d52c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d52c4:	4b01      	ldr	r3, [pc, #4]	; (d52cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d52c6:	4a02      	ldr	r2, [pc, #8]	; (d52d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d52c8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d52ca:	4770      	bx	lr
   d52cc:	2003e660 	.word	0x2003e660
   d52d0:	000d65cc 	.word	0x000d65cc

000d52d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d52d4:	4b02      	ldr	r3, [pc, #8]	; (d52e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d52d6:	681a      	ldr	r2, [r3, #0]
   d52d8:	4b02      	ldr	r3, [pc, #8]	; (d52e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d52da:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d52dc:	4770      	bx	lr
   d52de:	bf00      	nop
   d52e0:	2003e47c 	.word	0x2003e47c
   d52e4:	2003e664 	.word	0x2003e664

000d52e8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d52e8:	2100      	movs	r1, #0
   d52ea:	f7ff be59 	b.w	d4fa0 <system_delay_ms>

000d52ee <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d52ee:	b510      	push	{r4, lr}
      if (_M_manager)
   d52f0:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d52f2:	4604      	mov	r4, r0
      if (_M_manager)
   d52f4:	b113      	cbz	r3, d52fc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d52f6:	2203      	movs	r2, #3
   d52f8:	4601      	mov	r1, r0
   d52fa:	4798      	blx	r3
    }
   d52fc:	4620      	mov	r0, r4
   d52fe:	bd10      	pop	{r4, pc}

000d5300 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5300:	b510      	push	{r4, lr}
   d5302:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d5304:	f7ff fff3 	bl	d52ee <_ZNSt14_Function_baseD1Ev>
   d5308:	4620      	mov	r0, r4
   d530a:	bd10      	pop	{r4, pc}

000d530c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d530c:	4803      	ldr	r0, [pc, #12]	; (d531c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d530e:	4a04      	ldr	r2, [pc, #16]	; (d5320 <_GLOBAL__sub_I_RGB+0x14>)
   d5310:	4904      	ldr	r1, [pc, #16]	; (d5324 <_GLOBAL__sub_I_RGB+0x18>)
   d5312:	2300      	movs	r3, #0
   d5314:	6083      	str	r3, [r0, #8]
   d5316:	f000 bc11 	b.w	d5b3c <__aeabi_atexit>
   d531a:	bf00      	nop
   d531c:	2003e668 	.word	0x2003e668
   d5320:	2003e4e8 	.word	0x2003e4e8
   d5324:	000d5301 	.word	0x000d5301

000d5328 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5328:	4b01      	ldr	r3, [pc, #4]	; (d5330 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d532a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d532c:	4770      	bx	lr
   d532e:	bf00      	nop
   d5330:	2003e484 	.word	0x2003e484

000d5334 <serialEventRun>:
{
   d5334:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5336:	4b0b      	ldr	r3, [pc, #44]	; (d5364 <serialEventRun+0x30>)
   d5338:	b143      	cbz	r3, d534c <serialEventRun+0x18>
   d533a:	f000 f955 	bl	d55e8 <_Z16_fetch_usbserialv>
   d533e:	6803      	ldr	r3, [r0, #0]
   d5340:	691b      	ldr	r3, [r3, #16]
   d5342:	4798      	blx	r3
   d5344:	2800      	cmp	r0, #0
   d5346:	dd01      	ble.n	d534c <serialEventRun+0x18>
        serialEvent();
   d5348:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d534c:	4b06      	ldr	r3, [pc, #24]	; (d5368 <serialEventRun+0x34>)
   d534e:	b143      	cbz	r3, d5362 <serialEventRun+0x2e>
   d5350:	f000 f9f8 	bl	d5744 <_Z22__fetch_global_Serial1v>
   d5354:	6803      	ldr	r3, [r0, #0]
   d5356:	691b      	ldr	r3, [r3, #16]
   d5358:	4798      	blx	r3
   d535a:	2800      	cmp	r0, #0
   d535c:	dd01      	ble.n	d5362 <serialEventRun+0x2e>
        serialEvent1();
   d535e:	f3af 8000 	nop.w
}
   d5362:	bd08      	pop	{r3, pc}
	...

000d536c <_post_loop>:
{
   d536c:	b508      	push	{r3, lr}
	serialEventRun();
   d536e:	f7ff ffe1 	bl	d5334 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5372:	f7ff fce5 	bl	d4d40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5376:	4b01      	ldr	r3, [pc, #4]	; (d537c <_post_loop+0x10>)
   d5378:	6018      	str	r0, [r3, #0]
}
   d537a:	bd08      	pop	{r3, pc}
   d537c:	2003e7d4 	.word	0x2003e7d4

000d5380 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5380:	4802      	ldr	r0, [pc, #8]	; (d538c <_Z33system_initialize_user_backup_ramv+0xc>)
   d5382:	4a03      	ldr	r2, [pc, #12]	; (d5390 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5384:	4903      	ldr	r1, [pc, #12]	; (d5394 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5386:	1a12      	subs	r2, r2, r0
   d5388:	f001 b84a 	b.w	d6420 <memcpy>
   d538c:	2003f400 	.word	0x2003f400
   d5390:	2003f404 	.word	0x2003f404
   d5394:	000d6730 	.word	0x000d6730

000d5398 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5398:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d539a:	2300      	movs	r3, #0
   d539c:	9300      	str	r3, [sp, #0]
   d539e:	461a      	mov	r2, r3
   d53a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d53a4:	f7ff fe16 	bl	d4fd4 <system_ctrl_set_result>
}
   d53a8:	b003      	add	sp, #12
   d53aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d53b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d53b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d53b2:	8843      	ldrh	r3, [r0, #2]
   d53b4:	2b0a      	cmp	r3, #10
   d53b6:	d008      	beq.n	d53ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d53b8:	2b50      	cmp	r3, #80	; 0x50
   d53ba:	d10b      	bne.n	d53d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d53bc:	4b09      	ldr	r3, [pc, #36]	; (d53e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d53be:	681b      	ldr	r3, [r3, #0]
   d53c0:	b14b      	cbz	r3, d53d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d53c2:	b003      	add	sp, #12
   d53c4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d53c8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d53ca:	f7ff ffe5 	bl	d5398 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d53ce:	b003      	add	sp, #12
   d53d0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d53d4:	2300      	movs	r3, #0
   d53d6:	9300      	str	r3, [sp, #0]
   d53d8:	461a      	mov	r2, r3
   d53da:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d53de:	f7ff fdf9 	bl	d4fd4 <system_ctrl_set_result>
}
   d53e2:	e7f4      	b.n	d53ce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d53e4:	2003e67c 	.word	0x2003e67c

000d53e8 <module_user_init_hook>:
{
   d53e8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d53ea:	4c12      	ldr	r4, [pc, #72]	; (d5434 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d53ec:	4812      	ldr	r0, [pc, #72]	; (d5438 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d53ee:	4d13      	ldr	r5, [pc, #76]	; (d543c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d53f0:	2100      	movs	r1, #0
   d53f2:	f7ff fe79 	bl	d50e8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d53f6:	6823      	ldr	r3, [r4, #0]
   d53f8:	42ab      	cmp	r3, r5
   d53fa:	4b11      	ldr	r3, [pc, #68]	; (d5440 <module_user_init_hook+0x58>)
   d53fc:	bf0c      	ite	eq
   d53fe:	2201      	moveq	r2, #1
   d5400:	2200      	movne	r2, #0
   d5402:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5404:	d002      	beq.n	d540c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5406:	f7ff ffbb 	bl	d5380 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d540a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d540c:	f7ff fc80 	bl	d4d10 <HAL_RNG_GetRandomNumber>
   d5410:	4604      	mov	r4, r0
    srand(seed);
   d5412:	f001 f81b 	bl	d644c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5416:	4b0b      	ldr	r3, [pc, #44]	; (d5444 <module_user_init_hook+0x5c>)
   d5418:	b113      	cbz	r3, d5420 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d541a:	4620      	mov	r0, r4
   d541c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5420:	2100      	movs	r1, #0
   d5422:	4808      	ldr	r0, [pc, #32]	; (d5444 <module_user_init_hook+0x5c>)
   d5424:	f7ff fe40 	bl	d50a8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d542c:	4806      	ldr	r0, [pc, #24]	; (d5448 <module_user_init_hook+0x60>)
   d542e:	2100      	movs	r1, #0
   d5430:	f7ff bdc6 	b.w	d4fc0 <system_ctrl_set_app_request_handler>
   d5434:	2003f400 	.word	0x2003f400
   d5438:	000d5329 	.word	0x000d5329
   d543c:	9a271c1e 	.word	0x9a271c1e
   d5440:	2003e678 	.word	0x2003e678
   d5444:	00000000 	.word	0x00000000
   d5448:	000d53b1 	.word	0x000d53b1

000d544c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d544c:	4770      	bx	lr

000d544e <_ZN9IPAddressD0Ev>:
   d544e:	b510      	push	{r4, lr}
   d5450:	2118      	movs	r1, #24
   d5452:	4604      	mov	r4, r0
   d5454:	f000 fb77 	bl	d5b46 <_ZdlPvj>
   d5458:	4620      	mov	r0, r4
   d545a:	bd10      	pop	{r4, pc}

000d545c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d545c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d545e:	7d03      	ldrb	r3, [r0, #20]
   d5460:	2b06      	cmp	r3, #6
{
   d5462:	b08d      	sub	sp, #52	; 0x34
   d5464:	460e      	mov	r6, r1
   d5466:	f100 0704 	add.w	r7, r0, #4
   d546a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d546e:	d012      	beq.n	d5496 <_ZNK9IPAddress7printToER5Print+0x3a>
   d5470:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5474:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5478:	220a      	movs	r2, #10
   d547a:	4630      	mov	r0, r6
   d547c:	f7ff ff03 	bl	d5286 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5480:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5482:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5484:	d019      	beq.n	d54ba <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5486:	2c00      	cmp	r4, #0
   d5488:	d0f4      	beq.n	d5474 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d548a:	212e      	movs	r1, #46	; 0x2e
   d548c:	4630      	mov	r0, r6
   d548e:	f7ff fee1 	bl	d5254 <_ZN5Print5printEc>
   d5492:	4404      	add	r4, r0
   d5494:	e7ee      	b.n	d5474 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5496:	232f      	movs	r3, #47	; 0x2f
   d5498:	466a      	mov	r2, sp
   d549a:	4639      	mov	r1, r7
   d549c:	200a      	movs	r0, #10
		buf[0] = 0;
   d549e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d54a2:	f7ff fca5 	bl	d4df0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d54a6:	4668      	mov	r0, sp
   d54a8:	f001 f828 	bl	d64fc <strlen>
   d54ac:	6833      	ldr	r3, [r6, #0]
   d54ae:	4602      	mov	r2, r0
   d54b0:	68db      	ldr	r3, [r3, #12]
   d54b2:	4669      	mov	r1, sp
   d54b4:	4630      	mov	r0, r6
   d54b6:	4798      	blx	r3
   d54b8:	4604      	mov	r4, r0
    }
    return n;
}
   d54ba:	4620      	mov	r0, r4
   d54bc:	b00d      	add	sp, #52	; 0x34
   d54be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54c0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d54c0:	b510      	push	{r4, lr}
   d54c2:	4b05      	ldr	r3, [pc, #20]	; (d54d8 <_ZN9IPAddressC1Ev+0x18>)
   d54c4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d54c6:	2211      	movs	r2, #17
   d54c8:	f840 3b04 	str.w	r3, [r0], #4
   d54cc:	2100      	movs	r1, #0
   d54ce:	f000 ffb5 	bl	d643c <memset>
}
   d54d2:	4620      	mov	r0, r4
   d54d4:	bd10      	pop	{r4, pc}
   d54d6:	bf00      	nop
   d54d8:	000d65f4 	.word	0x000d65f4

000d54dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d54dc:	4603      	mov	r3, r0
   d54de:	4a07      	ldr	r2, [pc, #28]	; (d54fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d54e0:	b510      	push	{r4, lr}
   d54e2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d54e6:	f101 0210 	add.w	r2, r1, #16
   d54ea:	f851 4b04 	ldr.w	r4, [r1], #4
   d54ee:	f843 4b04 	str.w	r4, [r3], #4
   d54f2:	4291      	cmp	r1, r2
   d54f4:	d1f9      	bne.n	d54ea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d54f6:	780a      	ldrb	r2, [r1, #0]
   d54f8:	701a      	strb	r2, [r3, #0]
}
   d54fa:	bd10      	pop	{r4, pc}
   d54fc:	000d65f4 	.word	0x000d65f4

000d5500 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5500:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5502:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5506:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d550a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d550e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5512:	2304      	movs	r3, #4
   d5514:	6041      	str	r1, [r0, #4]
   d5516:	7503      	strb	r3, [r0, #20]
}
   d5518:	bd10      	pop	{r4, pc}

000d551a <_ZN9IPAddressaSEPKh>:
{
   d551a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d551c:	78cb      	ldrb	r3, [r1, #3]
   d551e:	9300      	str	r3, [sp, #0]
   d5520:	788b      	ldrb	r3, [r1, #2]
   d5522:	784a      	ldrb	r2, [r1, #1]
   d5524:	7809      	ldrb	r1, [r1, #0]
   d5526:	f7ff ffeb 	bl	d5500 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d552a:	b002      	add	sp, #8
   d552c:	bd10      	pop	{r4, pc}

000d552e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d552e:	7441      	strb	r1, [r0, #17]
}
   d5530:	4770      	bx	lr

000d5532 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5532:	4770      	bx	lr

000d5534 <_ZN9USBSerial4readEv>:
{
   d5534:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5536:	2100      	movs	r1, #0
   d5538:	7c00      	ldrb	r0, [r0, #16]
   d553a:	f7ff fd09 	bl	d4f50 <HAL_USB_USART_Receive_Data>
}
   d553e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5542:	bd08      	pop	{r3, pc}

000d5544 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5544:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5546:	2101      	movs	r1, #1
   d5548:	7c00      	ldrb	r0, [r0, #16]
   d554a:	f7ff fd01 	bl	d4f50 <HAL_USB_USART_Receive_Data>
}
   d554e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5552:	bd08      	pop	{r3, pc}

000d5554 <_ZN9USBSerial17availableForWriteEv>:
{
   d5554:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5556:	7c00      	ldrb	r0, [r0, #16]
   d5558:	f7ff fcf2 	bl	d4f40 <HAL_USB_USART_Available_Data_For_Write>
}
   d555c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5560:	bd08      	pop	{r3, pc}

000d5562 <_ZN9USBSerial9availableEv>:
{
   d5562:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5564:	7c00      	ldrb	r0, [r0, #16]
   d5566:	f7ff fce3 	bl	d4f30 <HAL_USB_USART_Available_Data>
}
   d556a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d556e:	bd08      	pop	{r3, pc}

000d5570 <_ZN9USBSerial5writeEh>:
{
   d5570:	b513      	push	{r0, r1, r4, lr}
   d5572:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5574:	7c00      	ldrb	r0, [r0, #16]
{
   d5576:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5578:	f7ff fce2 	bl	d4f40 <HAL_USB_USART_Available_Data_For_Write>
   d557c:	2800      	cmp	r0, #0
   d557e:	9901      	ldr	r1, [sp, #4]
   d5580:	dc01      	bgt.n	d5586 <_ZN9USBSerial5writeEh+0x16>
   d5582:	7c60      	ldrb	r0, [r4, #17]
   d5584:	b120      	cbz	r0, d5590 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5586:	7c20      	ldrb	r0, [r4, #16]
   d5588:	f7ff fcea 	bl	d4f60 <HAL_USB_USART_Send_Data>
   d558c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5590:	b002      	add	sp, #8
   d5592:	bd10      	pop	{r4, pc}

000d5594 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5594:	7c00      	ldrb	r0, [r0, #16]
   d5596:	f7ff bceb 	b.w	d4f70 <HAL_USB_USART_Flush_Data>

000d559a <_ZN9USBSerialD0Ev>:
   d559a:	b510      	push	{r4, lr}
   d559c:	2114      	movs	r1, #20
   d559e:	4604      	mov	r4, r0
   d55a0:	f000 fad1 	bl	d5b46 <_ZdlPvj>
   d55a4:	4620      	mov	r0, r4
   d55a6:	bd10      	pop	{r4, pc}

000d55a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d55a8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d55aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55ae:	4604      	mov	r4, r0
   d55b0:	4608      	mov	r0, r1
   d55b2:	2100      	movs	r1, #0
   d55b4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d55b8:	4b04      	ldr	r3, [pc, #16]	; (d55cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d55ba:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d55bc:	2301      	movs	r3, #1
  _serial = serial;
   d55be:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d55c0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d55c2:	4611      	mov	r1, r2
   d55c4:	f7ff fca4 	bl	d4f10 <HAL_USB_USART_Init>
}
   d55c8:	4620      	mov	r0, r4
   d55ca:	bd10      	pop	{r4, pc}
   d55cc:	000d6608 	.word	0x000d6608

000d55d0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d55d0:	7c00      	ldrb	r0, [r0, #16]
   d55d2:	2200      	movs	r2, #0
   d55d4:	f7ff bca4 	b.w	d4f20 <HAL_USB_USART_Begin>

000d55d8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d55d8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d55da:	2214      	movs	r2, #20
{
   d55dc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d55de:	2100      	movs	r1, #0
   d55e0:	f000 ff2c 	bl	d643c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d55e4:	4620      	mov	r0, r4
   d55e6:	bd10      	pop	{r4, pc}

000d55e8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d55e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55ea:	4c10      	ldr	r4, [pc, #64]	; (d562c <_Z16_fetch_usbserialv+0x44>)
{
   d55ec:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d55ee:	a803      	add	r0, sp, #12
   d55f0:	f7ff fff2 	bl	d55d8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55f4:	7821      	ldrb	r1, [r4, #0]
   d55f6:	f3bf 8f5b 	dmb	ish
   d55fa:	f011 0101 	ands.w	r1, r1, #1
   d55fe:	d111      	bne.n	d5624 <_Z16_fetch_usbserialv+0x3c>
   d5600:	4620      	mov	r0, r4
   d5602:	9101      	str	r1, [sp, #4]
   d5604:	f7fe fd4b 	bl	d409e <__cxa_guard_acquire>
   d5608:	9901      	ldr	r1, [sp, #4]
   d560a:	b158      	cbz	r0, d5624 <_Z16_fetch_usbserialv+0x3c>
   d560c:	aa03      	add	r2, sp, #12
   d560e:	4808      	ldr	r0, [pc, #32]	; (d5630 <_Z16_fetch_usbserialv+0x48>)
   d5610:	f7ff ffca 	bl	d55a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5614:	4620      	mov	r0, r4
   d5616:	f7fe fd47 	bl	d40a8 <__cxa_guard_release>
   d561a:	4a06      	ldr	r2, [pc, #24]	; (d5634 <_Z16_fetch_usbserialv+0x4c>)
   d561c:	4906      	ldr	r1, [pc, #24]	; (d5638 <_Z16_fetch_usbserialv+0x50>)
   d561e:	4804      	ldr	r0, [pc, #16]	; (d5630 <_Z16_fetch_usbserialv+0x48>)
   d5620:	f000 fa8c 	bl	d5b3c <__aeabi_atexit>
	return _usbserial;
}
   d5624:	4802      	ldr	r0, [pc, #8]	; (d5630 <_Z16_fetch_usbserialv+0x48>)
   d5626:	b008      	add	sp, #32
   d5628:	bd10      	pop	{r4, pc}
   d562a:	bf00      	nop
   d562c:	2003e680 	.word	0x2003e680
   d5630:	2003e684 	.word	0x2003e684
   d5634:	2003e4e8 	.word	0x2003e4e8
   d5638:	000d5533 	.word	0x000d5533

000d563c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d563c:	4700      	bx	r0
	...

000d5640 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d5640:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d5644:	2400      	movs	r4, #0
{
   d5646:	461d      	mov	r5, r3
   d5648:	460f      	mov	r7, r1
   d564a:	4690      	mov	r8, r2
   d564c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d564e:	f7ff fb47 	bl	d4ce0 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d5652:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5654:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d5658:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d565c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d5660:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d5664:	bfa2      	ittt	ge
   d5666:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d566a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d566e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5670:	4907      	ldr	r1, [pc, #28]	; (d5690 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d5672:	9400      	str	r4, [sp, #0]
   d5674:	4643      	mov	r3, r8
   d5676:	463a      	mov	r2, r7
   d5678:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d567a:	bfa8      	it	ge
   d567c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5680:	f7ff fb26 	bl	d4cd0 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d5684:	fab0 f080 	clz	r0, r0
   d5688:	0940      	lsrs	r0, r0, #5
   d568a:	b004      	add	sp, #16
   d568c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5690:	000d563d 	.word	0x000d563d

000d5694 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5694:	f7ff bb34 	b.w	d4d00 <HAL_Interrupts_Disable_All>

000d5698 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5698:	f7ff bb2a 	b.w	d4cf0 <HAL_Interrupts_Enable_All>

000d569c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d569c:	4770      	bx	lr

000d569e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d569e:	7441      	strb	r1, [r0, #17]
}
   d56a0:	4770      	bx	lr

000d56a2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d56a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d56a4:	7c00      	ldrb	r0, [r0, #16]
   d56a6:	f7ff fbe3 	bl	d4e70 <hal_usart_available_data_for_write>
}
   d56aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56ae:	bd08      	pop	{r3, pc}

000d56b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d56b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d56b2:	7c00      	ldrb	r0, [r0, #16]
   d56b4:	f7ff fbb4 	bl	d4e20 <hal_usart_available>
}
   d56b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56bc:	bd08      	pop	{r3, pc}

000d56be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d56be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d56c0:	7c00      	ldrb	r0, [r0, #16]
   d56c2:	f7ff fbbd 	bl	d4e40 <hal_usart_peek>
}
   d56c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d56ca:	bd08      	pop	{r3, pc}

000d56cc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d56cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d56ce:	7c00      	ldrb	r0, [r0, #16]
   d56d0:	f7ff fbae 	bl	d4e30 <hal_usart_read>
}
   d56d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d56d8:	bd08      	pop	{r3, pc}

000d56da <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d56da:	7c00      	ldrb	r0, [r0, #16]
   d56dc:	f7ff bbb8 	b.w	d4e50 <hal_usart_flush>

000d56e0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d56e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d56e2:	7c45      	ldrb	r5, [r0, #17]
{
   d56e4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d56e6:	b12d      	cbz	r5, d56f4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d56e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d56ea:	b003      	add	sp, #12
   d56ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d56f0:	f7ff bb8e 	b.w	d4e10 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d56f4:	7c00      	ldrb	r0, [r0, #16]
   d56f6:	9101      	str	r1, [sp, #4]
   d56f8:	f7ff fbba 	bl	d4e70 <hal_usart_available_data_for_write>
   d56fc:	2800      	cmp	r0, #0
   d56fe:	9901      	ldr	r1, [sp, #4]
   d5700:	dcf2      	bgt.n	d56e8 <_ZN11USARTSerial5writeEh+0x8>
}
   d5702:	4628      	mov	r0, r5
   d5704:	b003      	add	sp, #12
   d5706:	bd30      	pop	{r4, r5, pc}

000d5708 <_ZN11USARTSerialD0Ev>:
   d5708:	b510      	push	{r4, lr}
   d570a:	2114      	movs	r1, #20
   d570c:	4604      	mov	r4, r0
   d570e:	f000 fa1a 	bl	d5b46 <_ZdlPvj>
   d5712:	4620      	mov	r0, r4
   d5714:	bd10      	pop	{r4, pc}
	...

000d5718 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5718:	b510      	push	{r4, lr}
   d571a:	f04f 0c00 	mov.w	ip, #0
   d571e:	4604      	mov	r4, r0
   d5720:	4608      	mov	r0, r1
   d5722:	4611      	mov	r1, r2
   d5724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5728:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d572c:	4a04      	ldr	r2, [pc, #16]	; (d5740 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d572e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5730:	2201      	movs	r2, #1
  _serial = serial;
   d5732:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5734:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5736:	461a      	mov	r2, r3
   d5738:	f7ff fb62 	bl	d4e00 <hal_usart_init>
}
   d573c:	4620      	mov	r0, r4
   d573e:	bd10      	pop	{r4, pc}
   d5740:	000d6638 	.word	0x000d6638

000d5744 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5744:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5746:	4c0e      	ldr	r4, [pc, #56]	; (d5780 <_Z22__fetch_global_Serial1v+0x3c>)
   d5748:	7821      	ldrb	r1, [r4, #0]
   d574a:	f3bf 8f5b 	dmb	ish
   d574e:	f011 0101 	ands.w	r1, r1, #1
   d5752:	d112      	bne.n	d577a <_Z22__fetch_global_Serial1v+0x36>
   d5754:	4620      	mov	r0, r4
   d5756:	9101      	str	r1, [sp, #4]
   d5758:	f7fe fca1 	bl	d409e <__cxa_guard_acquire>
   d575c:	9901      	ldr	r1, [sp, #4]
   d575e:	b160      	cbz	r0, d577a <_Z22__fetch_global_Serial1v+0x36>
   d5760:	4a08      	ldr	r2, [pc, #32]	; (d5784 <_Z22__fetch_global_Serial1v+0x40>)
   d5762:	4b09      	ldr	r3, [pc, #36]	; (d5788 <_Z22__fetch_global_Serial1v+0x44>)
   d5764:	4809      	ldr	r0, [pc, #36]	; (d578c <_Z22__fetch_global_Serial1v+0x48>)
   d5766:	f7ff ffd7 	bl	d5718 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d576a:	4620      	mov	r0, r4
   d576c:	f7fe fc9c 	bl	d40a8 <__cxa_guard_release>
   d5770:	4a07      	ldr	r2, [pc, #28]	; (d5790 <_Z22__fetch_global_Serial1v+0x4c>)
   d5772:	4908      	ldr	r1, [pc, #32]	; (d5794 <_Z22__fetch_global_Serial1v+0x50>)
   d5774:	4805      	ldr	r0, [pc, #20]	; (d578c <_Z22__fetch_global_Serial1v+0x48>)
   d5776:	f000 f9e1 	bl	d5b3c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d577a:	4804      	ldr	r0, [pc, #16]	; (d578c <_Z22__fetch_global_Serial1v+0x48>)
   d577c:	b002      	add	sp, #8
   d577e:	bd10      	pop	{r4, pc}
   d5780:	2003e698 	.word	0x2003e698
   d5784:	2003e69c 	.word	0x2003e69c
   d5788:	2003e720 	.word	0x2003e720
   d578c:	2003e7a4 	.word	0x2003e7a4
   d5790:	2003e4e8 	.word	0x2003e4e8
   d5794:	000d569d 	.word	0x000d569d

000d5798 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5798:	4770      	bx	lr

000d579a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d579a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d579c:	4606      	mov	r6, r0
   d579e:	4615      	mov	r5, r2
   d57a0:	460c      	mov	r4, r1
   d57a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d57a4:	42bc      	cmp	r4, r7
   d57a6:	d006      	beq.n	d57b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d57a8:	6833      	ldr	r3, [r6, #0]
   d57aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d57ae:	689b      	ldr	r3, [r3, #8]
   d57b0:	4630      	mov	r0, r6
   d57b2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d57b4:	e7f6      	b.n	d57a4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d57b6:	4628      	mov	r0, r5
   d57b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57ba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d57ba:	7c00      	ldrb	r0, [r0, #16]
   d57bc:	2200      	movs	r2, #0
   d57be:	f7ff bb5f 	b.w	d4e80 <hal_i2c_write>

000d57c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d57c2:	7c00      	ldrb	r0, [r0, #16]
   d57c4:	2100      	movs	r1, #0
   d57c6:	f7ff bb63 	b.w	d4e90 <hal_i2c_available>

000d57ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d57ca:	7c00      	ldrb	r0, [r0, #16]
   d57cc:	2100      	movs	r1, #0
   d57ce:	f7ff bb67 	b.w	d4ea0 <hal_i2c_read>

000d57d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d57d2:	7c00      	ldrb	r0, [r0, #16]
   d57d4:	2100      	movs	r1, #0
   d57d6:	f7ff bb6b 	b.w	d4eb0 <hal_i2c_peek>

000d57da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d57da:	7c00      	ldrb	r0, [r0, #16]
   d57dc:	2100      	movs	r1, #0
   d57de:	f7ff bb6f 	b.w	d4ec0 <hal_i2c_flush>

000d57e2 <_ZN7TwoWireD0Ev>:
   d57e2:	b510      	push	{r4, lr}
   d57e4:	2114      	movs	r1, #20
   d57e6:	4604      	mov	r4, r0
   d57e8:	f000 f9ad 	bl	d5b46 <_ZdlPvj>
   d57ec:	4620      	mov	r0, r4
   d57ee:	bd10      	pop	{r4, pc}

000d57f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d57f0:	b510      	push	{r4, lr}
   d57f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57f6:	4604      	mov	r4, r0
   d57f8:	4608      	mov	r0, r1
   d57fa:	2100      	movs	r1, #0
   d57fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5800:	4b03      	ldr	r3, [pc, #12]	; (d5810 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5802:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5804:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5806:	4611      	mov	r1, r2
   d5808:	f7ff fb6a 	bl	d4ee0 <hal_i2c_init>
}
   d580c:	4620      	mov	r0, r4
   d580e:	bd10      	pop	{r4, pc}
   d5810:	000d6668 	.word	0x000d6668

000d5814 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d5814:	b510      	push	{r4, lr}
  if (0 == max) {
   d5816:	4604      	mov	r4, r0
   d5818:	b128      	cbz	r0, d5826 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d581a:	f000 fe3b 	bl	d6494 <rand>
   d581e:	fb90 f3f4 	sdiv	r3, r0, r4
   d5822:	fb03 0414 	mls	r4, r3, r4, r0
}
   d5826:	4620      	mov	r0, r4
   d5828:	bd10      	pop	{r4, pc}

000d582a <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d582a:	4288      	cmp	r0, r1
{
   d582c:	b510      	push	{r4, lr}
   d582e:	4604      	mov	r4, r0
  if (min >= max) {
   d5830:	da03      	bge.n	d583a <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d5832:	1a08      	subs	r0, r1, r0
   d5834:	f7ff ffee 	bl	d5814 <_Z6randomi>
   d5838:	4404      	add	r4, r0
}
   d583a:	4620      	mov	r0, r4
   d583c:	bd10      	pop	{r4, pc}

000d583e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d583e:	2200      	movs	r2, #0
   d5840:	6840      	ldr	r0, [r0, #4]
   d5842:	4611      	mov	r1, r2
   d5844:	f7ff bbe8 	b.w	d5018 <network_ready>

000d5848 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5848:	2200      	movs	r2, #0
   d584a:	6840      	ldr	r0, [r0, #4]
   d584c:	4611      	mov	r1, r2
   d584e:	f7ff bc03 	b.w	d5058 <network_listening>

000d5852 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5852:	2200      	movs	r2, #0
   d5854:	6840      	ldr	r0, [r0, #4]
   d5856:	4611      	mov	r1, r2
   d5858:	f7ff bc0e 	b.w	d5078 <network_get_listen_timeout>

000d585c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d585c:	6840      	ldr	r0, [r0, #4]
   d585e:	2200      	movs	r2, #0
   d5860:	f7ff bc02 	b.w	d5068 <network_set_listen_timeout>

000d5864 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5864:	6840      	ldr	r0, [r0, #4]
   d5866:	2200      	movs	r2, #0
   d5868:	f081 0101 	eor.w	r1, r1, #1
   d586c:	f7ff bbec 	b.w	d5048 <network_listen>

000d5870 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5870:	2300      	movs	r3, #0
   d5872:	6840      	ldr	r0, [r0, #4]
   d5874:	461a      	mov	r2, r3
   d5876:	4619      	mov	r1, r3
   d5878:	f7ff bbde 	b.w	d5038 <network_off>

000d587c <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d587c:	2300      	movs	r3, #0
   d587e:	6840      	ldr	r0, [r0, #4]
   d5880:	461a      	mov	r2, r3
   d5882:	4619      	mov	r1, r3
   d5884:	f7ff bbd0 	b.w	d5028 <network_on>

000d5888 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5888:	2200      	movs	r2, #0
   d588a:	6840      	ldr	r0, [r0, #4]
   d588c:	4611      	mov	r1, r2
   d588e:	f7ff bbb3 	b.w	d4ff8 <network_connecting>

000d5892 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5892:	6840      	ldr	r0, [r0, #4]
   d5894:	2200      	movs	r2, #0
   d5896:	2102      	movs	r1, #2
   d5898:	f7ff bbb6 	b.w	d5008 <network_disconnect>

000d589c <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d589c:	2300      	movs	r3, #0
   d589e:	6840      	ldr	r0, [r0, #4]
   d58a0:	461a      	mov	r2, r3
   d58a2:	f7ff bba1 	b.w	d4fe8 <network_connect>
	...

000d58a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d58a8:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d58aa:	2204      	movs	r2, #4
   d58ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d58ae:	4a02      	ldr	r2, [pc, #8]	; (d58b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d58b0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d58b2:	4770      	bx	lr
   d58b4:	2003e7b8 	.word	0x2003e7b8
   d58b8:	000d6690 	.word	0x000d6690

000d58bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d58bc:	2300      	movs	r3, #0
   d58be:	6840      	ldr	r0, [r0, #4]
   d58c0:	461a      	mov	r2, r3
   d58c2:	f7ff bb91 	b.w	d4fe8 <network_connect>

000d58c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d58c6:	6840      	ldr	r0, [r0, #4]
   d58c8:	2200      	movs	r2, #0
   d58ca:	2102      	movs	r1, #2
   d58cc:	f7ff bb9c 	b.w	d5008 <network_disconnect>

000d58d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d58d0:	2200      	movs	r2, #0
   d58d2:	6840      	ldr	r0, [r0, #4]
   d58d4:	4611      	mov	r1, r2
   d58d6:	f7ff bb8f 	b.w	d4ff8 <network_connecting>

000d58da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d58da:	2200      	movs	r2, #0
   d58dc:	6840      	ldr	r0, [r0, #4]
   d58de:	4611      	mov	r1, r2
   d58e0:	f7ff bb9a 	b.w	d5018 <network_ready>

000d58e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d58e4:	2300      	movs	r3, #0
   d58e6:	6840      	ldr	r0, [r0, #4]
   d58e8:	461a      	mov	r2, r3
   d58ea:	4619      	mov	r1, r3
   d58ec:	f7ff bb9c 	b.w	d5028 <network_on>

000d58f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d58f0:	2300      	movs	r3, #0
   d58f2:	6840      	ldr	r0, [r0, #4]
   d58f4:	461a      	mov	r2, r3
   d58f6:	4619      	mov	r1, r3
   d58f8:	f7ff bb9e 	b.w	d5038 <network_off>

000d58fc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d58fc:	6840      	ldr	r0, [r0, #4]
   d58fe:	2100      	movs	r1, #0
   d5900:	f7ff bbc2 	b.w	d5088 <network_is_on>

000d5904 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5904:	6840      	ldr	r0, [r0, #4]
   d5906:	2100      	movs	r1, #0
   d5908:	f7ff bbc6 	b.w	d5098 <network_is_off>

000d590c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d590c:	6840      	ldr	r0, [r0, #4]
   d590e:	2200      	movs	r2, #0
   d5910:	f081 0101 	eor.w	r1, r1, #1
   d5914:	f7ff bb98 	b.w	d5048 <network_listen>

000d5918 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5918:	6840      	ldr	r0, [r0, #4]
   d591a:	2200      	movs	r2, #0
   d591c:	f7ff bba4 	b.w	d5068 <network_set_listen_timeout>

000d5920 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5920:	2200      	movs	r2, #0
   d5922:	6840      	ldr	r0, [r0, #4]
   d5924:	4611      	mov	r1, r2
   d5926:	f7ff bba7 	b.w	d5078 <network_get_listen_timeout>

000d592a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d592a:	2200      	movs	r2, #0
   d592c:	6840      	ldr	r0, [r0, #4]
   d592e:	4611      	mov	r1, r2
   d5930:	f7ff bb92 	b.w	d5058 <network_listening>

000d5934 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5938:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d593a:	b095      	sub	sp, #84	; 0x54
   d593c:	4616      	mov	r6, r2
   d593e:	460d      	mov	r5, r1
   d5940:	4607      	mov	r7, r0
    IPAddress addr;
   d5942:	f7ff fdbd 	bl	d54c0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5946:	4621      	mov	r1, r4
   d5948:	2218      	movs	r2, #24
   d594a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d594c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d594e:	f000 fd75 	bl	d643c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5952:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5954:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5958:	4621      	mov	r1, r4
   d595a:	466b      	mov	r3, sp
   d595c:	aa0c      	add	r2, sp, #48	; 0x30
   d595e:	4630      	mov	r0, r6
   d5960:	f7ff f99e 	bl	d4ca0 <netdb_getaddrinfo>
    if (!r) {
   d5964:	4604      	mov	r4, r0
   d5966:	2800      	cmp	r0, #0
   d5968:	d146      	bne.n	d59f8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d596a:	4602      	mov	r2, r0
   d596c:	2101      	movs	r1, #1
   d596e:	6868      	ldr	r0, [r5, #4]
   d5970:	f7ff fb52 	bl	d5018 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5974:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5976:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5978:	4622      	mov	r2, r4
   d597a:	6868      	ldr	r0, [r5, #4]
   d597c:	f7ff fb4c 	bl	d5018 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5980:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5982:	4681      	mov	r9, r0
        bool ok = false;
   d5984:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5986:	2e00      	cmp	r6, #0
   d5988:	d036      	beq.n	d59f8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d598a:	2900      	cmp	r1, #0
   d598c:	d134      	bne.n	d59f8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d598e:	6873      	ldr	r3, [r6, #4]
   d5990:	2b02      	cmp	r3, #2
   d5992:	d003      	beq.n	d599c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5994:	2b0a      	cmp	r3, #10
   d5996:	d00b      	beq.n	d59b0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5998:	69f6      	ldr	r6, [r6, #28]
   d599a:	e7f4      	b.n	d5986 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d599c:	f1b8 0f00 	cmp.w	r8, #0
   d59a0:	d004      	beq.n	d59ac <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d59a2:	6971      	ldr	r1, [r6, #20]
   d59a4:	4638      	mov	r0, r7
   d59a6:	3104      	adds	r1, #4
   d59a8:	f7ff fdb7 	bl	d551a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d59ac:	4641      	mov	r1, r8
   d59ae:	e7f3      	b.n	d5998 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d59b0:	f1b9 0f00 	cmp.w	r9, #0
   d59b4:	d101      	bne.n	d59ba <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d59b6:	4649      	mov	r1, r9
   d59b8:	e7ee      	b.n	d5998 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d59ba:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d59bc:	2210      	movs	r2, #16
   d59be:	a801      	add	r0, sp, #4
   d59c0:	f000 fd3c 	bl	d643c <memset>
                    a.v = 6;
   d59c4:	2306      	movs	r3, #6
   d59c6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d59ca:	ad01      	add	r5, sp, #4
   d59cc:	f104 0308 	add.w	r3, r4, #8
   d59d0:	3418      	adds	r4, #24
   d59d2:	6818      	ldr	r0, [r3, #0]
   d59d4:	6859      	ldr	r1, [r3, #4]
   d59d6:	462a      	mov	r2, r5
   d59d8:	c203      	stmia	r2!, {r0, r1}
   d59da:	3308      	adds	r3, #8
   d59dc:	42a3      	cmp	r3, r4
   d59de:	4615      	mov	r5, r2
   d59e0:	d1f7      	bne.n	d59d2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d59e2:	a901      	add	r1, sp, #4
   d59e4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d59e6:	ad07      	add	r5, sp, #28
   d59e8:	f7ff fd78 	bl	d54dc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d59ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d59ee:	1d3c      	adds	r4, r7, #4
   d59f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59f2:	682b      	ldr	r3, [r5, #0]
   d59f4:	7023      	strb	r3, [r4, #0]
   d59f6:	e7de      	b.n	d59b6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d59f8:	9800      	ldr	r0, [sp, #0]
   d59fa:	f7ff f949 	bl	d4c90 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d59fe:	4638      	mov	r0, r7
   d5a00:	b015      	add	sp, #84	; 0x54
   d5a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5a08 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5a08:	4b02      	ldr	r3, [pc, #8]	; (d5a14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5a0a:	4a03      	ldr	r2, [pc, #12]	; (d5a18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5a0c:	601a      	str	r2, [r3, #0]
   d5a0e:	2200      	movs	r2, #0
   d5a10:	605a      	str	r2, [r3, #4]

} // spark
   d5a12:	4770      	bx	lr
   d5a14:	2003e7c0 	.word	0x2003e7c0
   d5a18:	000d66cc 	.word	0x000d66cc

000d5a1c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5a1c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5a1e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5a20:	d902      	bls.n	d5a28 <pinAvailable+0xc>
    return false;
   d5a22:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5a24:	b002      	add	sp, #8
   d5a26:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5a28:	f1a0 030b 	sub.w	r3, r0, #11
   d5a2c:	2b02      	cmp	r3, #2
   d5a2e:	d81a      	bhi.n	d5a66 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5a30:	4c17      	ldr	r4, [pc, #92]	; (d5a90 <pinAvailable+0x74>)
   d5a32:	7821      	ldrb	r1, [r4, #0]
   d5a34:	f3bf 8f5b 	dmb	ish
   d5a38:	f011 0101 	ands.w	r1, r1, #1
   d5a3c:	d10b      	bne.n	d5a56 <pinAvailable+0x3a>
   d5a3e:	4620      	mov	r0, r4
   d5a40:	9101      	str	r1, [sp, #4]
   d5a42:	f7fe fb2c 	bl	d409e <__cxa_guard_acquire>
   d5a46:	9901      	ldr	r1, [sp, #4]
   d5a48:	b128      	cbz	r0, d5a56 <pinAvailable+0x3a>
   d5a4a:	4812      	ldr	r0, [pc, #72]	; (d5a94 <pinAvailable+0x78>)
   d5a4c:	f7ff fb92 	bl	d5174 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5a50:	4620      	mov	r0, r4
   d5a52:	f7fe fb29 	bl	d40a8 <__cxa_guard_release>
   d5a56:	4b0f      	ldr	r3, [pc, #60]	; (d5a94 <pinAvailable+0x78>)
   d5a58:	7818      	ldrb	r0, [r3, #0]
   d5a5a:	f7ff fa51 	bl	d4f00 <hal_spi_is_enabled>
   d5a5e:	2800      	cmp	r0, #0
   d5a60:	d1df      	bne.n	d5a22 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5a62:	2001      	movs	r0, #1
   d5a64:	e7de      	b.n	d5a24 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5a66:	2801      	cmp	r0, #1
   d5a68:	d809      	bhi.n	d5a7e <pinAvailable+0x62>
   d5a6a:	f000 f83f 	bl	d5aec <_Z19__fetch_global_Wirev>
   d5a6e:	2100      	movs	r1, #0
   d5a70:	7c00      	ldrb	r0, [r0, #16]
   d5a72:	f7ff fa2d 	bl	d4ed0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5a76:	f080 0001 	eor.w	r0, r0, #1
   d5a7a:	b2c0      	uxtb	r0, r0
   d5a7c:	e7d2      	b.n	d5a24 <pinAvailable+0x8>
   d5a7e:	3809      	subs	r0, #9
   d5a80:	2801      	cmp	r0, #1
   d5a82:	d8ee      	bhi.n	d5a62 <pinAvailable+0x46>
   d5a84:	f7ff fe5e 	bl	d5744 <_Z22__fetch_global_Serial1v>
   d5a88:	7c00      	ldrb	r0, [r0, #16]
   d5a8a:	f7ff f9e9 	bl	d4e60 <hal_usart_is_enabled>
   d5a8e:	e7f2      	b.n	d5a76 <pinAvailable+0x5a>
   d5a90:	2003e7c8 	.word	0x2003e7c8
   d5a94:	2003e7cc 	.word	0x2003e7cc

000d5a98 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5a98:	2823      	cmp	r0, #35	; 0x23
{
   d5a9a:	b538      	push	{r3, r4, r5, lr}
   d5a9c:	4604      	mov	r4, r0
   d5a9e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5aa0:	d80a      	bhi.n	d5ab8 <pinMode+0x20>
   d5aa2:	29ff      	cmp	r1, #255	; 0xff
   d5aa4:	d008      	beq.n	d5ab8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5aa6:	f7ff ffb9 	bl	d5a1c <pinAvailable>
   d5aaa:	b128      	cbz	r0, d5ab8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5aac:	4629      	mov	r1, r5
   d5aae:	4620      	mov	r0, r4
}
   d5ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5ab4:	f7ff b904 	b.w	d4cc0 <HAL_Pin_Mode>
}
   d5ab8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5abc <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5abc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5abe:	2300      	movs	r3, #0
   d5ac0:	2520      	movs	r5, #32
   d5ac2:	8043      	strh	r3, [r0, #2]
   d5ac4:	2314      	movs	r3, #20
{
   d5ac6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5ac8:	8003      	strh	r3, [r0, #0]
   d5aca:	6085      	str	r5, [r0, #8]
   d5acc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5ace:	4906      	ldr	r1, [pc, #24]	; (d5ae8 <_Z17acquireWireBufferv+0x2c>)
   d5ad0:	4628      	mov	r0, r5
   d5ad2:	f000 f83c 	bl	d5b4e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5ad6:	4904      	ldr	r1, [pc, #16]	; (d5ae8 <_Z17acquireWireBufferv+0x2c>)
	};
   d5ad8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5ada:	4628      	mov	r0, r5
   d5adc:	f000 f837 	bl	d5b4e <_ZnajRKSt9nothrow_t>
	};
   d5ae0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5ae2:	4620      	mov	r0, r4
   d5ae4:	bd38      	pop	{r3, r4, r5, pc}
   d5ae6:	bf00      	nop
   d5ae8:	000d6700 	.word	0x000d6700

000d5aec <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5aec:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5aee:	4d0f      	ldr	r5, [pc, #60]	; (d5b2c <_Z19__fetch_global_Wirev+0x40>)
   d5af0:	7829      	ldrb	r1, [r5, #0]
   d5af2:	f3bf 8f5b 	dmb	ish
   d5af6:	f011 0401 	ands.w	r4, r1, #1
{
   d5afa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5afc:	d113      	bne.n	d5b26 <_Z19__fetch_global_Wirev+0x3a>
   d5afe:	4628      	mov	r0, r5
   d5b00:	f7fe facd 	bl	d409e <__cxa_guard_acquire>
   d5b04:	b178      	cbz	r0, d5b26 <_Z19__fetch_global_Wirev+0x3a>
   d5b06:	a801      	add	r0, sp, #4
   d5b08:	f7ff ffd8 	bl	d5abc <_Z17acquireWireBufferv>
   d5b0c:	aa01      	add	r2, sp, #4
   d5b0e:	4621      	mov	r1, r4
   d5b10:	4807      	ldr	r0, [pc, #28]	; (d5b30 <_Z19__fetch_global_Wirev+0x44>)
   d5b12:	f7ff fe6d 	bl	d57f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5b16:	4628      	mov	r0, r5
   d5b18:	f7fe fac6 	bl	d40a8 <__cxa_guard_release>
   d5b1c:	4a05      	ldr	r2, [pc, #20]	; (d5b34 <_Z19__fetch_global_Wirev+0x48>)
   d5b1e:	4906      	ldr	r1, [pc, #24]	; (d5b38 <_Z19__fetch_global_Wirev+0x4c>)
   d5b20:	4803      	ldr	r0, [pc, #12]	; (d5b30 <_Z19__fetch_global_Wirev+0x44>)
   d5b22:	f000 f80b 	bl	d5b3c <__aeabi_atexit>
	return wire;
}
   d5b26:	4802      	ldr	r0, [pc, #8]	; (d5b30 <_Z19__fetch_global_Wirev+0x44>)
   d5b28:	b007      	add	sp, #28
   d5b2a:	bd30      	pop	{r4, r5, pc}
   d5b2c:	2003e7d8 	.word	0x2003e7d8
   d5b30:	2003e7dc 	.word	0x2003e7dc
   d5b34:	2003e4e8 	.word	0x2003e4e8
   d5b38:	000d5799 	.word	0x000d5799

000d5b3c <__aeabi_atexit>:
   d5b3c:	460b      	mov	r3, r1
   d5b3e:	4601      	mov	r1, r0
   d5b40:	4618      	mov	r0, r3
   d5b42:	f000 bc5f 	b.w	d6404 <__cxa_atexit>

000d5b46 <_ZdlPvj>:
   d5b46:	f7fe baa8 	b.w	d409a <_ZdlPv>

000d5b4a <_ZnwjRKSt9nothrow_t>:
   d5b4a:	f7fe baa2 	b.w	d4092 <_Znwj>

000d5b4e <_ZnajRKSt9nothrow_t>:
   d5b4e:	f7fe baa2 	b.w	d4096 <_Znaj>

000d5b52 <_ZSt25__throw_bad_function_callv>:
   d5b52:	b508      	push	{r3, lr}
   d5b54:	f7ff fac0 	bl	d50d8 <abort>

000d5b58 <__aeabi_drsub>:
   d5b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5b5c:	e002      	b.n	d5b64 <__adddf3>
   d5b5e:	bf00      	nop

000d5b60 <__aeabi_dsub>:
   d5b60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5b64 <__adddf3>:
   d5b64:	b530      	push	{r4, r5, lr}
   d5b66:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5b6a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5b6e:	ea94 0f05 	teq	r4, r5
   d5b72:	bf08      	it	eq
   d5b74:	ea90 0f02 	teqeq	r0, r2
   d5b78:	bf1f      	itttt	ne
   d5b7a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5b7e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5b82:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5b86:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5b8a:	f000 80e2 	beq.w	d5d52 <__adddf3+0x1ee>
   d5b8e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5b92:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5b96:	bfb8      	it	lt
   d5b98:	426d      	neglt	r5, r5
   d5b9a:	dd0c      	ble.n	d5bb6 <__adddf3+0x52>
   d5b9c:	442c      	add	r4, r5
   d5b9e:	ea80 0202 	eor.w	r2, r0, r2
   d5ba2:	ea81 0303 	eor.w	r3, r1, r3
   d5ba6:	ea82 0000 	eor.w	r0, r2, r0
   d5baa:	ea83 0101 	eor.w	r1, r3, r1
   d5bae:	ea80 0202 	eor.w	r2, r0, r2
   d5bb2:	ea81 0303 	eor.w	r3, r1, r3
   d5bb6:	2d36      	cmp	r5, #54	; 0x36
   d5bb8:	bf88      	it	hi
   d5bba:	bd30      	pophi	{r4, r5, pc}
   d5bbc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5bc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5bc4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5bc8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5bcc:	d002      	beq.n	d5bd4 <__adddf3+0x70>
   d5bce:	4240      	negs	r0, r0
   d5bd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5bd4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5bd8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5bdc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5be0:	d002      	beq.n	d5be8 <__adddf3+0x84>
   d5be2:	4252      	negs	r2, r2
   d5be4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5be8:	ea94 0f05 	teq	r4, r5
   d5bec:	f000 80a7 	beq.w	d5d3e <__adddf3+0x1da>
   d5bf0:	f1a4 0401 	sub.w	r4, r4, #1
   d5bf4:	f1d5 0e20 	rsbs	lr, r5, #32
   d5bf8:	db0d      	blt.n	d5c16 <__adddf3+0xb2>
   d5bfa:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5bfe:	fa22 f205 	lsr.w	r2, r2, r5
   d5c02:	1880      	adds	r0, r0, r2
   d5c04:	f141 0100 	adc.w	r1, r1, #0
   d5c08:	fa03 f20e 	lsl.w	r2, r3, lr
   d5c0c:	1880      	adds	r0, r0, r2
   d5c0e:	fa43 f305 	asr.w	r3, r3, r5
   d5c12:	4159      	adcs	r1, r3
   d5c14:	e00e      	b.n	d5c34 <__adddf3+0xd0>
   d5c16:	f1a5 0520 	sub.w	r5, r5, #32
   d5c1a:	f10e 0e20 	add.w	lr, lr, #32
   d5c1e:	2a01      	cmp	r2, #1
   d5c20:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5c24:	bf28      	it	cs
   d5c26:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5c2a:	fa43 f305 	asr.w	r3, r3, r5
   d5c2e:	18c0      	adds	r0, r0, r3
   d5c30:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5c34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5c38:	d507      	bpl.n	d5c4a <__adddf3+0xe6>
   d5c3a:	f04f 0e00 	mov.w	lr, #0
   d5c3e:	f1dc 0c00 	rsbs	ip, ip, #0
   d5c42:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5c46:	eb6e 0101 	sbc.w	r1, lr, r1
   d5c4a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5c4e:	d31b      	bcc.n	d5c88 <__adddf3+0x124>
   d5c50:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5c54:	d30c      	bcc.n	d5c70 <__adddf3+0x10c>
   d5c56:	0849      	lsrs	r1, r1, #1
   d5c58:	ea5f 0030 	movs.w	r0, r0, rrx
   d5c5c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5c60:	f104 0401 	add.w	r4, r4, #1
   d5c64:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5c68:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5c6c:	f080 809a 	bcs.w	d5da4 <__adddf3+0x240>
   d5c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5c74:	bf08      	it	eq
   d5c76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5c7a:	f150 0000 	adcs.w	r0, r0, #0
   d5c7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5c82:	ea41 0105 	orr.w	r1, r1, r5
   d5c86:	bd30      	pop	{r4, r5, pc}
   d5c88:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5c8c:	4140      	adcs	r0, r0
   d5c8e:	eb41 0101 	adc.w	r1, r1, r1
   d5c92:	3c01      	subs	r4, #1
   d5c94:	bf28      	it	cs
   d5c96:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5c9a:	d2e9      	bcs.n	d5c70 <__adddf3+0x10c>
   d5c9c:	f091 0f00 	teq	r1, #0
   d5ca0:	bf04      	itt	eq
   d5ca2:	4601      	moveq	r1, r0
   d5ca4:	2000      	moveq	r0, #0
   d5ca6:	fab1 f381 	clz	r3, r1
   d5caa:	bf08      	it	eq
   d5cac:	3320      	addeq	r3, #32
   d5cae:	f1a3 030b 	sub.w	r3, r3, #11
   d5cb2:	f1b3 0220 	subs.w	r2, r3, #32
   d5cb6:	da0c      	bge.n	d5cd2 <__adddf3+0x16e>
   d5cb8:	320c      	adds	r2, #12
   d5cba:	dd08      	ble.n	d5cce <__adddf3+0x16a>
   d5cbc:	f102 0c14 	add.w	ip, r2, #20
   d5cc0:	f1c2 020c 	rsb	r2, r2, #12
   d5cc4:	fa01 f00c 	lsl.w	r0, r1, ip
   d5cc8:	fa21 f102 	lsr.w	r1, r1, r2
   d5ccc:	e00c      	b.n	d5ce8 <__adddf3+0x184>
   d5cce:	f102 0214 	add.w	r2, r2, #20
   d5cd2:	bfd8      	it	le
   d5cd4:	f1c2 0c20 	rsble	ip, r2, #32
   d5cd8:	fa01 f102 	lsl.w	r1, r1, r2
   d5cdc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5ce0:	bfdc      	itt	le
   d5ce2:	ea41 010c 	orrle.w	r1, r1, ip
   d5ce6:	4090      	lslle	r0, r2
   d5ce8:	1ae4      	subs	r4, r4, r3
   d5cea:	bfa2      	ittt	ge
   d5cec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5cf0:	4329      	orrge	r1, r5
   d5cf2:	bd30      	popge	{r4, r5, pc}
   d5cf4:	ea6f 0404 	mvn.w	r4, r4
   d5cf8:	3c1f      	subs	r4, #31
   d5cfa:	da1c      	bge.n	d5d36 <__adddf3+0x1d2>
   d5cfc:	340c      	adds	r4, #12
   d5cfe:	dc0e      	bgt.n	d5d1e <__adddf3+0x1ba>
   d5d00:	f104 0414 	add.w	r4, r4, #20
   d5d04:	f1c4 0220 	rsb	r2, r4, #32
   d5d08:	fa20 f004 	lsr.w	r0, r0, r4
   d5d0c:	fa01 f302 	lsl.w	r3, r1, r2
   d5d10:	ea40 0003 	orr.w	r0, r0, r3
   d5d14:	fa21 f304 	lsr.w	r3, r1, r4
   d5d18:	ea45 0103 	orr.w	r1, r5, r3
   d5d1c:	bd30      	pop	{r4, r5, pc}
   d5d1e:	f1c4 040c 	rsb	r4, r4, #12
   d5d22:	f1c4 0220 	rsb	r2, r4, #32
   d5d26:	fa20 f002 	lsr.w	r0, r0, r2
   d5d2a:	fa01 f304 	lsl.w	r3, r1, r4
   d5d2e:	ea40 0003 	orr.w	r0, r0, r3
   d5d32:	4629      	mov	r1, r5
   d5d34:	bd30      	pop	{r4, r5, pc}
   d5d36:	fa21 f004 	lsr.w	r0, r1, r4
   d5d3a:	4629      	mov	r1, r5
   d5d3c:	bd30      	pop	{r4, r5, pc}
   d5d3e:	f094 0f00 	teq	r4, #0
   d5d42:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5d46:	bf06      	itte	eq
   d5d48:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5d4c:	3401      	addeq	r4, #1
   d5d4e:	3d01      	subne	r5, #1
   d5d50:	e74e      	b.n	d5bf0 <__adddf3+0x8c>
   d5d52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5d56:	bf18      	it	ne
   d5d58:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5d5c:	d029      	beq.n	d5db2 <__adddf3+0x24e>
   d5d5e:	ea94 0f05 	teq	r4, r5
   d5d62:	bf08      	it	eq
   d5d64:	ea90 0f02 	teqeq	r0, r2
   d5d68:	d005      	beq.n	d5d76 <__adddf3+0x212>
   d5d6a:	ea54 0c00 	orrs.w	ip, r4, r0
   d5d6e:	bf04      	itt	eq
   d5d70:	4619      	moveq	r1, r3
   d5d72:	4610      	moveq	r0, r2
   d5d74:	bd30      	pop	{r4, r5, pc}
   d5d76:	ea91 0f03 	teq	r1, r3
   d5d7a:	bf1e      	ittt	ne
   d5d7c:	2100      	movne	r1, #0
   d5d7e:	2000      	movne	r0, #0
   d5d80:	bd30      	popne	{r4, r5, pc}
   d5d82:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5d86:	d105      	bne.n	d5d94 <__adddf3+0x230>
   d5d88:	0040      	lsls	r0, r0, #1
   d5d8a:	4149      	adcs	r1, r1
   d5d8c:	bf28      	it	cs
   d5d8e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5d92:	bd30      	pop	{r4, r5, pc}
   d5d94:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5d98:	bf3c      	itt	cc
   d5d9a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5d9e:	bd30      	popcc	{r4, r5, pc}
   d5da0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5da4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5da8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5dac:	f04f 0000 	mov.w	r0, #0
   d5db0:	bd30      	pop	{r4, r5, pc}
   d5db2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5db6:	bf1a      	itte	ne
   d5db8:	4619      	movne	r1, r3
   d5dba:	4610      	movne	r0, r2
   d5dbc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5dc0:	bf1c      	itt	ne
   d5dc2:	460b      	movne	r3, r1
   d5dc4:	4602      	movne	r2, r0
   d5dc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5dca:	bf06      	itte	eq
   d5dcc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5dd0:	ea91 0f03 	teqeq	r1, r3
   d5dd4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5dd8:	bd30      	pop	{r4, r5, pc}
   d5dda:	bf00      	nop

000d5ddc <__aeabi_ui2d>:
   d5ddc:	f090 0f00 	teq	r0, #0
   d5de0:	bf04      	itt	eq
   d5de2:	2100      	moveq	r1, #0
   d5de4:	4770      	bxeq	lr
   d5de6:	b530      	push	{r4, r5, lr}
   d5de8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5dec:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5df0:	f04f 0500 	mov.w	r5, #0
   d5df4:	f04f 0100 	mov.w	r1, #0
   d5df8:	e750      	b.n	d5c9c <__adddf3+0x138>
   d5dfa:	bf00      	nop

000d5dfc <__aeabi_i2d>:
   d5dfc:	f090 0f00 	teq	r0, #0
   d5e00:	bf04      	itt	eq
   d5e02:	2100      	moveq	r1, #0
   d5e04:	4770      	bxeq	lr
   d5e06:	b530      	push	{r4, r5, lr}
   d5e08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5e0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5e10:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5e14:	bf48      	it	mi
   d5e16:	4240      	negmi	r0, r0
   d5e18:	f04f 0100 	mov.w	r1, #0
   d5e1c:	e73e      	b.n	d5c9c <__adddf3+0x138>
   d5e1e:	bf00      	nop

000d5e20 <__aeabi_f2d>:
   d5e20:	0042      	lsls	r2, r0, #1
   d5e22:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5e26:	ea4f 0131 	mov.w	r1, r1, rrx
   d5e2a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5e2e:	bf1f      	itttt	ne
   d5e30:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5e34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5e38:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5e3c:	4770      	bxne	lr
   d5e3e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5e42:	bf08      	it	eq
   d5e44:	4770      	bxeq	lr
   d5e46:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5e4a:	bf04      	itt	eq
   d5e4c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5e50:	4770      	bxeq	lr
   d5e52:	b530      	push	{r4, r5, lr}
   d5e54:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5e58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5e60:	e71c      	b.n	d5c9c <__adddf3+0x138>
   d5e62:	bf00      	nop

000d5e64 <__aeabi_ul2d>:
   d5e64:	ea50 0201 	orrs.w	r2, r0, r1
   d5e68:	bf08      	it	eq
   d5e6a:	4770      	bxeq	lr
   d5e6c:	b530      	push	{r4, r5, lr}
   d5e6e:	f04f 0500 	mov.w	r5, #0
   d5e72:	e00a      	b.n	d5e8a <__aeabi_l2d+0x16>

000d5e74 <__aeabi_l2d>:
   d5e74:	ea50 0201 	orrs.w	r2, r0, r1
   d5e78:	bf08      	it	eq
   d5e7a:	4770      	bxeq	lr
   d5e7c:	b530      	push	{r4, r5, lr}
   d5e7e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5e82:	d502      	bpl.n	d5e8a <__aeabi_l2d+0x16>
   d5e84:	4240      	negs	r0, r0
   d5e86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5e8a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5e8e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5e92:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5e96:	f43f aed8 	beq.w	d5c4a <__adddf3+0xe6>
   d5e9a:	f04f 0203 	mov.w	r2, #3
   d5e9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ea2:	bf18      	it	ne
   d5ea4:	3203      	addne	r2, #3
   d5ea6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5eaa:	bf18      	it	ne
   d5eac:	3203      	addne	r2, #3
   d5eae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5eb2:	f1c2 0320 	rsb	r3, r2, #32
   d5eb6:	fa00 fc03 	lsl.w	ip, r0, r3
   d5eba:	fa20 f002 	lsr.w	r0, r0, r2
   d5ebe:	fa01 fe03 	lsl.w	lr, r1, r3
   d5ec2:	ea40 000e 	orr.w	r0, r0, lr
   d5ec6:	fa21 f102 	lsr.w	r1, r1, r2
   d5eca:	4414      	add	r4, r2
   d5ecc:	e6bd      	b.n	d5c4a <__adddf3+0xe6>
   d5ece:	bf00      	nop

000d5ed0 <__aeabi_dmul>:
   d5ed0:	b570      	push	{r4, r5, r6, lr}
   d5ed2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5ed6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5eda:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5ede:	bf1d      	ittte	ne
   d5ee0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5ee4:	ea94 0f0c 	teqne	r4, ip
   d5ee8:	ea95 0f0c 	teqne	r5, ip
   d5eec:	f000 f8de 	bleq	d60ac <__aeabi_dmul+0x1dc>
   d5ef0:	442c      	add	r4, r5
   d5ef2:	ea81 0603 	eor.w	r6, r1, r3
   d5ef6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5efa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5efe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5f02:	bf18      	it	ne
   d5f04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5f08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5f10:	d038      	beq.n	d5f84 <__aeabi_dmul+0xb4>
   d5f12:	fba0 ce02 	umull	ip, lr, r0, r2
   d5f16:	f04f 0500 	mov.w	r5, #0
   d5f1a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5f1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5f22:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5f26:	f04f 0600 	mov.w	r6, #0
   d5f2a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5f2e:	f09c 0f00 	teq	ip, #0
   d5f32:	bf18      	it	ne
   d5f34:	f04e 0e01 	orrne.w	lr, lr, #1
   d5f38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5f3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5f40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5f44:	d204      	bcs.n	d5f50 <__aeabi_dmul+0x80>
   d5f46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5f4a:	416d      	adcs	r5, r5
   d5f4c:	eb46 0606 	adc.w	r6, r6, r6
   d5f50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5f54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5f58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5f5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5f60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5f64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5f68:	bf88      	it	hi
   d5f6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5f6e:	d81e      	bhi.n	d5fae <__aeabi_dmul+0xde>
   d5f70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5f74:	bf08      	it	eq
   d5f76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5f7a:	f150 0000 	adcs.w	r0, r0, #0
   d5f7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5f82:	bd70      	pop	{r4, r5, r6, pc}
   d5f84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5f88:	ea46 0101 	orr.w	r1, r6, r1
   d5f8c:	ea40 0002 	orr.w	r0, r0, r2
   d5f90:	ea81 0103 	eor.w	r1, r1, r3
   d5f94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5f98:	bfc2      	ittt	gt
   d5f9a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5f9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5fa2:	bd70      	popgt	{r4, r5, r6, pc}
   d5fa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5fa8:	f04f 0e00 	mov.w	lr, #0
   d5fac:	3c01      	subs	r4, #1
   d5fae:	f300 80ab 	bgt.w	d6108 <__aeabi_dmul+0x238>
   d5fb2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5fb6:	bfde      	ittt	le
   d5fb8:	2000      	movle	r0, #0
   d5fba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5fbe:	bd70      	pople	{r4, r5, r6, pc}
   d5fc0:	f1c4 0400 	rsb	r4, r4, #0
   d5fc4:	3c20      	subs	r4, #32
   d5fc6:	da35      	bge.n	d6034 <__aeabi_dmul+0x164>
   d5fc8:	340c      	adds	r4, #12
   d5fca:	dc1b      	bgt.n	d6004 <__aeabi_dmul+0x134>
   d5fcc:	f104 0414 	add.w	r4, r4, #20
   d5fd0:	f1c4 0520 	rsb	r5, r4, #32
   d5fd4:	fa00 f305 	lsl.w	r3, r0, r5
   d5fd8:	fa20 f004 	lsr.w	r0, r0, r4
   d5fdc:	fa01 f205 	lsl.w	r2, r1, r5
   d5fe0:	ea40 0002 	orr.w	r0, r0, r2
   d5fe4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5fe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5fec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5ff0:	fa21 f604 	lsr.w	r6, r1, r4
   d5ff4:	eb42 0106 	adc.w	r1, r2, r6
   d5ff8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5ffc:	bf08      	it	eq
   d5ffe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6002:	bd70      	pop	{r4, r5, r6, pc}
   d6004:	f1c4 040c 	rsb	r4, r4, #12
   d6008:	f1c4 0520 	rsb	r5, r4, #32
   d600c:	fa00 f304 	lsl.w	r3, r0, r4
   d6010:	fa20 f005 	lsr.w	r0, r0, r5
   d6014:	fa01 f204 	lsl.w	r2, r1, r4
   d6018:	ea40 0002 	orr.w	r0, r0, r2
   d601c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6020:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d6024:	f141 0100 	adc.w	r1, r1, #0
   d6028:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d602c:	bf08      	it	eq
   d602e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6032:	bd70      	pop	{r4, r5, r6, pc}
   d6034:	f1c4 0520 	rsb	r5, r4, #32
   d6038:	fa00 f205 	lsl.w	r2, r0, r5
   d603c:	ea4e 0e02 	orr.w	lr, lr, r2
   d6040:	fa20 f304 	lsr.w	r3, r0, r4
   d6044:	fa01 f205 	lsl.w	r2, r1, r5
   d6048:	ea43 0302 	orr.w	r3, r3, r2
   d604c:	fa21 f004 	lsr.w	r0, r1, r4
   d6050:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6054:	fa21 f204 	lsr.w	r2, r1, r4
   d6058:	ea20 0002 	bic.w	r0, r0, r2
   d605c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d6060:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6064:	bf08      	it	eq
   d6066:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d606a:	bd70      	pop	{r4, r5, r6, pc}
   d606c:	f094 0f00 	teq	r4, #0
   d6070:	d10f      	bne.n	d6092 <__aeabi_dmul+0x1c2>
   d6072:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6076:	0040      	lsls	r0, r0, #1
   d6078:	eb41 0101 	adc.w	r1, r1, r1
   d607c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6080:	bf08      	it	eq
   d6082:	3c01      	subeq	r4, #1
   d6084:	d0f7      	beq.n	d6076 <__aeabi_dmul+0x1a6>
   d6086:	ea41 0106 	orr.w	r1, r1, r6
   d608a:	f095 0f00 	teq	r5, #0
   d608e:	bf18      	it	ne
   d6090:	4770      	bxne	lr
   d6092:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6096:	0052      	lsls	r2, r2, #1
   d6098:	eb43 0303 	adc.w	r3, r3, r3
   d609c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d60a0:	bf08      	it	eq
   d60a2:	3d01      	subeq	r5, #1
   d60a4:	d0f7      	beq.n	d6096 <__aeabi_dmul+0x1c6>
   d60a6:	ea43 0306 	orr.w	r3, r3, r6
   d60aa:	4770      	bx	lr
   d60ac:	ea94 0f0c 	teq	r4, ip
   d60b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d60b4:	bf18      	it	ne
   d60b6:	ea95 0f0c 	teqne	r5, ip
   d60ba:	d00c      	beq.n	d60d6 <__aeabi_dmul+0x206>
   d60bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d60c0:	bf18      	it	ne
   d60c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d60c6:	d1d1      	bne.n	d606c <__aeabi_dmul+0x19c>
   d60c8:	ea81 0103 	eor.w	r1, r1, r3
   d60cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d60d0:	f04f 0000 	mov.w	r0, #0
   d60d4:	bd70      	pop	{r4, r5, r6, pc}
   d60d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d60da:	bf06      	itte	eq
   d60dc:	4610      	moveq	r0, r2
   d60de:	4619      	moveq	r1, r3
   d60e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d60e4:	d019      	beq.n	d611a <__aeabi_dmul+0x24a>
   d60e6:	ea94 0f0c 	teq	r4, ip
   d60ea:	d102      	bne.n	d60f2 <__aeabi_dmul+0x222>
   d60ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d60f0:	d113      	bne.n	d611a <__aeabi_dmul+0x24a>
   d60f2:	ea95 0f0c 	teq	r5, ip
   d60f6:	d105      	bne.n	d6104 <__aeabi_dmul+0x234>
   d60f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d60fc:	bf1c      	itt	ne
   d60fe:	4610      	movne	r0, r2
   d6100:	4619      	movne	r1, r3
   d6102:	d10a      	bne.n	d611a <__aeabi_dmul+0x24a>
   d6104:	ea81 0103 	eor.w	r1, r1, r3
   d6108:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d610c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d6110:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6114:	f04f 0000 	mov.w	r0, #0
   d6118:	bd70      	pop	{r4, r5, r6, pc}
   d611a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d611e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d6122:	bd70      	pop	{r4, r5, r6, pc}

000d6124 <__aeabi_ddiv>:
   d6124:	b570      	push	{r4, r5, r6, lr}
   d6126:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d612a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d612e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6132:	bf1d      	ittte	ne
   d6134:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6138:	ea94 0f0c 	teqne	r4, ip
   d613c:	ea95 0f0c 	teqne	r5, ip
   d6140:	f000 f8a7 	bleq	d6292 <__aeabi_ddiv+0x16e>
   d6144:	eba4 0405 	sub.w	r4, r4, r5
   d6148:	ea81 0e03 	eor.w	lr, r1, r3
   d614c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6150:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6154:	f000 8088 	beq.w	d6268 <__aeabi_ddiv+0x144>
   d6158:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d615c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d6160:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6164:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6168:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d616c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d6170:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6174:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6178:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d617c:	429d      	cmp	r5, r3
   d617e:	bf08      	it	eq
   d6180:	4296      	cmpeq	r6, r2
   d6182:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6186:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d618a:	d202      	bcs.n	d6192 <__aeabi_ddiv+0x6e>
   d618c:	085b      	lsrs	r3, r3, #1
   d618e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6192:	1ab6      	subs	r6, r6, r2
   d6194:	eb65 0503 	sbc.w	r5, r5, r3
   d6198:	085b      	lsrs	r3, r3, #1
   d619a:	ea4f 0232 	mov.w	r2, r2, rrx
   d619e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d61a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d61a6:	ebb6 0e02 	subs.w	lr, r6, r2
   d61aa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61ae:	bf22      	ittt	cs
   d61b0:	1ab6      	subcs	r6, r6, r2
   d61b2:	4675      	movcs	r5, lr
   d61b4:	ea40 000c 	orrcs.w	r0, r0, ip
   d61b8:	085b      	lsrs	r3, r3, #1
   d61ba:	ea4f 0232 	mov.w	r2, r2, rrx
   d61be:	ebb6 0e02 	subs.w	lr, r6, r2
   d61c2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61c6:	bf22      	ittt	cs
   d61c8:	1ab6      	subcs	r6, r6, r2
   d61ca:	4675      	movcs	r5, lr
   d61cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d61d0:	085b      	lsrs	r3, r3, #1
   d61d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d61d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d61da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61de:	bf22      	ittt	cs
   d61e0:	1ab6      	subcs	r6, r6, r2
   d61e2:	4675      	movcs	r5, lr
   d61e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d61e8:	085b      	lsrs	r3, r3, #1
   d61ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d61ee:	ebb6 0e02 	subs.w	lr, r6, r2
   d61f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d61f6:	bf22      	ittt	cs
   d61f8:	1ab6      	subcs	r6, r6, r2
   d61fa:	4675      	movcs	r5, lr
   d61fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d6200:	ea55 0e06 	orrs.w	lr, r5, r6
   d6204:	d018      	beq.n	d6238 <__aeabi_ddiv+0x114>
   d6206:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d620a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d620e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d6212:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d6216:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d621a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d621e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d6222:	d1c0      	bne.n	d61a6 <__aeabi_ddiv+0x82>
   d6224:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6228:	d10b      	bne.n	d6242 <__aeabi_ddiv+0x11e>
   d622a:	ea41 0100 	orr.w	r1, r1, r0
   d622e:	f04f 0000 	mov.w	r0, #0
   d6232:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6236:	e7b6      	b.n	d61a6 <__aeabi_ddiv+0x82>
   d6238:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d623c:	bf04      	itt	eq
   d623e:	4301      	orreq	r1, r0
   d6240:	2000      	moveq	r0, #0
   d6242:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6246:	bf88      	it	hi
   d6248:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d624c:	f63f aeaf 	bhi.w	d5fae <__aeabi_dmul+0xde>
   d6250:	ebb5 0c03 	subs.w	ip, r5, r3
   d6254:	bf04      	itt	eq
   d6256:	ebb6 0c02 	subseq.w	ip, r6, r2
   d625a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d625e:	f150 0000 	adcs.w	r0, r0, #0
   d6262:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6266:	bd70      	pop	{r4, r5, r6, pc}
   d6268:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d626c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d6270:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6274:	bfc2      	ittt	gt
   d6276:	ebd4 050c 	rsbsgt	r5, r4, ip
   d627a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d627e:	bd70      	popgt	{r4, r5, r6, pc}
   d6280:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6284:	f04f 0e00 	mov.w	lr, #0
   d6288:	3c01      	subs	r4, #1
   d628a:	e690      	b.n	d5fae <__aeabi_dmul+0xde>
   d628c:	ea45 0e06 	orr.w	lr, r5, r6
   d6290:	e68d      	b.n	d5fae <__aeabi_dmul+0xde>
   d6292:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6296:	ea94 0f0c 	teq	r4, ip
   d629a:	bf08      	it	eq
   d629c:	ea95 0f0c 	teqeq	r5, ip
   d62a0:	f43f af3b 	beq.w	d611a <__aeabi_dmul+0x24a>
   d62a4:	ea94 0f0c 	teq	r4, ip
   d62a8:	d10a      	bne.n	d62c0 <__aeabi_ddiv+0x19c>
   d62aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d62ae:	f47f af34 	bne.w	d611a <__aeabi_dmul+0x24a>
   d62b2:	ea95 0f0c 	teq	r5, ip
   d62b6:	f47f af25 	bne.w	d6104 <__aeabi_dmul+0x234>
   d62ba:	4610      	mov	r0, r2
   d62bc:	4619      	mov	r1, r3
   d62be:	e72c      	b.n	d611a <__aeabi_dmul+0x24a>
   d62c0:	ea95 0f0c 	teq	r5, ip
   d62c4:	d106      	bne.n	d62d4 <__aeabi_ddiv+0x1b0>
   d62c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d62ca:	f43f aefd 	beq.w	d60c8 <__aeabi_dmul+0x1f8>
   d62ce:	4610      	mov	r0, r2
   d62d0:	4619      	mov	r1, r3
   d62d2:	e722      	b.n	d611a <__aeabi_dmul+0x24a>
   d62d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d62d8:	bf18      	it	ne
   d62da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d62de:	f47f aec5 	bne.w	d606c <__aeabi_dmul+0x19c>
   d62e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d62e6:	f47f af0d 	bne.w	d6104 <__aeabi_dmul+0x234>
   d62ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d62ee:	f47f aeeb 	bne.w	d60c8 <__aeabi_dmul+0x1f8>
   d62f2:	e712      	b.n	d611a <__aeabi_dmul+0x24a>

000d62f4 <__gedf2>:
   d62f4:	f04f 3cff 	mov.w	ip, #4294967295
   d62f8:	e006      	b.n	d6308 <__cmpdf2+0x4>
   d62fa:	bf00      	nop

000d62fc <__ledf2>:
   d62fc:	f04f 0c01 	mov.w	ip, #1
   d6300:	e002      	b.n	d6308 <__cmpdf2+0x4>
   d6302:	bf00      	nop

000d6304 <__cmpdf2>:
   d6304:	f04f 0c01 	mov.w	ip, #1
   d6308:	f84d cd04 	str.w	ip, [sp, #-4]!
   d630c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6310:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6314:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6318:	bf18      	it	ne
   d631a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d631e:	d01b      	beq.n	d6358 <__cmpdf2+0x54>
   d6320:	b001      	add	sp, #4
   d6322:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d6326:	bf0c      	ite	eq
   d6328:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d632c:	ea91 0f03 	teqne	r1, r3
   d6330:	bf02      	ittt	eq
   d6332:	ea90 0f02 	teqeq	r0, r2
   d6336:	2000      	moveq	r0, #0
   d6338:	4770      	bxeq	lr
   d633a:	f110 0f00 	cmn.w	r0, #0
   d633e:	ea91 0f03 	teq	r1, r3
   d6342:	bf58      	it	pl
   d6344:	4299      	cmppl	r1, r3
   d6346:	bf08      	it	eq
   d6348:	4290      	cmpeq	r0, r2
   d634a:	bf2c      	ite	cs
   d634c:	17d8      	asrcs	r0, r3, #31
   d634e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d6352:	f040 0001 	orr.w	r0, r0, #1
   d6356:	4770      	bx	lr
   d6358:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d635c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6360:	d102      	bne.n	d6368 <__cmpdf2+0x64>
   d6362:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6366:	d107      	bne.n	d6378 <__cmpdf2+0x74>
   d6368:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d636c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6370:	d1d6      	bne.n	d6320 <__cmpdf2+0x1c>
   d6372:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6376:	d0d3      	beq.n	d6320 <__cmpdf2+0x1c>
   d6378:	f85d 0b04 	ldr.w	r0, [sp], #4
   d637c:	4770      	bx	lr
   d637e:	bf00      	nop

000d6380 <__aeabi_cdrcmple>:
   d6380:	4684      	mov	ip, r0
   d6382:	4610      	mov	r0, r2
   d6384:	4662      	mov	r2, ip
   d6386:	468c      	mov	ip, r1
   d6388:	4619      	mov	r1, r3
   d638a:	4663      	mov	r3, ip
   d638c:	e000      	b.n	d6390 <__aeabi_cdcmpeq>
   d638e:	bf00      	nop

000d6390 <__aeabi_cdcmpeq>:
   d6390:	b501      	push	{r0, lr}
   d6392:	f7ff ffb7 	bl	d6304 <__cmpdf2>
   d6396:	2800      	cmp	r0, #0
   d6398:	bf48      	it	mi
   d639a:	f110 0f00 	cmnmi.w	r0, #0
   d639e:	bd01      	pop	{r0, pc}

000d63a0 <__aeabi_dcmpeq>:
   d63a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63a4:	f7ff fff4 	bl	d6390 <__aeabi_cdcmpeq>
   d63a8:	bf0c      	ite	eq
   d63aa:	2001      	moveq	r0, #1
   d63ac:	2000      	movne	r0, #0
   d63ae:	f85d fb08 	ldr.w	pc, [sp], #8
   d63b2:	bf00      	nop

000d63b4 <__aeabi_dcmplt>:
   d63b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63b8:	f7ff ffea 	bl	d6390 <__aeabi_cdcmpeq>
   d63bc:	bf34      	ite	cc
   d63be:	2001      	movcc	r0, #1
   d63c0:	2000      	movcs	r0, #0
   d63c2:	f85d fb08 	ldr.w	pc, [sp], #8
   d63c6:	bf00      	nop

000d63c8 <__aeabi_dcmple>:
   d63c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63cc:	f7ff ffe0 	bl	d6390 <__aeabi_cdcmpeq>
   d63d0:	bf94      	ite	ls
   d63d2:	2001      	movls	r0, #1
   d63d4:	2000      	movhi	r0, #0
   d63d6:	f85d fb08 	ldr.w	pc, [sp], #8
   d63da:	bf00      	nop

000d63dc <__aeabi_dcmpge>:
   d63dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63e0:	f7ff ffce 	bl	d6380 <__aeabi_cdrcmple>
   d63e4:	bf94      	ite	ls
   d63e6:	2001      	movls	r0, #1
   d63e8:	2000      	movhi	r0, #0
   d63ea:	f85d fb08 	ldr.w	pc, [sp], #8
   d63ee:	bf00      	nop

000d63f0 <__aeabi_dcmpgt>:
   d63f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d63f4:	f7ff ffc4 	bl	d6380 <__aeabi_cdrcmple>
   d63f8:	bf34      	ite	cc
   d63fa:	2001      	movcc	r0, #1
   d63fc:	2000      	movcs	r0, #0
   d63fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d6402:	bf00      	nop

000d6404 <__cxa_atexit>:
   d6404:	b510      	push	{r4, lr}
   d6406:	4c05      	ldr	r4, [pc, #20]	; (d641c <__cxa_atexit+0x18>)
   d6408:	4613      	mov	r3, r2
   d640a:	b12c      	cbz	r4, d6418 <__cxa_atexit+0x14>
   d640c:	460a      	mov	r2, r1
   d640e:	4601      	mov	r1, r0
   d6410:	2002      	movs	r0, #2
   d6412:	f3af 8000 	nop.w
   d6416:	bd10      	pop	{r4, pc}
   d6418:	4620      	mov	r0, r4
   d641a:	e7fc      	b.n	d6416 <__cxa_atexit+0x12>
   d641c:	00000000 	.word	0x00000000

000d6420 <memcpy>:
   d6420:	440a      	add	r2, r1
   d6422:	4291      	cmp	r1, r2
   d6424:	f100 33ff 	add.w	r3, r0, #4294967295
   d6428:	d100      	bne.n	d642c <memcpy+0xc>
   d642a:	4770      	bx	lr
   d642c:	b510      	push	{r4, lr}
   d642e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6432:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6436:	4291      	cmp	r1, r2
   d6438:	d1f9      	bne.n	d642e <memcpy+0xe>
   d643a:	bd10      	pop	{r4, pc}

000d643c <memset>:
   d643c:	4402      	add	r2, r0
   d643e:	4603      	mov	r3, r0
   d6440:	4293      	cmp	r3, r2
   d6442:	d100      	bne.n	d6446 <memset+0xa>
   d6444:	4770      	bx	lr
   d6446:	f803 1b01 	strb.w	r1, [r3], #1
   d644a:	e7f9      	b.n	d6440 <memset+0x4>

000d644c <srand>:
   d644c:	b538      	push	{r3, r4, r5, lr}
   d644e:	4b0d      	ldr	r3, [pc, #52]	; (d6484 <srand+0x38>)
   d6450:	681d      	ldr	r5, [r3, #0]
   d6452:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6454:	4604      	mov	r4, r0
   d6456:	b97b      	cbnz	r3, d6478 <srand+0x2c>
   d6458:	2018      	movs	r0, #24
   d645a:	f7fe fe2d 	bl	d50b8 <malloc>
   d645e:	4a0a      	ldr	r2, [pc, #40]	; (d6488 <srand+0x3c>)
   d6460:	4b0a      	ldr	r3, [pc, #40]	; (d648c <srand+0x40>)
   d6462:	63a8      	str	r0, [r5, #56]	; 0x38
   d6464:	e9c0 2300 	strd	r2, r3, [r0]
   d6468:	4b09      	ldr	r3, [pc, #36]	; (d6490 <srand+0x44>)
   d646a:	6083      	str	r3, [r0, #8]
   d646c:	230b      	movs	r3, #11
   d646e:	8183      	strh	r3, [r0, #12]
   d6470:	2201      	movs	r2, #1
   d6472:	2300      	movs	r3, #0
   d6474:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6478:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d647a:	2200      	movs	r2, #0
   d647c:	611c      	str	r4, [r3, #16]
   d647e:	615a      	str	r2, [r3, #20]
   d6480:	bd38      	pop	{r3, r4, r5, pc}
   d6482:	bf00      	nop
   d6484:	2003e484 	.word	0x2003e484
   d6488:	abcd330e 	.word	0xabcd330e
   d648c:	e66d1234 	.word	0xe66d1234
   d6490:	0005deec 	.word	0x0005deec

000d6494 <rand>:
   d6494:	4b13      	ldr	r3, [pc, #76]	; (d64e4 <rand+0x50>)
   d6496:	b510      	push	{r4, lr}
   d6498:	681c      	ldr	r4, [r3, #0]
   d649a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d649c:	b97b      	cbnz	r3, d64be <rand+0x2a>
   d649e:	2018      	movs	r0, #24
   d64a0:	f7fe fe0a 	bl	d50b8 <malloc>
   d64a4:	4a10      	ldr	r2, [pc, #64]	; (d64e8 <rand+0x54>)
   d64a6:	4b11      	ldr	r3, [pc, #68]	; (d64ec <rand+0x58>)
   d64a8:	63a0      	str	r0, [r4, #56]	; 0x38
   d64aa:	e9c0 2300 	strd	r2, r3, [r0]
   d64ae:	4b10      	ldr	r3, [pc, #64]	; (d64f0 <rand+0x5c>)
   d64b0:	6083      	str	r3, [r0, #8]
   d64b2:	230b      	movs	r3, #11
   d64b4:	8183      	strh	r3, [r0, #12]
   d64b6:	2201      	movs	r2, #1
   d64b8:	2300      	movs	r3, #0
   d64ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d64be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d64c0:	480c      	ldr	r0, [pc, #48]	; (d64f4 <rand+0x60>)
   d64c2:	690a      	ldr	r2, [r1, #16]
   d64c4:	694b      	ldr	r3, [r1, #20]
   d64c6:	4c0c      	ldr	r4, [pc, #48]	; (d64f8 <rand+0x64>)
   d64c8:	4350      	muls	r0, r2
   d64ca:	fb04 0003 	mla	r0, r4, r3, r0
   d64ce:	fba2 3404 	umull	r3, r4, r2, r4
   d64d2:	1c5a      	adds	r2, r3, #1
   d64d4:	4404      	add	r4, r0
   d64d6:	f144 0000 	adc.w	r0, r4, #0
   d64da:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d64de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d64e2:	bd10      	pop	{r4, pc}
   d64e4:	2003e484 	.word	0x2003e484
   d64e8:	abcd330e 	.word	0xabcd330e
   d64ec:	e66d1234 	.word	0xe66d1234
   d64f0:	0005deec 	.word	0x0005deec
   d64f4:	5851f42d 	.word	0x5851f42d
   d64f8:	4c957f2d 	.word	0x4c957f2d

000d64fc <strlen>:
   d64fc:	4603      	mov	r3, r0
   d64fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6502:	2a00      	cmp	r2, #0
   d6504:	d1fb      	bne.n	d64fe <strlen+0x2>
   d6506:	1a18      	subs	r0, r3, r0
   d6508:	3801      	subs	r0, #1
   d650a:	4770      	bx	lr

000d650c <dynalib_user>:
   d650c:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d651c:	0000 0000 6573 646e 6e69 5467 7268 6165     ....sendingThrea
   d652c:	0064 5245 4f52 2052 5254 4749 4547 0044     d.ERROR TRIGGED.
   d653c:	654d 7373 6761 2065 6147 2062 0031 654d     Message Gab 1.Me
   d654c:	7373 6761 2065 6147 2062 0032 654d 7373     ssage Gab 2.Mess
   d655c:	6761 2065 203a 4300 6372 3a20 0020 4142     age : .Crc : .BA
   d656c:	2044 454d 5353 4741 2045 4552 4543 5649     D MESSAGE RECEIV
   d657c:	4445 5700 4941 4954 474e 5420 4d49 4f45     ED.WAITING TIMEO
   d658c:	5455 0000                                   UT..

000d6590 <_ZTVN5spark13EthernetClassE>:
	...
   d6598:	5157 000d 514d 000d 5143 000d 5139 000d     WQ..MQ..CQ..9Q..
   d65a8:	512d 000d 5121 000d 58fd 000d 5905 000d     -Q..!Q...X...Y..
   d65b8:	5115 000d 510d 000d 5103 000d 50f9 000d     .Q...Q...Q...P..
   d65c8:	5935 000d 7061 0070 5925 252d 2d6d 6425     5Y..app.%Y-%m-%d
   d65d8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d65e8:	6d69 0065                                   ime.

000d65ec <_ZTV9IPAddress>:
	...
   d65f4:	545d 000d 544d 000d 544f 000d               ]T..MT..OT..

000d6600 <_ZTV9USBSerial>:
	...
   d6608:	5533 000d 559b 000d 5571 000d 51fd 000d     3U...U..qU...Q..
   d6618:	5563 000d 5535 000d 5545 000d 5595 000d     cU..5U..EU...U..
   d6628:	5555 000d 552f 000d                         UU../U..

000d6630 <_ZTV11USARTSerial>:
	...
   d6638:	569d 000d 5709 000d 56e1 000d 51fd 000d     .V...W...V...Q..
   d6648:	56b1 000d 56cd 000d 56bf 000d 56db 000d     .V...V...V...V..
   d6658:	569f 000d 56a3 000d                         .V...V..

000d6660 <_ZTV7TwoWire>:
	...
   d6668:	5799 000d 57e3 000d 57bb 000d 579b 000d     .W...W...W...W..
   d6678:	57c3 000d 57cb 000d 57d3 000d 57db 000d     .W...W...W...W..

000d6688 <_ZTVN5spark9WiFiClassE>:
	...
   d6690:	589d 000d 5893 000d 5889 000d 583f 000d     .X...X...X..?X..
   d66a0:	587d 000d 5871 000d 58fd 000d 5905 000d     }X..qX...X...Y..
   d66b0:	5865 000d 585d 000d 5853 000d 5849 000d     eX..]X..SX..IX..
   d66c0:	5935 000d                                   5Y..

000d66c4 <_ZTVN5spark12NetworkClassE>:
	...
   d66cc:	58bd 000d 58c7 000d 58d1 000d 58db 000d     .X...X...X...X..
   d66dc:	58e5 000d 58f1 000d 58fd 000d 5905 000d     .X...X...X...Y..
   d66ec:	590d 000d 5919 000d 5921 000d 592b 000d     .Y...Y..!Y..+Y..
   d66fc:	5935 000d                                   5Y..

000d6700 <_ZSt7nothrow>:
	...

000d6701 <link_const_variable_data_end>:
   d6701:	00          	.byte	0x00
	...

000d6704 <link_constructors_location>:
   d6704:	000d4c21 	.word	0x000d4c21
   d6708:	000d5161 	.word	0x000d5161
   d670c:	000d5189 	.word	0x000d5189
   d6710:	000d51d5 	.word	0x000d51d5
   d6714:	000d52c5 	.word	0x000d52c5
   d6718:	000d52d5 	.word	0x000d52d5
   d671c:	000d530d 	.word	0x000d530d
   d6720:	000d58a9 	.word	0x000d58a9
   d6724:	000d5a09 	.word	0x000d5a09

000d6728 <link_constructors_end>:
	...
