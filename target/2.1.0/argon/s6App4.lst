
c:/Users/Gabriel/Desktop/s6App4/target/2.1.0/argon/s6App4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002274  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6290  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e48c  000d6294  0001e48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002f4  2003e4fc  2003e4fc  0002e4fc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6304  000d6304  00026304  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d632c  000d632c  0002632c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0011347b  00000000  00000000  00026330  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001305b  00000000  00000000  001397ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00022c94  00000000  00000000  0014c806  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002380  00000000  00000000  0016f49a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006718  00000000  00000000  0017181a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035156  00000000  00000000  00177f32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f66c  00000000  00000000  001ad088  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001038d8  00000000  00000000  001dc6f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005e98  00000000  00000000  002dffcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f803 	bl	d6038 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f80b 	bl	d6054 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e48c 	.word	0x2003e48c
   d4048:	000d6294 	.word	0x000d6294
   d404c:	2003e4fc 	.word	0x2003e4fc
   d4050:	2003e4fc 	.word	0x2003e4fc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 ffe9 	bl	d5034 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6260 	.word	0x000d6260
   d407c:	000d6284 	.word	0x000d6284

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b898 	b.w	d41b4 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8b1 	bl	d41ec <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bf93 	b.w	d4fb8 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 be3b 	b.w	d4d0c <malloc>

000d4096 <_Znaj>:
   d4096:	f000 be39 	b.w	d4d0c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 be3f 	b.w	d4d1c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40b0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	2b2f      	cmp	r3, #47	; 0x2f
{
   d40b6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40b8:	d904      	bls.n	d40c4 <nrf_gpio_pin_port_decode+0x14>
   d40ba:	4a07      	ldr	r2, [pc, #28]	; (d40d8 <nrf_gpio_pin_port_decode+0x28>)
   d40bc:	2100      	movs	r1, #0
   d40be:	200a      	movs	r0, #10
   d40c0:	f000 fd88 	bl	d4bd4 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40c4:	6823      	ldr	r3, [r4, #0]
   d40c6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40c8:	bf83      	ittte	hi
   d40ca:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d40ce:	4803      	ldrhi	r0, [pc, #12]	; (d40dc <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40d0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d40d2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d40d6:	bd10      	pop	{r4, pc}
   d40d8:	000d49b5 	.word	0x000d49b5
   d40dc:	50000300 	.word	0x50000300

000d40e0 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d40e0:	b507      	push	{r0, r1, r2, lr}
   d40e2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d40e4:	a801      	add	r0, sp, #4
   d40e6:	f7ff ffe3 	bl	d40b0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d40ea:	9a01      	ldr	r2, [sp, #4]
   d40ec:	2301      	movs	r3, #1
   d40ee:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d40f0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d40f4:	b003      	add	sp, #12
   d40f6:	f85d fb04 	ldr.w	pc, [sp], #4

000d40fa <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40fa:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d40fc:	2301      	movs	r3, #1
   d40fe:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d4100:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d4102:	4604      	mov	r4, r0
        if (th->func) {
   d4104:	b143      	cbz	r3, d4118 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d4106:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4108:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d410a:	2301      	movs	r3, #1
   d410c:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d410e:	2000      	movs	r0, #0
    }
   d4110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d4114:	f000 bc8e 	b.w	d4a34 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d4118:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d411a:	2800      	cmp	r0, #0
   d411c:	d0f5      	beq.n	d410a <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d411e:	6883      	ldr	r3, [r0, #8]
   d4120:	b90b      	cbnz	r3, d4126 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d4122:	f001 fb22 	bl	d576a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4126:	68c3      	ldr	r3, [r0, #12]
   d4128:	e7ee      	b.n	d4108 <_ZN6Thread3runEPv+0xe>

000d412a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d412a:	b510      	push	{r4, lr}
   d412c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d412e:	6800      	ldr	r0, [r0, #0]
   d4130:	b108      	cbz	r0, d4136 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4132:	f000 fdf3 	bl	d4d1c <free>
class SystemClass {
   d4136:	4620      	mov	r0, r4
   d4138:	bd10      	pop	{r4, pc}

000d413a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d413a:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d413c:	6804      	ldr	r4, [r0, #0]
      operator()(_Tp* __ptr) const
   d413e:	4605      	mov	r5, r0
	if (__ptr != nullptr)
   d4140:	b14c      	cbz	r4, d4156 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x1c>
      if (_M_manager)
   d4142:	68a3      	ldr	r3, [r4, #8]
   d4144:	b11b      	cbz	r3, d414e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x14>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4146:	2203      	movs	r2, #3
   d4148:	4621      	mov	r1, r4
   d414a:	4620      	mov	r0, r4
   d414c:	4798      	blx	r3
	delete __ptr;
   d414e:	2110      	movs	r1, #16
   d4150:	4620      	mov	r0, r4
   d4152:	f001 fb04 	bl	d575e <_ZdlPvj>
   d4156:	4628      	mov	r0, r5
   d4158:	2114      	movs	r1, #20
      }
   d415a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d415e:	f001 bafe 	b.w	d575e <_ZdlPvj>

000d4162 <_ZN6ThreadD1Ev>:
    ~Thread()
   d4162:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d4164:	6803      	ldr	r3, [r0, #0]
   d4166:	4604      	mov	r4, r0
        if (!isValid())
   d4168:	b19b      	cbz	r3, d4192 <_ZN6ThreadD1Ev+0x30>
        return isValid() && os_thread_is_current(d_->handle);
   d416a:	6858      	ldr	r0, [r3, #4]
   d416c:	f000 fc3a 	bl	d49e4 <os_thread_is_current>
   d4170:	b978      	cbnz	r0, d4192 <_ZN6ThreadD1Ev+0x30>
   d4172:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d4174:	7c5a      	ldrb	r2, [r3, #17]
   d4176:	b912      	cbnz	r2, d417e <_ZN6ThreadD1Ev+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d4178:	6858      	ldr	r0, [r3, #4]
   d417a:	f000 fc3b 	bl	d49f4 <os_thread_join>
        os_thread_cleanup(d_->handle);
   d417e:	6823      	ldr	r3, [r4, #0]
   d4180:	6858      	ldr	r0, [r3, #4]
   d4182:	f000 fc3f 	bl	d4a04 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4186:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4188:	2300      	movs	r3, #0
   d418a:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d418c:	b108      	cbz	r0, d4192 <_ZN6ThreadD1Ev+0x30>
      operator()(_Tp* __ptr) const
   d418e:	f7ff ffd4 	bl	d413a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
	if (__ptr != nullptr)
   d4192:	6820      	ldr	r0, [r4, #0]
   d4194:	b108      	cbz	r0, d419a <_ZN6ThreadD1Ev+0x38>
      operator()(_Tp* __ptr) const
   d4196:	f7ff ffd0 	bl	d413a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d419a:	4620      	mov	r0, r4
   d419c:	bd10      	pop	{r4, pc}
	...

000d41a0 <_ZN11SystemClass10ticksDelayEm>:
        return SYSTEM_US_TICKS;
    }

    static inline uint32_t ticks()
    {
        return SYSTEM_TICK_COUNTER;
   d41a0:	4b03      	ldr	r3, [pc, #12]	; (d41b0 <_ZN11SystemClass10ticksDelayEm+0x10>)
   d41a2:	6859      	ldr	r1, [r3, #4]
   d41a4:	685a      	ldr	r2, [r3, #4]
    }

    static inline void ticksDelay(uint32_t duration)
    {
        uint32_t start = ticks();
        while ((ticks()-start)<duration) {}
   d41a6:	1a52      	subs	r2, r2, r1
   d41a8:	4282      	cmp	r2, r0
   d41aa:	d3fb      	bcc.n	d41a4 <_ZN11SystemClass10ticksDelayEm+0x4>
    }
   d41ac:	4770      	bx	lr
   d41ae:	bf00      	nop
   d41b0:	e0001000 	.word	0xe0001000

000d41b4 <setup>:
volatile uint8_t byteCount = 0;
volatile uint8_t bitMask = 0b00000001;
volatile uint8_t bitBuffer = 0b00000000;
volatile uint8_t byteBuffer[255] = {};

void setup() {
   d41b4:	b507      	push	{r0, r1, r2, lr}
	Serial.begin(9600);
   d41b6:	f001 f83d 	bl	d5234 <_Z16_fetch_usbserialv>
   d41ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41be:	f001 f82d 	bl	d521c <_ZN9USBSerial5beginEl>
  pinMode(OUTPUT_PIN, OUTPUT_OPEN_DRAIN);
   d41c2:	2105      	movs	r1, #5
   d41c4:	2002      	movs	r0, #2
   d41c6:	f001 fa73 	bl	d56b0 <pinMode>
  pinMode(INPUT_PIN, INPUT_PULLUP);
   d41ca:	2102      	movs	r1, #2
   d41cc:	2004      	movs	r0, #4
   d41ce:	f001 fa6f 	bl	d56b0 <pinMode>
  attachInterrupt(INPUT_PIN, interrupt, CHANGE);
   d41d2:	2200      	movs	r2, #0
   d41d4:	4904      	ldr	r1, [pc, #16]	; (d41e8 <setup+0x34>)
   d41d6:	9200      	str	r2, [sp, #0]
   d41d8:	f04f 33ff 	mov.w	r3, #4294967295
   d41dc:	2004      	movs	r0, #4
   d41de:	f001 f855 	bl	d528c <_Z15attachInterrupttPFvvE13InterruptModeah>
}
   d41e2:	b003      	add	sp, #12
   d41e4:	f85d fb04 	ldr.w	pc, [sp], #4
   d41e8:	000d44f5 	.word	0x000d44f5

000d41ec <loop>:

void loop() {

}
   d41ec:	4770      	bx	lr
	...

000d41f0 <_Z18registerHeaderDatab>:
    delay(10000);
	}
}

void registerHeaderData(bool data) {
  if (data)
   d41f0:	4a06      	ldr	r2, [pc, #24]	; (d420c <_Z18registerHeaderDatab+0x1c>)
   d41f2:	b128      	cbz	r0, d4200 <_Z18registerHeaderDatab+0x10>
    header |= headerMask;
   d41f4:	4906      	ldr	r1, [pc, #24]	; (d4210 <_Z18registerHeaderDatab+0x20>)
   d41f6:	8810      	ldrh	r0, [r2, #0]
   d41f8:	880b      	ldrh	r3, [r1, #0]
   d41fa:	4303      	orrs	r3, r0
   d41fc:	b29b      	uxth	r3, r3
   d41fe:	800b      	strh	r3, [r1, #0]
  headerMask <<= 1;
   d4200:	8813      	ldrh	r3, [r2, #0]
   d4202:	b29b      	uxth	r3, r3
   d4204:	005b      	lsls	r3, r3, #1
   d4206:	b29b      	uxth	r3, r3
   d4208:	8013      	strh	r3, [r2, #0]
}
   d420a:	4770      	bx	lr
   d420c:	2003e48e 	.word	0x2003e48e
   d4210:	2003e616 	.word	0x2003e616

000d4214 <_Z15registerBitDatab>:

void registerBitData(bool data) {
  if (data)
   d4214:	4a05      	ldr	r2, [pc, #20]	; (d422c <_Z15registerBitDatab+0x18>)
   d4216:	b120      	cbz	r0, d4222 <_Z15registerBitDatab+0xe>
    bitBuffer |= bitMask;
   d4218:	4905      	ldr	r1, [pc, #20]	; (d4230 <_Z15registerBitDatab+0x1c>)
   d421a:	7810      	ldrb	r0, [r2, #0]
   d421c:	780b      	ldrb	r3, [r1, #0]
   d421e:	4303      	orrs	r3, r0
   d4220:	700b      	strb	r3, [r1, #0]
  bitMask <<= 1;
   d4222:	7813      	ldrb	r3, [r2, #0]
   d4224:	005b      	lsls	r3, r3, #1
   d4226:	b2db      	uxtb	r3, r3
   d4228:	7013      	strb	r3, [r2, #0]
}
   d422a:	4770      	bx	lr
   d422c:	2003e48c 	.word	0x2003e48c
   d4230:	2003e514 	.word	0x2003e514

000d4234 <_Z16fallingInterruptv>:
void fallingInterrupt() {
   d4234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  switch (state) {
   d4238:	4c40      	ldr	r4, [pc, #256]	; (d433c <_Z16fallingInterruptv+0x108>)
   d423a:	6823      	ldr	r3, [r4, #0]
   d423c:	2b05      	cmp	r3, #5
   d423e:	d835      	bhi.n	d42ac <_Z16fallingInterruptv+0x78>
   d4240:	e8df f003 	tbb	[pc, r3]
   d4244:	06343403 	.word	0x06343403
   d4248:	7436      	.short	0x7436
    state = PREAMBULE;
   d424a:	2301      	movs	r3, #1
        state = CRC;
   d424c:	6023      	str	r3, [r4, #0]
   d424e:	e02d      	b.n	d42ac <_Z16fallingInterruptv+0x78>
    if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d4250:	f8df 8114 	ldr.w	r8, [pc, #276]	; d4368 <_Z16fallingInterruptv+0x134>
   d4254:	4d3a      	ldr	r5, [pc, #232]	; (d4340 <_Z16fallingInterruptv+0x10c>)
   d4256:	f8d8 0000 	ldr.w	r0, [r8]
   d425a:	682b      	ldr	r3, [r5, #0]
   d425c:	4a39      	ldr	r2, [pc, #228]	; (d4344 <_Z16fallingInterruptv+0x110>)
   d425e:	1ac0      	subs	r0, r0, r3
   d4260:	f8d2 9000 	ldr.w	r9, [r2]
   d4264:	f001 fbc6 	bl	d59f4 <__aeabi_ui2d>
   d4268:	4606      	mov	r6, r0
   d426a:	4648      	mov	r0, r9
   d426c:	460f      	mov	r7, r1
   d426e:	f001 fbc1 	bl	d59f4 <__aeabi_ui2d>
   d4272:	4b35      	ldr	r3, [pc, #212]	; (d4348 <_Z16fallingInterruptv+0x114>)
   d4274:	2200      	movs	r2, #0
   d4276:	f001 fc37 	bl	d5ae8 <__aeabi_dmul>
   d427a:	4602      	mov	r2, r0
   d427c:	460b      	mov	r3, r1
   d427e:	4630      	mov	r0, r6
   d4280:	4639      	mov	r1, r7
   d4282:	f001 fea3 	bl	d5fcc <__aeabi_dcmplt>
   d4286:	b988      	cbnz	r0, d42ac <_Z16fallingInterruptv+0x78>
    lastStateChange = interruptTick;
   d4288:	f8d8 3000 	ldr.w	r3, [r8]
   d428c:	602b      	str	r3, [r5, #0]
    registerHeaderData(1);
   d428e:	2001      	movs	r0, #1
   d4290:	f7ff ffae 	bl	d41f0 <_Z18registerHeaderDatab>
    if (!headerMask) {
   d4294:	4b2d      	ldr	r3, [pc, #180]	; (d434c <_Z16fallingInterruptv+0x118>)
   d4296:	881b      	ldrh	r3, [r3, #0]
   d4298:	b29b      	uxth	r3, r3
   d429a:	b93b      	cbnz	r3, d42ac <_Z16fallingInterruptv+0x78>
      state = MESSAGE;
   d429c:	2304      	movs	r3, #4
   d429e:	6023      	str	r3, [r4, #0]
      msgLength = (header & 0b1111111100000000) >> 8;
   d42a0:	4b2b      	ldr	r3, [pc, #172]	; (d4350 <_Z16fallingInterruptv+0x11c>)
   d42a2:	4a2c      	ldr	r2, [pc, #176]	; (d4354 <_Z16fallingInterruptv+0x120>)
   d42a4:	881b      	ldrh	r3, [r3, #0]
   d42a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d42aa:	7013      	strb	r3, [r2, #0]
}
   d42ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d42b0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; d4368 <_Z16fallingInterruptv+0x134>
   d42b4:	4d22      	ldr	r5, [pc, #136]	; (d4340 <_Z16fallingInterruptv+0x10c>)
   d42b6:	f8d8 0000 	ldr.w	r0, [r8]
   d42ba:	682b      	ldr	r3, [r5, #0]
   d42bc:	4a21      	ldr	r2, [pc, #132]	; (d4344 <_Z16fallingInterruptv+0x110>)
   d42be:	1ac0      	subs	r0, r0, r3
   d42c0:	f8d2 9000 	ldr.w	r9, [r2]
   d42c4:	f001 fb96 	bl	d59f4 <__aeabi_ui2d>
   d42c8:	4606      	mov	r6, r0
   d42ca:	4648      	mov	r0, r9
   d42cc:	460f      	mov	r7, r1
   d42ce:	f001 fb91 	bl	d59f4 <__aeabi_ui2d>
   d42d2:	4b1d      	ldr	r3, [pc, #116]	; (d4348 <_Z16fallingInterruptv+0x114>)
   d42d4:	2200      	movs	r2, #0
   d42d6:	f001 fc07 	bl	d5ae8 <__aeabi_dmul>
   d42da:	4602      	mov	r2, r0
   d42dc:	460b      	mov	r3, r1
   d42de:	4630      	mov	r0, r6
   d42e0:	4639      	mov	r1, r7
   d42e2:	f001 fe73 	bl	d5fcc <__aeabi_dcmplt>
   d42e6:	2800      	cmp	r0, #0
   d42e8:	d1e0      	bne.n	d42ac <_Z16fallingInterruptv+0x78>
    lastStateChange = interruptTick;
   d42ea:	f8d8 3000 	ldr.w	r3, [r8]
   d42ee:	602b      	str	r3, [r5, #0]
    registerBitData(1);
   d42f0:	2001      	movs	r0, #1
   d42f2:	f7ff ff8f 	bl	d4214 <_Z15registerBitDatab>
    if (!bitMask) {
   d42f6:	4918      	ldr	r1, [pc, #96]	; (d4358 <_Z16fallingInterruptv+0x124>)
   d42f8:	780b      	ldrb	r3, [r1, #0]
   d42fa:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d42fe:	2b00      	cmp	r3, #0
   d4300:	d1d4      	bne.n	d42ac <_Z16fallingInterruptv+0x78>
      byteBuffer[byteCount++] = bitBuffer;
   d4302:	4a16      	ldr	r2, [pc, #88]	; (d435c <_Z16fallingInterruptv+0x128>)
   d4304:	4816      	ldr	r0, [pc, #88]	; (d4360 <_Z16fallingInterruptv+0x12c>)
   d4306:	7813      	ldrb	r3, [r2, #0]
   d4308:	4f16      	ldr	r7, [pc, #88]	; (d4364 <_Z16fallingInterruptv+0x130>)
   d430a:	b2de      	uxtb	r6, r3
   d430c:	3301      	adds	r3, #1
   d430e:	b2db      	uxtb	r3, r3
   d4310:	7013      	strb	r3, [r2, #0]
   d4312:	7803      	ldrb	r3, [r0, #0]
   d4314:	b2db      	uxtb	r3, r3
   d4316:	55bb      	strb	r3, [r7, r6]
      bitMask = 0b00000001;
   d4318:	2301      	movs	r3, #1
      bitBuffer = 0b00000000;
   d431a:	7005      	strb	r5, [r0, #0]
      bitMask = 0b00000001;
   d431c:	700b      	strb	r3, [r1, #0]
      if (byteCount == msgLength) {
   d431e:	4b0d      	ldr	r3, [pc, #52]	; (d4354 <_Z16fallingInterruptv+0x120>)
   d4320:	7812      	ldrb	r2, [r2, #0]
   d4322:	781b      	ldrb	r3, [r3, #0]
   d4324:	429a      	cmp	r2, r3
   d4326:	d1c1      	bne.n	d42ac <_Z16fallingInterruptv+0x78>
        state = CRC;
   d4328:	2305      	movs	r3, #5
   d432a:	e78f      	b.n	d424c <_Z16fallingInterruptv+0x18>
      Serial.println((char*)byteBuffer);
   d432c:	f000 ff82 	bl	d5234 <_Z16_fetch_usbserialv>
}
   d4330:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      Serial.println((char*)byteBuffer);
   d4334:	490b      	ldr	r1, [pc, #44]	; (d4364 <_Z16fallingInterruptv+0x130>)
   d4336:	f000 bdc2 	b.w	d4ebe <_ZN5Print7printlnEPKc>
   d433a:	bf00      	nop
   d433c:	2003e63c 	.word	0x2003e63c
   d4340:	2003e61c 	.word	0x2003e61c
   d4344:	2003e624 	.word	0x2003e624
   d4348:	3ff80000 	.word	0x3ff80000
   d434c:	2003e48e 	.word	0x2003e48e
   d4350:	2003e616 	.word	0x2003e616
   d4354:	2003e628 	.word	0x2003e628
   d4358:	2003e48c 	.word	0x2003e48c
   d435c:	2003e614 	.word	0x2003e614
   d4360:	2003e514 	.word	0x2003e514
   d4364:	2003e515 	.word	0x2003e515
   d4368:	2003e618 	.word	0x2003e618

000d436c <_Z15risingInterruptv>:
void risingInterrupt() {
   d436c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  switch (state) {
   d4370:	4c50      	ldr	r4, [pc, #320]	; (d44b4 <_Z15risingInterruptv+0x148>)
   d4372:	6823      	ldr	r3, [r4, #0]
   d4374:	3b01      	subs	r3, #1
   d4376:	2b04      	cmp	r3, #4
   d4378:	d819      	bhi.n	d43ae <_Z15risingInterruptv+0x42>
   d437a:	e8df f003 	tbb	[pc, r3]
   d437e:	1a03      	.short	0x1a03
   d4380:	5727      	.short	0x5727
   d4382:	94          	.byte	0x94
   d4383:	00          	.byte	0x00
    period = interruptTick - periodStart;
   d4384:	484c      	ldr	r0, [pc, #304]	; (d44b8 <_Z15risingInterruptv+0x14c>)
   d4386:	494d      	ldr	r1, [pc, #308]	; (d44bc <_Z15risingInterruptv+0x150>)
   d4388:	6803      	ldr	r3, [r0, #0]
   d438a:	680a      	ldr	r2, [r1, #0]
   d438c:	1a9b      	subs	r3, r3, r2
   d438e:	4a4c      	ldr	r2, [pc, #304]	; (d44c0 <_Z15risingInterruptv+0x154>)
   d4390:	6013      	str	r3, [r2, #0]
    periodStart = interruptTick;
   d4392:	6803      	ldr	r3, [r0, #0]
   d4394:	600b      	str	r3, [r1, #0]
    if (preambuleStateTimes++ >= 4) {
   d4396:	494b      	ldr	r1, [pc, #300]	; (d44c4 <_Z15risingInterruptv+0x158>)
   d4398:	680b      	ldr	r3, [r1, #0]
   d439a:	1c58      	adds	r0, r3, #1
   d439c:	2b03      	cmp	r3, #3
   d439e:	6008      	str	r0, [r1, #0]
   d43a0:	d905      	bls.n	d43ae <_Z15risingInterruptv+0x42>
      state = START;
   d43a2:	2302      	movs	r3, #2
   d43a4:	6023      	str	r3, [r4, #0]
      manchesterTicksReceiver = period / 4;
   d43a6:	6813      	ldr	r3, [r2, #0]
   d43a8:	4a47      	ldr	r2, [pc, #284]	; (d44c8 <_Z15risingInterruptv+0x15c>)
   d43aa:	089b      	lsrs	r3, r3, #2
   d43ac:	6013      	str	r3, [r2, #0]
}
   d43ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (startStateTimes++ >= 5) {
   d43b2:	4a46      	ldr	r2, [pc, #280]	; (d44cc <_Z15risingInterruptv+0x160>)
   d43b4:	6813      	ldr	r3, [r2, #0]
   d43b6:	1c59      	adds	r1, r3, #1
   d43b8:	2b04      	cmp	r3, #4
   d43ba:	6011      	str	r1, [r2, #0]
   d43bc:	d9f7      	bls.n	d43ae <_Z15risingInterruptv+0x42>
      lastStateChange = interruptTick;
   d43be:	4b3e      	ldr	r3, [pc, #248]	; (d44b8 <_Z15risingInterruptv+0x14c>)
   d43c0:	681a      	ldr	r2, [r3, #0]
   d43c2:	4b43      	ldr	r3, [pc, #268]	; (d44d0 <_Z15risingInterruptv+0x164>)
   d43c4:	601a      	str	r2, [r3, #0]
      state = HEADER;
   d43c6:	2303      	movs	r3, #3
        state = CRC;
   d43c8:	6023      	str	r3, [r4, #0]
   d43ca:	e7f0      	b.n	d43ae <_Z15risingInterruptv+0x42>
    if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d43cc:	f8df 80e8 	ldr.w	r8, [pc, #232]	; d44b8 <_Z15risingInterruptv+0x14c>
   d43d0:	4d3f      	ldr	r5, [pc, #252]	; (d44d0 <_Z15risingInterruptv+0x164>)
   d43d2:	f8d8 0000 	ldr.w	r0, [r8]
   d43d6:	682b      	ldr	r3, [r5, #0]
   d43d8:	4a3b      	ldr	r2, [pc, #236]	; (d44c8 <_Z15risingInterruptv+0x15c>)
   d43da:	1ac0      	subs	r0, r0, r3
   d43dc:	f8d2 9000 	ldr.w	r9, [r2]
   d43e0:	f001 fb08 	bl	d59f4 <__aeabi_ui2d>
   d43e4:	4606      	mov	r6, r0
   d43e6:	4648      	mov	r0, r9
   d43e8:	460f      	mov	r7, r1
   d43ea:	f001 fb03 	bl	d59f4 <__aeabi_ui2d>
   d43ee:	4b39      	ldr	r3, [pc, #228]	; (d44d4 <_Z15risingInterruptv+0x168>)
   d43f0:	2200      	movs	r2, #0
   d43f2:	f001 fb79 	bl	d5ae8 <__aeabi_dmul>
   d43f6:	4602      	mov	r2, r0
   d43f8:	460b      	mov	r3, r1
   d43fa:	4630      	mov	r0, r6
   d43fc:	4639      	mov	r1, r7
   d43fe:	f001 fde5 	bl	d5fcc <__aeabi_dcmplt>
   d4402:	2800      	cmp	r0, #0
   d4404:	d1d3      	bne.n	d43ae <_Z15risingInterruptv+0x42>
    lastStateChange = interruptTick;
   d4406:	f8d8 3000 	ldr.w	r3, [r8]
   d440a:	602b      	str	r3, [r5, #0]
    registerHeaderData(0);
   d440c:	f7ff fef0 	bl	d41f0 <_Z18registerHeaderDatab>
    if (!headerMask) {
   d4410:	4b31      	ldr	r3, [pc, #196]	; (d44d8 <_Z15risingInterruptv+0x16c>)
   d4412:	881b      	ldrh	r3, [r3, #0]
   d4414:	b29b      	uxth	r3, r3
   d4416:	2b00      	cmp	r3, #0
   d4418:	d1c9      	bne.n	d43ae <_Z15risingInterruptv+0x42>
      state = MESSAGE;
   d441a:	2304      	movs	r3, #4
   d441c:	6023      	str	r3, [r4, #0]
      msgLength = (header & 0b1111111100000000) >> 8;
   d441e:	4b2f      	ldr	r3, [pc, #188]	; (d44dc <_Z15risingInterruptv+0x170>)
   d4420:	4a2f      	ldr	r2, [pc, #188]	; (d44e0 <_Z15risingInterruptv+0x174>)
   d4422:	881b      	ldrh	r3, [r3, #0]
   d4424:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d4428:	7013      	strb	r3, [r2, #0]
   d442a:	e7c0      	b.n	d43ae <_Z15risingInterruptv+0x42>
    if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d442c:	f8df 8088 	ldr.w	r8, [pc, #136]	; d44b8 <_Z15risingInterruptv+0x14c>
   d4430:	4d27      	ldr	r5, [pc, #156]	; (d44d0 <_Z15risingInterruptv+0x164>)
   d4432:	f8d8 0000 	ldr.w	r0, [r8]
   d4436:	682b      	ldr	r3, [r5, #0]
   d4438:	4a23      	ldr	r2, [pc, #140]	; (d44c8 <_Z15risingInterruptv+0x15c>)
   d443a:	1ac0      	subs	r0, r0, r3
   d443c:	f8d2 9000 	ldr.w	r9, [r2]
   d4440:	f001 fad8 	bl	d59f4 <__aeabi_ui2d>
   d4444:	4606      	mov	r6, r0
   d4446:	4648      	mov	r0, r9
   d4448:	460f      	mov	r7, r1
   d444a:	f001 fad3 	bl	d59f4 <__aeabi_ui2d>
   d444e:	4b21      	ldr	r3, [pc, #132]	; (d44d4 <_Z15risingInterruptv+0x168>)
   d4450:	2200      	movs	r2, #0
   d4452:	f001 fb49 	bl	d5ae8 <__aeabi_dmul>
   d4456:	4602      	mov	r2, r0
   d4458:	460b      	mov	r3, r1
   d445a:	4630      	mov	r0, r6
   d445c:	4639      	mov	r1, r7
   d445e:	f001 fdb5 	bl	d5fcc <__aeabi_dcmplt>
   d4462:	2800      	cmp	r0, #0
   d4464:	d1a3      	bne.n	d43ae <_Z15risingInterruptv+0x42>
    lastStateChange = interruptTick;
   d4466:	f8d8 3000 	ldr.w	r3, [r8]
   d446a:	602b      	str	r3, [r5, #0]
    registerBitData(0);
   d446c:	f7ff fed2 	bl	d4214 <_Z15registerBitDatab>
    if (!bitMask) {
   d4470:	491c      	ldr	r1, [pc, #112]	; (d44e4 <_Z15risingInterruptv+0x178>)
   d4472:	780b      	ldrb	r3, [r1, #0]
   d4474:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4478:	2b00      	cmp	r3, #0
   d447a:	d198      	bne.n	d43ae <_Z15risingInterruptv+0x42>
      byteBuffer[byteCount++] = bitBuffer;
   d447c:	4a1a      	ldr	r2, [pc, #104]	; (d44e8 <_Z15risingInterruptv+0x17c>)
   d447e:	481b      	ldr	r0, [pc, #108]	; (d44ec <_Z15risingInterruptv+0x180>)
   d4480:	7813      	ldrb	r3, [r2, #0]
   d4482:	4f1b      	ldr	r7, [pc, #108]	; (d44f0 <_Z15risingInterruptv+0x184>)
   d4484:	b2de      	uxtb	r6, r3
   d4486:	3301      	adds	r3, #1
   d4488:	b2db      	uxtb	r3, r3
   d448a:	7013      	strb	r3, [r2, #0]
   d448c:	7803      	ldrb	r3, [r0, #0]
   d448e:	b2db      	uxtb	r3, r3
   d4490:	55bb      	strb	r3, [r7, r6]
      bitMask = 0b00000001;
   d4492:	2301      	movs	r3, #1
      bitBuffer = 0b00000000;
   d4494:	7005      	strb	r5, [r0, #0]
      bitMask = 0b00000001;
   d4496:	700b      	strb	r3, [r1, #0]
      if (byteCount == msgLength) {
   d4498:	4b11      	ldr	r3, [pc, #68]	; (d44e0 <_Z15risingInterruptv+0x174>)
   d449a:	7812      	ldrb	r2, [r2, #0]
   d449c:	781b      	ldrb	r3, [r3, #0]
   d449e:	429a      	cmp	r2, r3
   d44a0:	d185      	bne.n	d43ae <_Z15risingInterruptv+0x42>
        state = CRC;
   d44a2:	2305      	movs	r3, #5
   d44a4:	e790      	b.n	d43c8 <_Z15risingInterruptv+0x5c>
      Serial.println((char*)byteBuffer);
   d44a6:	f000 fec5 	bl	d5234 <_Z16_fetch_usbserialv>
}
   d44aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
      Serial.println((char*)byteBuffer);
   d44ae:	4910      	ldr	r1, [pc, #64]	; (d44f0 <_Z15risingInterruptv+0x184>)
   d44b0:	f000 bd05 	b.w	d4ebe <_ZN5Print7printlnEPKc>
   d44b4:	2003e63c 	.word	0x2003e63c
   d44b8:	2003e618 	.word	0x2003e618
   d44bc:	2003e630 	.word	0x2003e630
   d44c0:	2003e62c 	.word	0x2003e62c
   d44c4:	2003e634 	.word	0x2003e634
   d44c8:	2003e624 	.word	0x2003e624
   d44cc:	2003e638 	.word	0x2003e638
   d44d0:	2003e61c 	.word	0x2003e61c
   d44d4:	3ff80000 	.word	0x3ff80000
   d44d8:	2003e48e 	.word	0x2003e48e
   d44dc:	2003e616 	.word	0x2003e616
   d44e0:	2003e628 	.word	0x2003e628
   d44e4:	2003e48c 	.word	0x2003e48c
   d44e8:	2003e614 	.word	0x2003e614
   d44ec:	2003e514 	.word	0x2003e514
   d44f0:	2003e515 	.word	0x2003e515

000d44f4 <_Z9interruptv>:
void interrupt() {
   d44f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return SYSTEM_TICK_COUNTER;
   d44f6:	4b23      	ldr	r3, [pc, #140]	; (d4584 <_Z9interruptv+0x90>)
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44f8:	4d23      	ldr	r5, [pc, #140]	; (d4588 <_Z9interruptv+0x94>)
   d44fa:	685a      	ldr	r2, [r3, #4]
  interruptTick = System.ticks();
   d44fc:	4b23      	ldr	r3, [pc, #140]	; (d458c <_Z9interruptv+0x98>)
   d44fe:	4e24      	ldr	r6, [pc, #144]	; (d4590 <_Z9interruptv+0x9c>)
   d4500:	601a      	str	r2, [r3, #0]
   d4502:	782b      	ldrb	r3, [r5, #0]
   d4504:	f3bf 8f5b 	dmb	ish
   d4508:	f013 0f01 	tst.w	r3, #1
   d450c:	d109      	bne.n	d4522 <_Z9interruptv+0x2e>
   d450e:	4628      	mov	r0, r5
   d4510:	f7ff fdc5 	bl	d409e <__cxa_guard_acquire>
   d4514:	b128      	cbz	r0, d4522 <_Z9interruptv+0x2e>
   d4516:	f000 fa1d 	bl	d4954 <HAL_Pin_Map>
   d451a:	6030      	str	r0, [r6, #0]
   d451c:	4628      	mov	r0, r5
   d451e:	f7ff fdc3 	bl	d40a8 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4522:	6833      	ldr	r3, [r6, #0]
   d4524:	f893 4040 	ldrb.w	r4, [r3, #64]	; 0x40
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4528:	782b      	ldrb	r3, [r5, #0]
   d452a:	f3bf 8f5b 	dmb	ish
   d452e:	07da      	lsls	r2, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4530:	ea4f 1744 	mov.w	r7, r4, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4534:	d409      	bmi.n	d454a <_Z9interruptv+0x56>
   d4536:	4814      	ldr	r0, [pc, #80]	; (d4588 <_Z9interruptv+0x94>)
   d4538:	f7ff fdb1 	bl	d409e <__cxa_guard_acquire>
   d453c:	b128      	cbz	r0, d454a <_Z9interruptv+0x56>
   d453e:	f000 fa09 	bl	d4954 <HAL_Pin_Map>
   d4542:	6030      	str	r0, [r6, #0]
   d4544:	4810      	ldr	r0, [pc, #64]	; (d4588 <_Z9interruptv+0x94>)
   d4546:	f7ff fdaf 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d454a:	6833      	ldr	r3, [r6, #0]
   d454c:	f893 4041 	ldrb.w	r4, [r3, #65]	; 0x41
   d4550:	f004 041f 	and.w	r4, r4, #31
   d4554:	433c      	orrs	r4, r7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4556:	a801      	add	r0, sp, #4
   d4558:	9401      	str	r4, [sp, #4]
   d455a:	f7ff fda9 	bl	d40b0 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   d455e:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
    return nrf_gpio_pin_read(nrf_pin);
   d4562:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4564:	a801      	add	r0, sp, #4
   d4566:	f7ff fda3 	bl	d40b0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d456a:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   d456c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4570:	40d3      	lsrs	r3, r2
  if (pinReadFast(INPUT_PIN))
   d4572:	07db      	lsls	r3, r3, #31
   d4574:	d503      	bpl.n	d457e <_Z9interruptv+0x8a>
    risingInterrupt();
   d4576:	f7ff fef9 	bl	d436c <_Z15risingInterruptv>
}
   d457a:	b003      	add	sp, #12
   d457c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fallingInterrupt();
   d457e:	f7ff fe59 	bl	d4234 <_Z16fallingInterruptv>
}
   d4582:	e7fa      	b.n	d457a <_Z9interruptv+0x86>
   d4584:	e0001000 	.word	0xe0001000
   d4588:	2003e500 	.word	0x2003e500
   d458c:	2003e618 	.word	0x2003e618
   d4590:	2003e504 	.word	0x2003e504

000d4594 <_Z17sendManchesterLOWv>:
  sendManchesterHIGH();
  sendManchesterLOW();
  sendManchesterHIGH();
}

void sendManchesterLOW() {
   d4594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4596:	4d34      	ldr	r5, [pc, #208]	; (d4668 <_Z17sendManchesterLOWv+0xd4>)
   d4598:	4c34      	ldr	r4, [pc, #208]	; (d466c <_Z17sendManchesterLOWv+0xd8>)
   d459a:	782b      	ldrb	r3, [r5, #0]
   d459c:	f3bf 8f5b 	dmb	ish
   d45a0:	f013 0f01 	tst.w	r3, #1
   d45a4:	d109      	bne.n	d45ba <_Z17sendManchesterLOWv+0x26>
   d45a6:	4628      	mov	r0, r5
   d45a8:	f7ff fd79 	bl	d409e <__cxa_guard_acquire>
   d45ac:	b128      	cbz	r0, d45ba <_Z17sendManchesterLOWv+0x26>
   d45ae:	f000 f9d1 	bl	d4954 <HAL_Pin_Map>
   d45b2:	6020      	str	r0, [r4, #0]
   d45b4:	4628      	mov	r0, r5
   d45b6:	f7ff fd77 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45ba:	6823      	ldr	r3, [r4, #0]
   d45bc:	f893 3020 	ldrb.w	r3, [r3, #32]
   d45c0:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45c2:	782b      	ldrb	r3, [r5, #0]
   d45c4:	f3bf 8f5b 	dmb	ish
   d45c8:	07d9      	lsls	r1, r3, #31
   d45ca:	d409      	bmi.n	d45e0 <_Z17sendManchesterLOWv+0x4c>
   d45cc:	4826      	ldr	r0, [pc, #152]	; (d4668 <_Z17sendManchesterLOWv+0xd4>)
   d45ce:	f7ff fd66 	bl	d409e <__cxa_guard_acquire>
   d45d2:	b128      	cbz	r0, d45e0 <_Z17sendManchesterLOWv+0x4c>
   d45d4:	f000 f9be 	bl	d4954 <HAL_Pin_Map>
   d45d8:	6020      	str	r0, [r4, #0]
   d45da:	4823      	ldr	r0, [pc, #140]	; (d4668 <_Z17sendManchesterLOWv+0xd4>)
   d45dc:	f7ff fd64 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45e0:	6823      	ldr	r3, [r4, #0]
  pinResetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d45e2:	4f23      	ldr	r7, [pc, #140]	; (d4670 <_Z17sendManchesterLOWv+0xdc>)
   d45e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d45e8:	f003 031f 	and.w	r3, r3, #31
   d45ec:	4333      	orrs	r3, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d45ee:	a801      	add	r0, sp, #4
   d45f0:	9301      	str	r3, [sp, #4]
   d45f2:	f7ff fd5d 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d45f6:	9a01      	ldr	r2, [sp, #4]
   d45f8:	2301      	movs	r3, #1
   d45fa:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d45fc:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   d4600:	6838      	ldr	r0, [r7, #0]
   d4602:	f7ff fdcd 	bl	d41a0 <_ZN11SystemClass10ticksDelayEm>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4606:	782b      	ldrb	r3, [r5, #0]
   d4608:	f3bf 8f5b 	dmb	ish
   d460c:	07da      	lsls	r2, r3, #31
   d460e:	d409      	bmi.n	d4624 <_Z17sendManchesterLOWv+0x90>
   d4610:	4815      	ldr	r0, [pc, #84]	; (d4668 <_Z17sendManchesterLOWv+0xd4>)
   d4612:	f7ff fd44 	bl	d409e <__cxa_guard_acquire>
   d4616:	b128      	cbz	r0, d4624 <_Z17sendManchesterLOWv+0x90>
   d4618:	f000 f99c 	bl	d4954 <HAL_Pin_Map>
   d461c:	6020      	str	r0, [r4, #0]
   d461e:	4812      	ldr	r0, [pc, #72]	; (d4668 <_Z17sendManchesterLOWv+0xd4>)
   d4620:	f7ff fd42 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4624:	6823      	ldr	r3, [r4, #0]
   d4626:	f893 6020 	ldrb.w	r6, [r3, #32]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d462a:	782b      	ldrb	r3, [r5, #0]
   d462c:	f3bf 8f5b 	dmb	ish
   d4630:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4632:	ea4f 1646 	mov.w	r6, r6, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4636:	d409      	bmi.n	d464c <_Z17sendManchesterLOWv+0xb8>
   d4638:	480b      	ldr	r0, [pc, #44]	; (d4668 <_Z17sendManchesterLOWv+0xd4>)
   d463a:	f7ff fd30 	bl	d409e <__cxa_guard_acquire>
   d463e:	b128      	cbz	r0, d464c <_Z17sendManchesterLOWv+0xb8>
   d4640:	f000 f988 	bl	d4954 <HAL_Pin_Map>
   d4644:	6020      	str	r0, [r4, #0]
   d4646:	4808      	ldr	r0, [pc, #32]	; (d4668 <_Z17sendManchesterLOWv+0xd4>)
   d4648:	f7ff fd2e 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d464c:	6823      	ldr	r3, [r4, #0]
   d464e:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
   d4652:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4656:	4330      	orrs	r0, r6
   d4658:	f7ff fd42 	bl	d40e0 <nrf_gpio_pin_set>
  pinSetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d465c:	6838      	ldr	r0, [r7, #0]
   d465e:	f7ff fd9f 	bl	d41a0 <_ZN11SystemClass10ticksDelayEm>
}
   d4662:	b003      	add	sp, #12
   d4664:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4666:	bf00      	nop
   d4668:	2003e500 	.word	0x2003e500
   d466c:	2003e504 	.word	0x2003e504
   d4670:	2003e620 	.word	0x2003e620

000d4674 <_Z18sendManchesterHIGHv>:

void sendManchesterHIGH() {
   d4674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4676:	4d34      	ldr	r5, [pc, #208]	; (d4748 <_Z18sendManchesterHIGHv+0xd4>)
   d4678:	4c34      	ldr	r4, [pc, #208]	; (d474c <_Z18sendManchesterHIGHv+0xd8>)
   d467a:	782b      	ldrb	r3, [r5, #0]
   d467c:	f3bf 8f5b 	dmb	ish
   d4680:	f013 0f01 	tst.w	r3, #1
   d4684:	d109      	bne.n	d469a <_Z18sendManchesterHIGHv+0x26>
   d4686:	4628      	mov	r0, r5
   d4688:	f7ff fd09 	bl	d409e <__cxa_guard_acquire>
   d468c:	b128      	cbz	r0, d469a <_Z18sendManchesterHIGHv+0x26>
   d468e:	f000 f961 	bl	d4954 <HAL_Pin_Map>
   d4692:	6020      	str	r0, [r4, #0]
   d4694:	4628      	mov	r0, r5
   d4696:	f7ff fd07 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d469a:	6823      	ldr	r3, [r4, #0]
   d469c:	f893 6020 	ldrb.w	r6, [r3, #32]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46a0:	782b      	ldrb	r3, [r5, #0]
   d46a2:	f3bf 8f5b 	dmb	ish
   d46a6:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46a8:	ea4f 1646 	mov.w	r6, r6, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46ac:	d409      	bmi.n	d46c2 <_Z18sendManchesterHIGHv+0x4e>
   d46ae:	4826      	ldr	r0, [pc, #152]	; (d4748 <_Z18sendManchesterHIGHv+0xd4>)
   d46b0:	f7ff fcf5 	bl	d409e <__cxa_guard_acquire>
   d46b4:	b128      	cbz	r0, d46c2 <_Z18sendManchesterHIGHv+0x4e>
   d46b6:	f000 f94d 	bl	d4954 <HAL_Pin_Map>
   d46ba:	6020      	str	r0, [r4, #0]
   d46bc:	4822      	ldr	r0, [pc, #136]	; (d4748 <_Z18sendManchesterHIGHv+0xd4>)
   d46be:	f7ff fcf3 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46c2:	6823      	ldr	r3, [r4, #0]
   d46c4:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
   d46c8:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d46cc:	4330      	orrs	r0, r6
  pinSetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d46ce:	4e20      	ldr	r6, [pc, #128]	; (d4750 <_Z18sendManchesterHIGHv+0xdc>)
   d46d0:	f7ff fd06 	bl	d40e0 <nrf_gpio_pin_set>
   d46d4:	6830      	ldr	r0, [r6, #0]
   d46d6:	f7ff fd63 	bl	d41a0 <_ZN11SystemClass10ticksDelayEm>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46da:	782b      	ldrb	r3, [r5, #0]
   d46dc:	f3bf 8f5b 	dmb	ish
   d46e0:	07da      	lsls	r2, r3, #31
   d46e2:	d409      	bmi.n	d46f8 <_Z18sendManchesterHIGHv+0x84>
   d46e4:	4818      	ldr	r0, [pc, #96]	; (d4748 <_Z18sendManchesterHIGHv+0xd4>)
   d46e6:	f7ff fcda 	bl	d409e <__cxa_guard_acquire>
   d46ea:	b128      	cbz	r0, d46f8 <_Z18sendManchesterHIGHv+0x84>
   d46ec:	f000 f932 	bl	d4954 <HAL_Pin_Map>
   d46f0:	6020      	str	r0, [r4, #0]
   d46f2:	4815      	ldr	r0, [pc, #84]	; (d4748 <_Z18sendManchesterHIGHv+0xd4>)
   d46f4:	f7ff fcd8 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46f8:	6823      	ldr	r3, [r4, #0]
   d46fa:	f893 3020 	ldrb.w	r3, [r3, #32]
   d46fe:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4700:	782b      	ldrb	r3, [r5, #0]
   d4702:	f3bf 8f5b 	dmb	ish
   d4706:	07db      	lsls	r3, r3, #31
   d4708:	d409      	bmi.n	d471e <_Z18sendManchesterHIGHv+0xaa>
   d470a:	480f      	ldr	r0, [pc, #60]	; (d4748 <_Z18sendManchesterHIGHv+0xd4>)
   d470c:	f7ff fcc7 	bl	d409e <__cxa_guard_acquire>
   d4710:	b128      	cbz	r0, d471e <_Z18sendManchesterHIGHv+0xaa>
   d4712:	f000 f91f 	bl	d4954 <HAL_Pin_Map>
   d4716:	6020      	str	r0, [r4, #0]
   d4718:	480b      	ldr	r0, [pc, #44]	; (d4748 <_Z18sendManchesterHIGHv+0xd4>)
   d471a:	f7ff fcc5 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d471e:	6823      	ldr	r3, [r4, #0]
   d4720:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d4724:	f003 031f 	and.w	r3, r3, #31
   d4728:	433b      	orrs	r3, r7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d472a:	a801      	add	r0, sp, #4
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	f7ff fcbf 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4732:	9a01      	ldr	r2, [sp, #4]
   d4734:	2301      	movs	r3, #1
   d4736:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   d4738:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d473c:	6830      	ldr	r0, [r6, #0]
   d473e:	f7ff fd2f 	bl	d41a0 <_ZN11SystemClass10ticksDelayEm>
}
   d4742:	b003      	add	sp, #12
   d4744:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4746:	bf00      	nop
   d4748:	2003e500 	.word	0x2003e500
   d474c:	2003e504 	.word	0x2003e504
   d4750:	2003e620 	.word	0x2003e620

000d4754 <_Z9preambulev>:
void preambule() {
   d4754:	b508      	push	{r3, lr}
  sendManchesterLOW();
   d4756:	f7ff ff1d 	bl	d4594 <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d475a:	f7ff ff8b 	bl	d4674 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d475e:	f7ff ff19 	bl	d4594 <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d4762:	f7ff ff87 	bl	d4674 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d4766:	f7ff ff15 	bl	d4594 <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d476a:	f7ff ff83 	bl	d4674 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d476e:	f7ff ff11 	bl	d4594 <_Z17sendManchesterLOWv>
}
   d4772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendManchesterHIGH();
   d4776:	f7ff bf7d 	b.w	d4674 <_Z18sendManchesterHIGHv>

000d477a <_Z17sendManchesterBitb>:

void sendManchesterBit(bool value) {
  if (value) {
   d477a:	b108      	cbz	r0, d4780 <_Z17sendManchesterBitb+0x6>
    sendManchesterHIGH();
   d477c:	f7ff bf7a 	b.w	d4674 <_Z18sendManchesterHIGHv>
    return;
  }
  sendManchesterLOW();
   d4780:	f7ff bf08 	b.w	d4594 <_Z17sendManchesterLOWv>

000d4784 <_Z9sendBytesPhh>:
void sendBytes(uint8_t* bytes, uint8_t length) {
   d4784:	b570      	push	{r4, r5, r6, lr}
   d4786:	4604      	mov	r4, r0
   d4788:	1846      	adds	r6, r0, r1
  for (int i = 0; i < length; ++i) {
   d478a:	42b4      	cmp	r4, r6
   d478c:	d00b      	beq.n	d47a6 <_Z9sendBytesPhh+0x22>
    for (int j = 0; j < 8; ++j) {
   d478e:	2500      	movs	r5, #0
      sendManchesterBit(bytes[i] & (0b00000001 << j));
   d4790:	7820      	ldrb	r0, [r4, #0]
   d4792:	4128      	asrs	r0, r5
   d4794:	f000 0001 	and.w	r0, r0, #1
    for (int j = 0; j < 8; ++j) {
   d4798:	3501      	adds	r5, #1
      sendManchesterBit(bytes[i] & (0b00000001 << j));
   d479a:	f7ff ffee 	bl	d477a <_Z17sendManchesterBitb>
    for (int j = 0; j < 8; ++j) {
   d479e:	2d08      	cmp	r5, #8
   d47a0:	d1f6      	bne.n	d4790 <_Z9sendBytesPhh+0xc>
  for (int i = 0; i < length; ++i) {
   d47a2:	3401      	adds	r4, #1
   d47a4:	e7f1      	b.n	d478a <_Z9sendBytesPhh+0x6>
}
   d47a6:	bd70      	pop	{r4, r5, r6, pc}

000d47a8 <_Z8sendByteh>:
void sendByte(uint8_t byte) {
   d47a8:	b538      	push	{r3, r4, r5, lr}
   d47aa:	4605      	mov	r5, r0
  for (int j = 0; j < 8; ++j) {
   d47ac:	2400      	movs	r4, #0
      sendManchesterBit(byte & (0b00000001 << j));
   d47ae:	fa45 f004 	asr.w	r0, r5, r4
   d47b2:	f000 0001 	and.w	r0, r0, #1
  for (int j = 0; j < 8; ++j) {
   d47b6:	3401      	adds	r4, #1
      sendManchesterBit(byte & (0b00000001 << j));
   d47b8:	f7ff ffdf 	bl	d477a <_Z17sendManchesterBitb>
  for (int j = 0; j < 8; ++j) {
   d47bc:	2c08      	cmp	r4, #8
   d47be:	d1f6      	bne.n	d47ae <_Z8sendByteh+0x6>
}
   d47c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d47c4 <_Z21sendingThreadFunctionPv>:
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d47c4:	4c23      	ldr	r4, [pc, #140]	; (d4854 <_Z21sendingThreadFunctionPv+0x90>)
void sendingThreadFunction(void *param) {
   d47c6:	b580      	push	{r7, lr}
   d47c8:	4627      	mov	r7, r4
		preambule();
   d47ca:	f7ff ffc3 	bl	d4754 <_Z9preambulev>
    sendByte(0b01111110);
   d47ce:	207e      	movs	r0, #126	; 0x7e
   d47d0:	f7ff ffea 	bl	d47a8 <_Z8sendByteh>
    sendByte(0b00000000); //flags
   d47d4:	2000      	movs	r0, #0
   d47d6:	f7ff ffe7 	bl	d47a8 <_Z8sendByteh>
    sendByte(11); //length
   d47da:	200b      	movs	r0, #11
   d47dc:	f7ff ffe4 	bl	d47a8 <_Z8sendByteh>
    sendBytes((uint8_t*)"Un message", 11);
   d47e0:	481d      	ldr	r0, [pc, #116]	; (d4858 <_Z21sendingThreadFunctionPv+0x94>)
   d47e2:	4d1e      	ldr	r5, [pc, #120]	; (d485c <_Z21sendingThreadFunctionPv+0x98>)
   d47e4:	210b      	movs	r1, #11
   d47e6:	f7ff ffcd 	bl	d4784 <_Z9sendBytesPhh>
    sendByte(0b01111110);
   d47ea:	207e      	movs	r0, #126	; 0x7e
   d47ec:	f7ff ffdc 	bl	d47a8 <_Z8sendByteh>
   d47f0:	7823      	ldrb	r3, [r4, #0]
   d47f2:	f3bf 8f5b 	dmb	ish
   d47f6:	f013 0f01 	tst.w	r3, #1
   d47fa:	d109      	bne.n	d4810 <_Z21sendingThreadFunctionPv+0x4c>
   d47fc:	4620      	mov	r0, r4
   d47fe:	f7ff fc4e 	bl	d409e <__cxa_guard_acquire>
   d4802:	b128      	cbz	r0, d4810 <_Z21sendingThreadFunctionPv+0x4c>
   d4804:	f000 f8a6 	bl	d4954 <HAL_Pin_Map>
   d4808:	6028      	str	r0, [r5, #0]
   d480a:	4620      	mov	r0, r4
   d480c:	f7ff fc4c 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4810:	682b      	ldr	r3, [r5, #0]
   d4812:	f893 6020 	ldrb.w	r6, [r3, #32]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4816:	783b      	ldrb	r3, [r7, #0]
   d4818:	f3bf 8f5b 	dmb	ish
   d481c:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d481e:	ea4f 1646 	mov.w	r6, r6, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4822:	d409      	bmi.n	d4838 <_Z21sendingThreadFunctionPv+0x74>
   d4824:	4620      	mov	r0, r4
   d4826:	f7ff fc3a 	bl	d409e <__cxa_guard_acquire>
   d482a:	b128      	cbz	r0, d4838 <_Z21sendingThreadFunctionPv+0x74>
   d482c:	f000 f892 	bl	d4954 <HAL_Pin_Map>
   d4830:	6028      	str	r0, [r5, #0]
   d4832:	4620      	mov	r0, r4
   d4834:	f7ff fc38 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4838:	682b      	ldr	r3, [r5, #0]
   d483a:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
   d483e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4842:	4330      	orrs	r0, r6
   d4844:	f7ff fc4c 	bl	d40e0 <nrf_gpio_pin_set>
    delay(10000);
   d4848:	f242 7010 	movw	r0, #10000	; 0x2710
   d484c:	f000 fb72 	bl	d4f34 <delay>
		preambule();
   d4850:	e7bb      	b.n	d47ca <_Z21sendingThreadFunctionPv+0x6>
   d4852:	bf00      	nop
   d4854:	2003e500 	.word	0x2003e500
   d4858:	000d60d0 	.word	0x000d60d0
   d485c:	2003e504 	.word	0x2003e504

000d4860 <_GLOBAL__sub_I_SystemMode>:
}
   d4860:	b537      	push	{r0, r1, r2, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4862:	4d27      	ldr	r5, [pc, #156]	; (d4900 <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   d4864:	4b27      	ldr	r3, [pc, #156]	; (d4904 <_GLOBAL__sub_I_SystemMode+0xa4>)
   d4866:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4868:	2400      	movs	r4, #0
        set_system_mode(mode);
   d486a:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   d486c:	602c      	str	r4, [r5, #0]
   d486e:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4870:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4872:	f000 f9b7 	bl	d4be4 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4876:	4a24      	ldr	r2, [pc, #144]	; (d4908 <_GLOBAL__sub_I_SystemMode+0xa8>)
   d4878:	4924      	ldr	r1, [pc, #144]	; (d490c <_GLOBAL__sub_I_SystemMode+0xac>)
   d487a:	4628      	mov	r0, r5
   d487c:	f000 ff6a 	bl	d5754 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4880:	4621      	mov	r1, r4
   d4882:	2001      	movs	r0, #1
   d4884:	f000 f9be 	bl	d4c04 <system_thread_set_state>
        : d_(new(std::nothrow) Data)
   d4888:	4921      	ldr	r1, [pc, #132]	; (d4910 <_GLOBAL__sub_I_SystemMode+0xb0>)
   d488a:	2014      	movs	r0, #20
   d488c:	f000 ff69 	bl	d5762 <_ZnwjRKSt9nothrow_t>
   d4890:	b128      	cbz	r0, d489e <_GLOBAL__sub_I_SystemMode+0x3e>
            exited(false) {
   d4892:	e9c0 4400 	strd	r4, r4, [r0]
   d4896:	e9c0 4402 	strd	r4, r4, [r0, #8]
   d489a:	7404      	strb	r4, [r0, #16]
   d489c:	7444      	strb	r4, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d489e:	4c1d      	ldr	r4, [pc, #116]	; (d4914 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d48a0:	6020      	str	r0, [r4, #0]
        if (!d_) {
   d48a2:	b1a8      	cbz	r0, d48d0 <_GLOBAL__sub_I_SystemMode+0x70>
        d_->func = function;
   d48a4:	4b1c      	ldr	r3, [pc, #112]	; (d4918 <_GLOBAL__sub_I_SystemMode+0xb8>)
   d48a6:	6083      	str	r3, [r0, #8]
        d_->func_param = function_param;
   d48a8:	2300      	movs	r3, #0
   d48aa:	60c3      	str	r3, [r0, #12]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d48ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d48b0:	e9cd 0300 	strd	r0, r3, [sp]
   d48b4:	4919      	ldr	r1, [pc, #100]	; (d491c <_GLOBAL__sub_I_SystemMode+0xbc>)
   d48b6:	4b1a      	ldr	r3, [pc, #104]	; (d4920 <_GLOBAL__sub_I_SystemMode+0xc0>)
   d48b8:	2202      	movs	r2, #2
   d48ba:	3004      	adds	r0, #4
   d48bc:	f000 f88a 	bl	d49d4 <os_thread_create>
   d48c0:	b930      	cbnz	r0, d48d0 <_GLOBAL__sub_I_SystemMode+0x70>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d48c2:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
   d48c4:	7c1b      	ldrb	r3, [r3, #16]
   d48c6:	b94b      	cbnz	r3, d48dc <_GLOBAL__sub_I_SystemMode+0x7c>
            HAL_Delay_Milliseconds(1);
   d48c8:	2001      	movs	r0, #1
   d48ca:	f000 f86b 	bl	d49a4 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d48ce:	e7f8      	b.n	d48c2 <_GLOBAL__sub_I_SystemMode+0x62>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d48d0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d48d2:	2300      	movs	r3, #0
   d48d4:	6023      	str	r3, [r4, #0]
	if (__p != pointer())
   d48d6:	b108      	cbz	r0, d48dc <_GLOBAL__sub_I_SystemMode+0x7c>
      operator()(_Tp* __ptr) const
   d48d8:	f7ff fc2f 	bl	d413a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
Thread thread("sendingThread", sendingThreadFunction);
   d48dc:	4a0a      	ldr	r2, [pc, #40]	; (d4908 <_GLOBAL__sub_I_SystemMode+0xa8>)
   d48de:	4911      	ldr	r1, [pc, #68]	; (d4924 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d48e0:	480c      	ldr	r0, [pc, #48]	; (d4914 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d48e2:	f000 ff37 	bl	d5754 <__aeabi_atexit>
        return SYSTEM_US_TICKS;
   d48e6:	4b10      	ldr	r3, [pc, #64]	; (d4928 <_GLOBAL__sub_I_SystemMode+0xc8>)
   d48e8:	4a10      	ldr	r2, [pc, #64]	; (d492c <_GLOBAL__sub_I_SystemMode+0xcc>)
   d48ea:	681b      	ldr	r3, [r3, #0]
   d48ec:	fbb3 f2f2 	udiv	r2, r3, r2
uint32_t manchesterTicks = System.ticksPerMicrosecond() * MANCHESTER_TIME;
   d48f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d48f4:	4353      	muls	r3, r2
   d48f6:	4a0e      	ldr	r2, [pc, #56]	; (d4930 <_GLOBAL__sub_I_SystemMode+0xd0>)
   d48f8:	6013      	str	r3, [r2, #0]
}
   d48fa:	b003      	add	sp, #12
   d48fc:	bd30      	pop	{r4, r5, pc}
   d48fe:	bf00      	nop
   d4900:	2003e508 	.word	0x2003e508
   d4904:	ffff0000 	.word	0xffff0000
   d4908:	2003e4fc 	.word	0x2003e4fc
   d490c:	000d412b 	.word	0x000d412b
   d4910:	000d625c 	.word	0x000d625c
   d4914:	2003e640 	.word	0x2003e640
   d4918:	000d47c5 	.word	0x000d47c5
   d491c:	000d60db 	.word	0x000d60db
   d4920:	000d40fb 	.word	0x000d40fb
   d4924:	000d4163 	.word	0x000d4163
   d4928:	2003e494 	.word	0x2003e494
   d492c:	000f4240 	.word	0x000f4240
   d4930:	2003e620 	.word	0x2003e620

000d4934 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <netdb_freeaddrinfo+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	689b      	ldr	r3, [r3, #8]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030268 	.word	0x00030268

000d4944 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <netdb_getaddrinfo+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	68db      	ldr	r3, [r3, #12]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030268 	.word	0x00030268

000d4954 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <HAL_Pin_Map+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	681b      	ldr	r3, [r3, #0]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	0003022c 	.word	0x0003022c

000d4964 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <HAL_Pin_Mode+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	689b      	ldr	r3, [r3, #8]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	0003022c 	.word	0x0003022c

000d4974 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <HAL_Interrupts_Attach+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	699b      	ldr	r3, [r3, #24]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	0003022c 	.word	0x0003022c

000d4984 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <HAL_Interrupts_Detach+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	69db      	ldr	r3, [r3, #28]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	0003022c 	.word	0x0003022c

000d4994 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <HAL_RNG_GetRandomNumber+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	685b      	ldr	r3, [r3, #4]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030218 	.word	0x00030218

000d49a4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <HAL_Delay_Milliseconds+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	689b      	ldr	r3, [r3, #8]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030218 	.word	0x00030218

000d49b4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <HAL_Delay_Microseconds+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	68db      	ldr	r3, [r3, #12]
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030218 	.word	0x00030218

000d49c4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	695b      	ldr	r3, [r3, #20]
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030218 	.word	0x00030218

000d49d4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <os_thread_create+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	685b      	ldr	r3, [r3, #4]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030248 	.word	0x00030248

000d49e4 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <os_thread_is_current+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	689b      	ldr	r3, [r3, #8]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030248 	.word	0x00030248

000d49f4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <os_thread_join+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	691b      	ldr	r3, [r3, #16]
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030248 	.word	0x00030248

000d4a04 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <os_thread_cleanup+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	695b      	ldr	r3, [r3, #20]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030248 	.word	0x00030248

000d4a14 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <os_mutex_recursive_create+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030248 	.word	0x00030248

000d4a24 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <os_mutex_recursive_destroy+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030248 	.word	0x00030248

000d4a34 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <os_thread_exit+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030248 	.word	0x00030248

000d4a44 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <inet_inet_ntop+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	695b      	ldr	r3, [r3, #20]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030264 	.word	0x00030264

000d4a54 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <hal_usart_init+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	681b      	ldr	r3, [r3, #0]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003023c 	.word	0x0003023c

000d4a64 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <hal_usart_write+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	68db      	ldr	r3, [r3, #12]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003023c 	.word	0x0003023c

000d4a74 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <hal_usart_available+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	691b      	ldr	r3, [r3, #16]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003023c 	.word	0x0003023c

000d4a84 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <hal_usart_read+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	695b      	ldr	r3, [r3, #20]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003023c 	.word	0x0003023c

000d4a94 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <hal_usart_peek+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	699b      	ldr	r3, [r3, #24]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003023c 	.word	0x0003023c

000d4aa4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <hal_usart_flush+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	69db      	ldr	r3, [r3, #28]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	0003023c 	.word	0x0003023c

000d4ab4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <hal_usart_is_enabled+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	6a1b      	ldr	r3, [r3, #32]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	0003023c 	.word	0x0003023c

000d4ac4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <hal_usart_available_data_for_write+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	0003023c 	.word	0x0003023c

000d4ad4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <hal_i2c_write+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	6a1b      	ldr	r3, [r3, #32]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	00030228 	.word	0x00030228

000d4ae4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <hal_i2c_available+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	00030228 	.word	0x00030228

000d4af4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <hal_i2c_read+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030228 	.word	0x00030228

000d4b04 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <hal_i2c_peek+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030228 	.word	0x00030228

000d4b14 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <hal_i2c_flush+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	00030228 	.word	0x00030228

000d4b24 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <hal_i2c_is_enabled+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030228 	.word	0x00030228

000d4b34 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <hal_i2c_init+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030228 	.word	0x00030228

000d4b44 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <hal_spi_init+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	69db      	ldr	r3, [r3, #28]
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030230 	.word	0x00030230

000d4b54 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <hal_spi_is_enabled+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	6a1b      	ldr	r3, [r3, #32]
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030230 	.word	0x00030230

000d4b64 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <HAL_USB_USART_Init+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	681b      	ldr	r3, [r3, #0]
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	0003024c 	.word	0x0003024c

000d4b74 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <HAL_USB_USART_Begin+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	685b      	ldr	r3, [r3, #4]
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	0003024c 	.word	0x0003024c

000d4b84 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <HAL_USB_USART_Available_Data+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	691b      	ldr	r3, [r3, #16]
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	0003024c 	.word	0x0003024c

000d4b94 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	695b      	ldr	r3, [r3, #20]
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	0003024c 	.word	0x0003024c

000d4ba4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <HAL_USB_USART_Receive_Data+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	699b      	ldr	r3, [r3, #24]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	0003024c 	.word	0x0003024c

000d4bb4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <HAL_USB_USART_Send_Data+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	69db      	ldr	r3, [r3, #28]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	0003024c 	.word	0x0003024c

000d4bc4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <HAL_USB_USART_Flush_Data+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	6a1b      	ldr	r3, [r3, #32]
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	0003024c 	.word	0x0003024c

000d4bd4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <panic_+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	00030260 	.word	0x00030260

000d4be4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <set_system_mode+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	685b      	ldr	r3, [r3, #4]
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	00030220 	.word	0x00030220

000d4bf4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <system_delay_ms+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	695b      	ldr	r3, [r3, #20]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	00030220 	.word	0x00030220

000d4c04 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <system_thread_set_state+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	00030220 	.word	0x00030220

000d4c14 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b03      	ldr	r3, [pc, #12]	; (d4c24 <system_ctrl_set_app_request_handler+0x10>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4c1e:	9301      	str	r3, [sp, #4]
   d4c20:	bd08      	pop	{r3, pc}
   d4c22:	0000      	.short	0x0000
   d4c24:	00030220 	.word	0x00030220

000d4c28 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b03      	ldr	r3, [pc, #12]	; (d4c38 <system_ctrl_set_result+0x10>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4c32:	9301      	str	r3, [sp, #4]
   d4c34:	bd08      	pop	{r3, pc}
   d4c36:	0000      	.short	0x0000
   d4c38:	00030220 	.word	0x00030220

000d4c3c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <network_connect+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	685b      	ldr	r3, [r3, #4]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030240 	.word	0x00030240

000d4c4c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <network_connecting+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	689b      	ldr	r3, [r3, #8]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030240 	.word	0x00030240

000d4c5c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <network_disconnect+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	68db      	ldr	r3, [r3, #12]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030240 	.word	0x00030240

000d4c6c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <network_ready+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	691b      	ldr	r3, [r3, #16]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030240 	.word	0x00030240

000d4c7c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <network_on+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	695b      	ldr	r3, [r3, #20]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030240 	.word	0x00030240

000d4c8c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <network_off+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	699b      	ldr	r3, [r3, #24]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030240 	.word	0x00030240

000d4c9c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <network_listen+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	69db      	ldr	r3, [r3, #28]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030240 	.word	0x00030240

000d4cac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <network_listening+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	6a1b      	ldr	r3, [r3, #32]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030240 	.word	0x00030240

000d4cbc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <network_set_listen_timeout+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030240 	.word	0x00030240

000d4ccc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <network_get_listen_timeout+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030240 	.word	0x00030240

000d4cdc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <network_is_on+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030240 	.word	0x00030240

000d4cec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <network_is_off+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030240 	.word	0x00030240

000d4cfc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030244 	.word	0x00030244

000d4d0c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <malloc+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	681b      	ldr	r3, [r3, #0]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	0003021c 	.word	0x0003021c

000d4d1c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <free+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	685b      	ldr	r3, [r3, #4]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	0003021c 	.word	0x0003021c

000d4d2c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <abort+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	0003021c 	.word	0x0003021c

000d4d3c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <newlib_impure_ptr_callback+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	0003021c 	.word	0x0003021c

000d4d4c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d4c:	2200      	movs	r2, #0
   d4d4e:	6840      	ldr	r0, [r0, #4]
   d4d50:	4611      	mov	r1, r2
   d4d52:	f7ff bfab 	b.w	d4cac <network_listening>

000d4d56 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4d56:	2200      	movs	r2, #0
   d4d58:	6840      	ldr	r0, [r0, #4]
   d4d5a:	4611      	mov	r1, r2
   d4d5c:	f7ff bfb6 	b.w	d4ccc <network_get_listen_timeout>

000d4d60 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4d60:	6840      	ldr	r0, [r0, #4]
   d4d62:	2200      	movs	r2, #0
   d4d64:	f7ff bfaa 	b.w	d4cbc <network_set_listen_timeout>

000d4d68 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d68:	6840      	ldr	r0, [r0, #4]
   d4d6a:	2200      	movs	r2, #0
   d4d6c:	f081 0101 	eor.w	r1, r1, #1
   d4d70:	f7ff bf94 	b.w	d4c9c <network_listen>

000d4d74 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4d74:	2300      	movs	r3, #0
   d4d76:	6840      	ldr	r0, [r0, #4]
   d4d78:	461a      	mov	r2, r3
   d4d7a:	4619      	mov	r1, r3
   d4d7c:	f7ff bf86 	b.w	d4c8c <network_off>

000d4d80 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4d80:	2300      	movs	r3, #0
   d4d82:	6840      	ldr	r0, [r0, #4]
   d4d84:	461a      	mov	r2, r3
   d4d86:	4619      	mov	r1, r3
   d4d88:	f7ff bf78 	b.w	d4c7c <network_on>

000d4d8c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4d8c:	2200      	movs	r2, #0
   d4d8e:	6840      	ldr	r0, [r0, #4]
   d4d90:	4611      	mov	r1, r2
   d4d92:	f7ff bf6b 	b.w	d4c6c <network_ready>

000d4d96 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4d96:	2200      	movs	r2, #0
   d4d98:	6840      	ldr	r0, [r0, #4]
   d4d9a:	4611      	mov	r1, r2
   d4d9c:	f7ff bf56 	b.w	d4c4c <network_connecting>

000d4da0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4da0:	6840      	ldr	r0, [r0, #4]
   d4da2:	2200      	movs	r2, #0
   d4da4:	2102      	movs	r1, #2
   d4da6:	f7ff bf59 	b.w	d4c5c <network_disconnect>

000d4daa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4daa:	2300      	movs	r3, #0
   d4dac:	6840      	ldr	r0, [r0, #4]
   d4dae:	461a      	mov	r2, r3
   d4db0:	f7ff bf44 	b.w	d4c3c <network_connect>

000d4db4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4db4:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4db6:	2203      	movs	r2, #3
   d4db8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4dba:	4a02      	ldr	r2, [pc, #8]	; (d4dc4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4dbc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4dbe:	4770      	bx	lr
   d4dc0:	2003e644 	.word	0x2003e644
   d4dc4:	000d60f4 	.word	0x000d60f4

000d4dc8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4dc8:	b510      	push	{r4, lr}
   d4dca:	4604      	mov	r4, r0
   d4dcc:	4608      	mov	r0, r1
{
    _spi = spi;
   d4dce:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4dd0:	f7ff feb8 	bl	d4b44 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4dd4:	2300      	movs	r3, #0
   d4dd6:	6063      	str	r3, [r4, #4]
}
   d4dd8:	4620      	mov	r0, r4
   d4dda:	bd10      	pop	{r4, pc}

000d4ddc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4ddc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4dde:	4b09      	ldr	r3, [pc, #36]	; (d4e04 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4de0:	4c09      	ldr	r4, [pc, #36]	; (d4e08 <_GLOBAL__sub_I_System+0x2c>)
   d4de2:	2202      	movs	r2, #2
   d4de4:	2000      	movs	r0, #0
   d4de6:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4de8:	4b08      	ldr	r3, [pc, #32]	; (d4e0c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4dea:	6020      	str	r0, [r4, #0]
   d4dec:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4dee:	71a0      	strb	r0, [r4, #6]
   d4df0:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4df2:	f7ff fef7 	bl	d4be4 <set_system_mode>
SystemClass System;
   d4df6:	4620      	mov	r0, r4
   d4df8:	4a05      	ldr	r2, [pc, #20]	; (d4e10 <_GLOBAL__sub_I_System+0x34>)
   d4dfa:	4906      	ldr	r1, [pc, #24]	; (d4e14 <_GLOBAL__sub_I_System+0x38>)
   d4dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4e00:	f000 bca8 	b.w	d5754 <__aeabi_atexit>
   d4e04:	2003e658 	.word	0x2003e658
   d4e08:	2003e64c 	.word	0x2003e64c
   d4e0c:	ffff0000 	.word	0xffff0000
   d4e10:	2003e4fc 	.word	0x2003e4fc
   d4e14:	000d412b 	.word	0x000d412b

000d4e18 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4e18:	b510      	push	{r4, lr}
   d4e1a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4e1c:	6800      	ldr	r0, [r0, #0]
   d4e1e:	b108      	cbz	r0, d4e24 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4e20:	f7ff fe00 	bl	d4a24 <os_mutex_recursive_destroy>
    }
   d4e24:	4620      	mov	r0, r4
   d4e26:	bd10      	pop	{r4, pc}

000d4e28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4e28:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4e2a:	4c06      	ldr	r4, [pc, #24]	; (d4e44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4e2c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4e2e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4e30:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4e32:	f7ff fdef 	bl	d4a14 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4e36:	4620      	mov	r0, r4
   d4e38:	4a03      	ldr	r2, [pc, #12]	; (d4e48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4e3a:	4904      	ldr	r1, [pc, #16]	; (d4e4c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4e40:	f000 bc88 	b.w	d5754 <__aeabi_atexit>
   d4e44:	2003e65c 	.word	0x2003e65c
   d4e48:	2003e4fc 	.word	0x2003e4fc
   d4e4c:	000d4e19 	.word	0x000d4e19

000d4e50 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e52:	4606      	mov	r6, r0
   d4e54:	460d      	mov	r5, r1
  size_t n = 0;
   d4e56:	188f      	adds	r7, r1, r2
   d4e58:	2400      	movs	r4, #0
  while (size--) {
   d4e5a:	42bd      	cmp	r5, r7
   d4e5c:	d00c      	beq.n	d4e78 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4e5e:	6833      	ldr	r3, [r6, #0]
   d4e60:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e64:	689b      	ldr	r3, [r3, #8]
   d4e66:	4630      	mov	r0, r6
   d4e68:	4798      	blx	r3
     if (chunk>=0)
   d4e6a:	1e03      	subs	r3, r0, #0
   d4e6c:	db01      	blt.n	d4e72 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4e6e:	441c      	add	r4, r3
  while (size--) {
   d4e70:	e7f3      	b.n	d4e5a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4e72:	2c00      	cmp	r4, #0
   d4e74:	bf08      	it	eq
   d4e76:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4e78:	4620      	mov	r0, r4
   d4e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e7c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4e7c:	b513      	push	{r0, r1, r4, lr}
   d4e7e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4e80:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4e82:	b159      	cbz	r1, d4e9c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4e84:	9101      	str	r1, [sp, #4]
   d4e86:	f001 f911 	bl	d60ac <strlen>
   d4e8a:	6823      	ldr	r3, [r4, #0]
   d4e8c:	9901      	ldr	r1, [sp, #4]
   d4e8e:	68db      	ldr	r3, [r3, #12]
   d4e90:	4602      	mov	r2, r0
   d4e92:	4620      	mov	r0, r4
    }
   d4e94:	b002      	add	sp, #8
   d4e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4e9a:	4718      	bx	r3
    }
   d4e9c:	b002      	add	sp, #8
   d4e9e:	bd10      	pop	{r4, pc}

000d4ea0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4ea0:	6803      	ldr	r3, [r0, #0]
   d4ea2:	689b      	ldr	r3, [r3, #8]
   d4ea4:	4718      	bx	r3

000d4ea6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4ea6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4ea8:	210d      	movs	r1, #13
{
   d4eaa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4eac:	f7ff fff8 	bl	d4ea0 <_ZN5Print5printEc>
  n += print('\n');
   d4eb0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4eb2:	4604      	mov	r4, r0
  n += print('\n');
   d4eb4:	4628      	mov	r0, r5
   d4eb6:	f7ff fff3 	bl	d4ea0 <_ZN5Print5printEc>
  return n;
}
   d4eba:	4420      	add	r0, r4
   d4ebc:	bd38      	pop	{r3, r4, r5, pc}

000d4ebe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4ebe:	b538      	push	{r3, r4, r5, lr}
   d4ec0:	4605      	mov	r5, r0
  return write(str);
   d4ec2:	f7ff ffdb 	bl	d4e7c <_ZN5Print5writeEPKc>
   d4ec6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4ec8:	4628      	mov	r0, r5
   d4eca:	f7ff ffec 	bl	d4ea6 <_ZN5Print7printlnEv>
  return n;
}
   d4ece:	4420      	add	r0, r4
   d4ed0:	bd38      	pop	{r3, r4, r5, pc}

000d4ed2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4ed2:	b530      	push	{r4, r5, lr}
   d4ed4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ed6:	2300      	movs	r3, #0
   d4ed8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4edc:	2a01      	cmp	r2, #1
   d4ede:	bf98      	it	ls
   d4ee0:	220a      	movls	r2, #10
   d4ee2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4ee4:	460d      	mov	r5, r1
   d4ee6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4eea:	fb01 5312 	mls	r3, r1, r2, r5
   d4eee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4ef2:	2b09      	cmp	r3, #9
   d4ef4:	bf94      	ite	ls
   d4ef6:	3330      	addls	r3, #48	; 0x30
   d4ef8:	3337      	addhi	r3, #55	; 0x37
   d4efa:	b2db      	uxtb	r3, r3
  } while(n);
   d4efc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4efe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4f02:	d9ef      	bls.n	d4ee4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4f04:	4621      	mov	r1, r4
   d4f06:	f7ff ffb9 	bl	d4e7c <_ZN5Print5writeEPKc>
}
   d4f0a:	b00b      	add	sp, #44	; 0x2c
   d4f0c:	bd30      	pop	{r4, r5, pc}
	...

000d4f10 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f10:	4b01      	ldr	r3, [pc, #4]	; (d4f18 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f12:	4a02      	ldr	r2, [pc, #8]	; (d4f1c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f14:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4f16:	4770      	bx	lr
   d4f18:	2003e660 	.word	0x2003e660
   d4f1c:	000d6128 	.word	0x000d6128

000d4f20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4f20:	4b02      	ldr	r3, [pc, #8]	; (d4f2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4f22:	681a      	ldr	r2, [r3, #0]
   d4f24:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4f26:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4f28:	4770      	bx	lr
   d4f2a:	bf00      	nop
   d4f2c:	2003e490 	.word	0x2003e490
   d4f30:	2003e664 	.word	0x2003e664

000d4f34 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4f34:	2100      	movs	r1, #0
   d4f36:	f7ff be5d 	b.w	d4bf4 <system_delay_ms>

000d4f3a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4f3a:	b510      	push	{r4, lr}
      if (_M_manager)
   d4f3c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4f3e:	4604      	mov	r4, r0
      if (_M_manager)
   d4f40:	b113      	cbz	r3, d4f48 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f42:	2203      	movs	r2, #3
   d4f44:	4601      	mov	r1, r0
   d4f46:	4798      	blx	r3
    }
   d4f48:	4620      	mov	r0, r4
   d4f4a:	bd10      	pop	{r4, pc}

000d4f4c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4f4c:	b510      	push	{r4, lr}
   d4f4e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d4f50:	f7ff fff3 	bl	d4f3a <_ZNSt14_Function_baseD1Ev>
   d4f54:	4620      	mov	r0, r4
   d4f56:	bd10      	pop	{r4, pc}

000d4f58 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4f58:	4803      	ldr	r0, [pc, #12]	; (d4f68 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4f5a:	4a04      	ldr	r2, [pc, #16]	; (d4f6c <_GLOBAL__sub_I_RGB+0x14>)
   d4f5c:	4904      	ldr	r1, [pc, #16]	; (d4f70 <_GLOBAL__sub_I_RGB+0x18>)
   d4f5e:	2300      	movs	r3, #0
   d4f60:	6083      	str	r3, [r0, #8]
   d4f62:	f000 bbf7 	b.w	d5754 <__aeabi_atexit>
   d4f66:	bf00      	nop
   d4f68:	2003e668 	.word	0x2003e668
   d4f6c:	2003e4fc 	.word	0x2003e4fc
   d4f70:	000d4f4d 	.word	0x000d4f4d

000d4f74 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4f74:	4b01      	ldr	r3, [pc, #4]	; (d4f7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4f76:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4f78:	4770      	bx	lr
   d4f7a:	bf00      	nop
   d4f7c:	2003e498 	.word	0x2003e498

000d4f80 <serialEventRun>:
{
   d4f80:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4f82:	4b0b      	ldr	r3, [pc, #44]	; (d4fb0 <serialEventRun+0x30>)
   d4f84:	b143      	cbz	r3, d4f98 <serialEventRun+0x18>
   d4f86:	f000 f955 	bl	d5234 <_Z16_fetch_usbserialv>
   d4f8a:	6803      	ldr	r3, [r0, #0]
   d4f8c:	691b      	ldr	r3, [r3, #16]
   d4f8e:	4798      	blx	r3
   d4f90:	2800      	cmp	r0, #0
   d4f92:	dd01      	ble.n	d4f98 <serialEventRun+0x18>
        serialEvent();
   d4f94:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4f98:	4b06      	ldr	r3, [pc, #24]	; (d4fb4 <serialEventRun+0x34>)
   d4f9a:	b143      	cbz	r3, d4fae <serialEventRun+0x2e>
   d4f9c:	f000 f9f4 	bl	d5388 <_Z22__fetch_global_Serial1v>
   d4fa0:	6803      	ldr	r3, [r0, #0]
   d4fa2:	691b      	ldr	r3, [r3, #16]
   d4fa4:	4798      	blx	r3
   d4fa6:	2800      	cmp	r0, #0
   d4fa8:	dd01      	ble.n	d4fae <serialEventRun+0x2e>
        serialEvent1();
   d4faa:	f3af 8000 	nop.w
}
   d4fae:	bd08      	pop	{r3, pc}
	...

000d4fb8 <_post_loop>:
{
   d4fb8:	b508      	push	{r3, lr}
	serialEventRun();
   d4fba:	f7ff ffe1 	bl	d4f80 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4fbe:	f7ff fd01 	bl	d49c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4fc2:	4b01      	ldr	r3, [pc, #4]	; (d4fc8 <_post_loop+0x10>)
   d4fc4:	6018      	str	r0, [r3, #0]
}
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	2003e7d4 	.word	0x2003e7d4

000d4fcc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4fcc:	4802      	ldr	r0, [pc, #8]	; (d4fd8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4fce:	4a03      	ldr	r2, [pc, #12]	; (d4fdc <_Z33system_initialize_user_backup_ramv+0x10>)
   d4fd0:	4903      	ldr	r1, [pc, #12]	; (d4fe0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4fd2:	1a12      	subs	r2, r2, r0
   d4fd4:	f001 b830 	b.w	d6038 <memcpy>
   d4fd8:	2003f400 	.word	0x2003f400
   d4fdc:	2003f404 	.word	0x2003f404
   d4fe0:	000d6290 	.word	0x000d6290

000d4fe4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4fe4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4fe6:	2300      	movs	r3, #0
   d4fe8:	9300      	str	r3, [sp, #0]
   d4fea:	461a      	mov	r2, r3
   d4fec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4ff0:	f7ff fe1a 	bl	d4c28 <system_ctrl_set_result>
}
   d4ff4:	b003      	add	sp, #12
   d4ff6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4ffc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4ffc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4ffe:	8843      	ldrh	r3, [r0, #2]
   d5000:	2b0a      	cmp	r3, #10
   d5002:	d008      	beq.n	d5016 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5004:	2b50      	cmp	r3, #80	; 0x50
   d5006:	d10b      	bne.n	d5020 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5008:	4b09      	ldr	r3, [pc, #36]	; (d5030 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d500a:	681b      	ldr	r3, [r3, #0]
   d500c:	b14b      	cbz	r3, d5022 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d500e:	b003      	add	sp, #12
   d5010:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5014:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5016:	f7ff ffe5 	bl	d4fe4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d501a:	b003      	add	sp, #12
   d501c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5020:	2300      	movs	r3, #0
   d5022:	9300      	str	r3, [sp, #0]
   d5024:	461a      	mov	r2, r3
   d5026:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d502a:	f7ff fdfd 	bl	d4c28 <system_ctrl_set_result>
}
   d502e:	e7f4      	b.n	d501a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5030:	2003e67c 	.word	0x2003e67c

000d5034 <module_user_init_hook>:
{
   d5034:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5036:	4c12      	ldr	r4, [pc, #72]	; (d5080 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5038:	4812      	ldr	r0, [pc, #72]	; (d5084 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d503a:	4d13      	ldr	r5, [pc, #76]	; (d5088 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d503c:	2100      	movs	r1, #0
   d503e:	f7ff fe7d 	bl	d4d3c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5042:	6823      	ldr	r3, [r4, #0]
   d5044:	42ab      	cmp	r3, r5
   d5046:	4b11      	ldr	r3, [pc, #68]	; (d508c <module_user_init_hook+0x58>)
   d5048:	bf0c      	ite	eq
   d504a:	2201      	moveq	r2, #1
   d504c:	2200      	movne	r2, #0
   d504e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5050:	d002      	beq.n	d5058 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5052:	f7ff ffbb 	bl	d4fcc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5056:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5058:	f7ff fc9c 	bl	d4994 <HAL_RNG_GetRandomNumber>
   d505c:	4604      	mov	r4, r0
    srand(seed);
   d505e:	f001 f801 	bl	d6064 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5062:	4b0b      	ldr	r3, [pc, #44]	; (d5090 <module_user_init_hook+0x5c>)
   d5064:	b113      	cbz	r3, d506c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5066:	4620      	mov	r0, r4
   d5068:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d506c:	2100      	movs	r1, #0
   d506e:	4808      	ldr	r0, [pc, #32]	; (d5090 <module_user_init_hook+0x5c>)
   d5070:	f7ff fe44 	bl	d4cfc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5078:	4806      	ldr	r0, [pc, #24]	; (d5094 <module_user_init_hook+0x60>)
   d507a:	2100      	movs	r1, #0
   d507c:	f7ff bdca 	b.w	d4c14 <system_ctrl_set_app_request_handler>
   d5080:	2003f400 	.word	0x2003f400
   d5084:	000d4f75 	.word	0x000d4f75
   d5088:	9a271c1e 	.word	0x9a271c1e
   d508c:	2003e678 	.word	0x2003e678
   d5090:	00000000 	.word	0x00000000
   d5094:	000d4ffd 	.word	0x000d4ffd

000d5098 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5098:	4770      	bx	lr

000d509a <_ZN9IPAddressD0Ev>:
   d509a:	b510      	push	{r4, lr}
   d509c:	2118      	movs	r1, #24
   d509e:	4604      	mov	r4, r0
   d50a0:	f000 fb5d 	bl	d575e <_ZdlPvj>
   d50a4:	4620      	mov	r0, r4
   d50a6:	bd10      	pop	{r4, pc}

000d50a8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d50a8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d50aa:	7d03      	ldrb	r3, [r0, #20]
   d50ac:	2b06      	cmp	r3, #6
{
   d50ae:	b08d      	sub	sp, #52	; 0x34
   d50b0:	460e      	mov	r6, r1
   d50b2:	f100 0704 	add.w	r7, r0, #4
   d50b6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d50ba:	d012      	beq.n	d50e2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d50bc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d50c0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d50c4:	220a      	movs	r2, #10
   d50c6:	4630      	mov	r0, r6
   d50c8:	f7ff ff03 	bl	d4ed2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d50cc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d50ce:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d50d0:	d019      	beq.n	d5106 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d50d2:	2c00      	cmp	r4, #0
   d50d4:	d0f4      	beq.n	d50c0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d50d6:	212e      	movs	r1, #46	; 0x2e
   d50d8:	4630      	mov	r0, r6
   d50da:	f7ff fee1 	bl	d4ea0 <_ZN5Print5printEc>
   d50de:	4404      	add	r4, r0
   d50e0:	e7ee      	b.n	d50c0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d50e2:	232f      	movs	r3, #47	; 0x2f
   d50e4:	466a      	mov	r2, sp
   d50e6:	4639      	mov	r1, r7
   d50e8:	200a      	movs	r0, #10
		buf[0] = 0;
   d50ea:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d50ee:	f7ff fca9 	bl	d4a44 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d50f2:	4668      	mov	r0, sp
   d50f4:	f000 ffda 	bl	d60ac <strlen>
   d50f8:	6833      	ldr	r3, [r6, #0]
   d50fa:	4602      	mov	r2, r0
   d50fc:	68db      	ldr	r3, [r3, #12]
   d50fe:	4669      	mov	r1, sp
   d5100:	4630      	mov	r0, r6
   d5102:	4798      	blx	r3
   d5104:	4604      	mov	r4, r0
    }
    return n;
}
   d5106:	4620      	mov	r0, r4
   d5108:	b00d      	add	sp, #52	; 0x34
   d510a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d510c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d510c:	b510      	push	{r4, lr}
   d510e:	4b05      	ldr	r3, [pc, #20]	; (d5124 <_ZN9IPAddressC1Ev+0x18>)
   d5110:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5112:	2211      	movs	r2, #17
   d5114:	f840 3b04 	str.w	r3, [r0], #4
   d5118:	2100      	movs	r1, #0
   d511a:	f000 ff9b 	bl	d6054 <memset>
}
   d511e:	4620      	mov	r0, r4
   d5120:	bd10      	pop	{r4, pc}
   d5122:	bf00      	nop
   d5124:	000d6150 	.word	0x000d6150

000d5128 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5128:	4603      	mov	r3, r0
   d512a:	4a07      	ldr	r2, [pc, #28]	; (d5148 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d512c:	b510      	push	{r4, lr}
   d512e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5132:	f101 0210 	add.w	r2, r1, #16
   d5136:	f851 4b04 	ldr.w	r4, [r1], #4
   d513a:	f843 4b04 	str.w	r4, [r3], #4
   d513e:	4291      	cmp	r1, r2
   d5140:	d1f9      	bne.n	d5136 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5142:	780a      	ldrb	r2, [r1, #0]
   d5144:	701a      	strb	r2, [r3, #0]
}
   d5146:	bd10      	pop	{r4, pc}
   d5148:	000d6150 	.word	0x000d6150

000d514c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d514c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d514e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5152:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5156:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d515a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d515e:	2304      	movs	r3, #4
   d5160:	6041      	str	r1, [r0, #4]
   d5162:	7503      	strb	r3, [r0, #20]
}
   d5164:	bd10      	pop	{r4, pc}

000d5166 <_ZN9IPAddressaSEPKh>:
{
   d5166:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5168:	78cb      	ldrb	r3, [r1, #3]
   d516a:	9300      	str	r3, [sp, #0]
   d516c:	788b      	ldrb	r3, [r1, #2]
   d516e:	784a      	ldrb	r2, [r1, #1]
   d5170:	7809      	ldrb	r1, [r1, #0]
   d5172:	f7ff ffeb 	bl	d514c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d5176:	b002      	add	sp, #8
   d5178:	bd10      	pop	{r4, pc}

000d517a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d517a:	7441      	strb	r1, [r0, #17]
}
   d517c:	4770      	bx	lr

000d517e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d517e:	4770      	bx	lr

000d5180 <_ZN9USBSerial4readEv>:
{
   d5180:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5182:	2100      	movs	r1, #0
   d5184:	7c00      	ldrb	r0, [r0, #16]
   d5186:	f7ff fd0d 	bl	d4ba4 <HAL_USB_USART_Receive_Data>
}
   d518a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d518e:	bd08      	pop	{r3, pc}

000d5190 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5190:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5192:	2101      	movs	r1, #1
   d5194:	7c00      	ldrb	r0, [r0, #16]
   d5196:	f7ff fd05 	bl	d4ba4 <HAL_USB_USART_Receive_Data>
}
   d519a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d519e:	bd08      	pop	{r3, pc}

000d51a0 <_ZN9USBSerial17availableForWriteEv>:
{
   d51a0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d51a2:	7c00      	ldrb	r0, [r0, #16]
   d51a4:	f7ff fcf6 	bl	d4b94 <HAL_USB_USART_Available_Data_For_Write>
}
   d51a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d51ac:	bd08      	pop	{r3, pc}

000d51ae <_ZN9USBSerial9availableEv>:
{
   d51ae:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d51b0:	7c00      	ldrb	r0, [r0, #16]
   d51b2:	f7ff fce7 	bl	d4b84 <HAL_USB_USART_Available_Data>
}
   d51b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d51ba:	bd08      	pop	{r3, pc}

000d51bc <_ZN9USBSerial5writeEh>:
{
   d51bc:	b513      	push	{r0, r1, r4, lr}
   d51be:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d51c0:	7c00      	ldrb	r0, [r0, #16]
{
   d51c2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d51c4:	f7ff fce6 	bl	d4b94 <HAL_USB_USART_Available_Data_For_Write>
   d51c8:	2800      	cmp	r0, #0
   d51ca:	9901      	ldr	r1, [sp, #4]
   d51cc:	dc01      	bgt.n	d51d2 <_ZN9USBSerial5writeEh+0x16>
   d51ce:	7c60      	ldrb	r0, [r4, #17]
   d51d0:	b120      	cbz	r0, d51dc <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d51d2:	7c20      	ldrb	r0, [r4, #16]
   d51d4:	f7ff fcee 	bl	d4bb4 <HAL_USB_USART_Send_Data>
   d51d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d51dc:	b002      	add	sp, #8
   d51de:	bd10      	pop	{r4, pc}

000d51e0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d51e0:	7c00      	ldrb	r0, [r0, #16]
   d51e2:	f7ff bcef 	b.w	d4bc4 <HAL_USB_USART_Flush_Data>

000d51e6 <_ZN9USBSerialD0Ev>:
   d51e6:	b510      	push	{r4, lr}
   d51e8:	2114      	movs	r1, #20
   d51ea:	4604      	mov	r4, r0
   d51ec:	f000 fab7 	bl	d575e <_ZdlPvj>
   d51f0:	4620      	mov	r0, r4
   d51f2:	bd10      	pop	{r4, pc}

000d51f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d51f4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d51f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d51fa:	4604      	mov	r4, r0
   d51fc:	4608      	mov	r0, r1
   d51fe:	2100      	movs	r1, #0
   d5200:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5204:	4b04      	ldr	r3, [pc, #16]	; (d5218 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5206:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5208:	2301      	movs	r3, #1
  _serial = serial;
   d520a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d520c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d520e:	4611      	mov	r1, r2
   d5210:	f7ff fca8 	bl	d4b64 <HAL_USB_USART_Init>
}
   d5214:	4620      	mov	r0, r4
   d5216:	bd10      	pop	{r4, pc}
   d5218:	000d6164 	.word	0x000d6164

000d521c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d521c:	7c00      	ldrb	r0, [r0, #16]
   d521e:	2200      	movs	r2, #0
   d5220:	f7ff bca8 	b.w	d4b74 <HAL_USB_USART_Begin>

000d5224 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5224:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5226:	2214      	movs	r2, #20
{
   d5228:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d522a:	2100      	movs	r1, #0
   d522c:	f000 ff12 	bl	d6054 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5230:	4620      	mov	r0, r4
   d5232:	bd10      	pop	{r4, pc}

000d5234 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5234:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5236:	4c10      	ldr	r4, [pc, #64]	; (d5278 <_Z16_fetch_usbserialv+0x44>)
{
   d5238:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d523a:	a803      	add	r0, sp, #12
   d523c:	f7ff fff2 	bl	d5224 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5240:	7821      	ldrb	r1, [r4, #0]
   d5242:	f3bf 8f5b 	dmb	ish
   d5246:	f011 0101 	ands.w	r1, r1, #1
   d524a:	d111      	bne.n	d5270 <_Z16_fetch_usbserialv+0x3c>
   d524c:	4620      	mov	r0, r4
   d524e:	9101      	str	r1, [sp, #4]
   d5250:	f7fe ff25 	bl	d409e <__cxa_guard_acquire>
   d5254:	9901      	ldr	r1, [sp, #4]
   d5256:	b158      	cbz	r0, d5270 <_Z16_fetch_usbserialv+0x3c>
   d5258:	aa03      	add	r2, sp, #12
   d525a:	4808      	ldr	r0, [pc, #32]	; (d527c <_Z16_fetch_usbserialv+0x48>)
   d525c:	f7ff ffca 	bl	d51f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5260:	4620      	mov	r0, r4
   d5262:	f7fe ff21 	bl	d40a8 <__cxa_guard_release>
   d5266:	4a06      	ldr	r2, [pc, #24]	; (d5280 <_Z16_fetch_usbserialv+0x4c>)
   d5268:	4906      	ldr	r1, [pc, #24]	; (d5284 <_Z16_fetch_usbserialv+0x50>)
   d526a:	4804      	ldr	r0, [pc, #16]	; (d527c <_Z16_fetch_usbserialv+0x48>)
   d526c:	f000 fa72 	bl	d5754 <__aeabi_atexit>
	return _usbserial;
}
   d5270:	4802      	ldr	r0, [pc, #8]	; (d527c <_Z16_fetch_usbserialv+0x48>)
   d5272:	b008      	add	sp, #32
   d5274:	bd10      	pop	{r4, pc}
   d5276:	bf00      	nop
   d5278:	2003e680 	.word	0x2003e680
   d527c:	2003e684 	.word	0x2003e684
   d5280:	2003e4fc 	.word	0x2003e4fc
   d5284:	000d517f 	.word	0x000d517f

000d5288 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d5288:	4700      	bx	r0
	...

000d528c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d528c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d5290:	2400      	movs	r4, #0
{
   d5292:	461d      	mov	r5, r3
   d5294:	460f      	mov	r7, r1
   d5296:	4690      	mov	r8, r2
   d5298:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d529a:	f7ff fb73 	bl	d4984 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d529e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d52a0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d52a4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d52a8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d52ac:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d52b0:	bfa2      	ittt	ge
   d52b2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d52b6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d52ba:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d52bc:	4907      	ldr	r1, [pc, #28]	; (d52dc <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d52be:	9400      	str	r4, [sp, #0]
   d52c0:	4643      	mov	r3, r8
   d52c2:	463a      	mov	r2, r7
   d52c4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d52c6:	bfa8      	it	ge
   d52c8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d52cc:	f7ff fb52 	bl	d4974 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d52d0:	fab0 f080 	clz	r0, r0
   d52d4:	0940      	lsrs	r0, r0, #5
   d52d6:	b004      	add	sp, #16
   d52d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d52dc:	000d5289 	.word	0x000d5289

000d52e0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d52e0:	4770      	bx	lr

000d52e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d52e2:	7441      	strb	r1, [r0, #17]
}
   d52e4:	4770      	bx	lr

000d52e6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d52e6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d52e8:	7c00      	ldrb	r0, [r0, #16]
   d52ea:	f7ff fbeb 	bl	d4ac4 <hal_usart_available_data_for_write>
}
   d52ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52f2:	bd08      	pop	{r3, pc}

000d52f4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d52f4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d52f6:	7c00      	ldrb	r0, [r0, #16]
   d52f8:	f7ff fbbc 	bl	d4a74 <hal_usart_available>
}
   d52fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5300:	bd08      	pop	{r3, pc}

000d5302 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5302:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5304:	7c00      	ldrb	r0, [r0, #16]
   d5306:	f7ff fbc5 	bl	d4a94 <hal_usart_peek>
}
   d530a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d530e:	bd08      	pop	{r3, pc}

000d5310 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5310:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5312:	7c00      	ldrb	r0, [r0, #16]
   d5314:	f7ff fbb6 	bl	d4a84 <hal_usart_read>
}
   d5318:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d531c:	bd08      	pop	{r3, pc}

000d531e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d531e:	7c00      	ldrb	r0, [r0, #16]
   d5320:	f7ff bbc0 	b.w	d4aa4 <hal_usart_flush>

000d5324 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5324:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5326:	7c45      	ldrb	r5, [r0, #17]
{
   d5328:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d532a:	b12d      	cbz	r5, d5338 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d532c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d532e:	b003      	add	sp, #12
   d5330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5334:	f7ff bb96 	b.w	d4a64 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5338:	7c00      	ldrb	r0, [r0, #16]
   d533a:	9101      	str	r1, [sp, #4]
   d533c:	f7ff fbc2 	bl	d4ac4 <hal_usart_available_data_for_write>
   d5340:	2800      	cmp	r0, #0
   d5342:	9901      	ldr	r1, [sp, #4]
   d5344:	dcf2      	bgt.n	d532c <_ZN11USARTSerial5writeEh+0x8>
}
   d5346:	4628      	mov	r0, r5
   d5348:	b003      	add	sp, #12
   d534a:	bd30      	pop	{r4, r5, pc}

000d534c <_ZN11USARTSerialD0Ev>:
   d534c:	b510      	push	{r4, lr}
   d534e:	2114      	movs	r1, #20
   d5350:	4604      	mov	r4, r0
   d5352:	f000 fa04 	bl	d575e <_ZdlPvj>
   d5356:	4620      	mov	r0, r4
   d5358:	bd10      	pop	{r4, pc}
	...

000d535c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d535c:	b510      	push	{r4, lr}
   d535e:	f04f 0c00 	mov.w	ip, #0
   d5362:	4604      	mov	r4, r0
   d5364:	4608      	mov	r0, r1
   d5366:	4611      	mov	r1, r2
   d5368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d536c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5370:	4a04      	ldr	r2, [pc, #16]	; (d5384 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5372:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5374:	2201      	movs	r2, #1
  _serial = serial;
   d5376:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5378:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d537a:	461a      	mov	r2, r3
   d537c:	f7ff fb6a 	bl	d4a54 <hal_usart_init>
}
   d5380:	4620      	mov	r0, r4
   d5382:	bd10      	pop	{r4, pc}
   d5384:	000d6194 	.word	0x000d6194

000d5388 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5388:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d538a:	4c0e      	ldr	r4, [pc, #56]	; (d53c4 <_Z22__fetch_global_Serial1v+0x3c>)
   d538c:	7821      	ldrb	r1, [r4, #0]
   d538e:	f3bf 8f5b 	dmb	ish
   d5392:	f011 0101 	ands.w	r1, r1, #1
   d5396:	d112      	bne.n	d53be <_Z22__fetch_global_Serial1v+0x36>
   d5398:	4620      	mov	r0, r4
   d539a:	9101      	str	r1, [sp, #4]
   d539c:	f7fe fe7f 	bl	d409e <__cxa_guard_acquire>
   d53a0:	9901      	ldr	r1, [sp, #4]
   d53a2:	b160      	cbz	r0, d53be <_Z22__fetch_global_Serial1v+0x36>
   d53a4:	4a08      	ldr	r2, [pc, #32]	; (d53c8 <_Z22__fetch_global_Serial1v+0x40>)
   d53a6:	4b09      	ldr	r3, [pc, #36]	; (d53cc <_Z22__fetch_global_Serial1v+0x44>)
   d53a8:	4809      	ldr	r0, [pc, #36]	; (d53d0 <_Z22__fetch_global_Serial1v+0x48>)
   d53aa:	f7ff ffd7 	bl	d535c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d53ae:	4620      	mov	r0, r4
   d53b0:	f7fe fe7a 	bl	d40a8 <__cxa_guard_release>
   d53b4:	4a07      	ldr	r2, [pc, #28]	; (d53d4 <_Z22__fetch_global_Serial1v+0x4c>)
   d53b6:	4908      	ldr	r1, [pc, #32]	; (d53d8 <_Z22__fetch_global_Serial1v+0x50>)
   d53b8:	4805      	ldr	r0, [pc, #20]	; (d53d0 <_Z22__fetch_global_Serial1v+0x48>)
   d53ba:	f000 f9cb 	bl	d5754 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d53be:	4804      	ldr	r0, [pc, #16]	; (d53d0 <_Z22__fetch_global_Serial1v+0x48>)
   d53c0:	b002      	add	sp, #8
   d53c2:	bd10      	pop	{r4, pc}
   d53c4:	2003e698 	.word	0x2003e698
   d53c8:	2003e69c 	.word	0x2003e69c
   d53cc:	2003e720 	.word	0x2003e720
   d53d0:	2003e7a4 	.word	0x2003e7a4
   d53d4:	2003e4fc 	.word	0x2003e4fc
   d53d8:	000d52e1 	.word	0x000d52e1

000d53dc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d53dc:	4770      	bx	lr

000d53de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d53de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53e0:	4606      	mov	r6, r0
   d53e2:	4615      	mov	r5, r2
   d53e4:	460c      	mov	r4, r1
   d53e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53e8:	42bc      	cmp	r4, r7
   d53ea:	d006      	beq.n	d53fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d53ec:	6833      	ldr	r3, [r6, #0]
   d53ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   d53f2:	689b      	ldr	r3, [r3, #8]
   d53f4:	4630      	mov	r0, r6
   d53f6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d53f8:	e7f6      	b.n	d53e8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d53fa:	4628      	mov	r0, r5
   d53fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53fe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d53fe:	7c00      	ldrb	r0, [r0, #16]
   d5400:	2200      	movs	r2, #0
   d5402:	f7ff bb67 	b.w	d4ad4 <hal_i2c_write>

000d5406 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5406:	7c00      	ldrb	r0, [r0, #16]
   d5408:	2100      	movs	r1, #0
   d540a:	f7ff bb6b 	b.w	d4ae4 <hal_i2c_available>

000d540e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d540e:	7c00      	ldrb	r0, [r0, #16]
   d5410:	2100      	movs	r1, #0
   d5412:	f7ff bb6f 	b.w	d4af4 <hal_i2c_read>

000d5416 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5416:	7c00      	ldrb	r0, [r0, #16]
   d5418:	2100      	movs	r1, #0
   d541a:	f7ff bb73 	b.w	d4b04 <hal_i2c_peek>

000d541e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d541e:	7c00      	ldrb	r0, [r0, #16]
   d5420:	2100      	movs	r1, #0
   d5422:	f7ff bb77 	b.w	d4b14 <hal_i2c_flush>

000d5426 <_ZN7TwoWireD0Ev>:
   d5426:	b510      	push	{r4, lr}
   d5428:	2114      	movs	r1, #20
   d542a:	4604      	mov	r4, r0
   d542c:	f000 f997 	bl	d575e <_ZdlPvj>
   d5430:	4620      	mov	r0, r4
   d5432:	bd10      	pop	{r4, pc}

000d5434 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5434:	b510      	push	{r4, lr}
   d5436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d543a:	4604      	mov	r4, r0
   d543c:	4608      	mov	r0, r1
   d543e:	2100      	movs	r1, #0
   d5440:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5444:	4b03      	ldr	r3, [pc, #12]	; (d5454 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5446:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5448:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d544a:	4611      	mov	r1, r2
   d544c:	f7ff fb72 	bl	d4b34 <hal_i2c_init>
}
   d5450:	4620      	mov	r0, r4
   d5452:	bd10      	pop	{r4, pc}
   d5454:	000d61c4 	.word	0x000d61c4

000d5458 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5458:	2200      	movs	r2, #0
   d545a:	6840      	ldr	r0, [r0, #4]
   d545c:	4611      	mov	r1, r2
   d545e:	f7ff bc05 	b.w	d4c6c <network_ready>

000d5462 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5462:	2200      	movs	r2, #0
   d5464:	6840      	ldr	r0, [r0, #4]
   d5466:	4611      	mov	r1, r2
   d5468:	f7ff bc20 	b.w	d4cac <network_listening>

000d546c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d546c:	2200      	movs	r2, #0
   d546e:	6840      	ldr	r0, [r0, #4]
   d5470:	4611      	mov	r1, r2
   d5472:	f7ff bc2b 	b.w	d4ccc <network_get_listen_timeout>

000d5476 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5476:	6840      	ldr	r0, [r0, #4]
   d5478:	2200      	movs	r2, #0
   d547a:	f7ff bc1f 	b.w	d4cbc <network_set_listen_timeout>

000d547e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d547e:	6840      	ldr	r0, [r0, #4]
   d5480:	2200      	movs	r2, #0
   d5482:	f081 0101 	eor.w	r1, r1, #1
   d5486:	f7ff bc09 	b.w	d4c9c <network_listen>

000d548a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d548a:	2300      	movs	r3, #0
   d548c:	6840      	ldr	r0, [r0, #4]
   d548e:	461a      	mov	r2, r3
   d5490:	4619      	mov	r1, r3
   d5492:	f7ff bbfb 	b.w	d4c8c <network_off>

000d5496 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5496:	2300      	movs	r3, #0
   d5498:	6840      	ldr	r0, [r0, #4]
   d549a:	461a      	mov	r2, r3
   d549c:	4619      	mov	r1, r3
   d549e:	f7ff bbed 	b.w	d4c7c <network_on>

000d54a2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d54a2:	2200      	movs	r2, #0
   d54a4:	6840      	ldr	r0, [r0, #4]
   d54a6:	4611      	mov	r1, r2
   d54a8:	f7ff bbd0 	b.w	d4c4c <network_connecting>

000d54ac <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54ac:	6840      	ldr	r0, [r0, #4]
   d54ae:	2200      	movs	r2, #0
   d54b0:	2102      	movs	r1, #2
   d54b2:	f7ff bbd3 	b.w	d4c5c <network_disconnect>

000d54b6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d54b6:	2300      	movs	r3, #0
   d54b8:	6840      	ldr	r0, [r0, #4]
   d54ba:	461a      	mov	r2, r3
   d54bc:	f7ff bbbe 	b.w	d4c3c <network_connect>

000d54c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d54c0:	4b02      	ldr	r3, [pc, #8]	; (d54cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d54c2:	2204      	movs	r2, #4
   d54c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d54c6:	4a02      	ldr	r2, [pc, #8]	; (d54d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d54c8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d54ca:	4770      	bx	lr
   d54cc:	2003e7b8 	.word	0x2003e7b8
   d54d0:	000d61ec 	.word	0x000d61ec

000d54d4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d54d4:	2300      	movs	r3, #0
   d54d6:	6840      	ldr	r0, [r0, #4]
   d54d8:	461a      	mov	r2, r3
   d54da:	f7ff bbaf 	b.w	d4c3c <network_connect>

000d54de <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d54de:	6840      	ldr	r0, [r0, #4]
   d54e0:	2200      	movs	r2, #0
   d54e2:	2102      	movs	r1, #2
   d54e4:	f7ff bbba 	b.w	d4c5c <network_disconnect>

000d54e8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d54e8:	2200      	movs	r2, #0
   d54ea:	6840      	ldr	r0, [r0, #4]
   d54ec:	4611      	mov	r1, r2
   d54ee:	f7ff bbad 	b.w	d4c4c <network_connecting>

000d54f2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d54f2:	2200      	movs	r2, #0
   d54f4:	6840      	ldr	r0, [r0, #4]
   d54f6:	4611      	mov	r1, r2
   d54f8:	f7ff bbb8 	b.w	d4c6c <network_ready>

000d54fc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d54fc:	2300      	movs	r3, #0
   d54fe:	6840      	ldr	r0, [r0, #4]
   d5500:	461a      	mov	r2, r3
   d5502:	4619      	mov	r1, r3
   d5504:	f7ff bbba 	b.w	d4c7c <network_on>

000d5508 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5508:	2300      	movs	r3, #0
   d550a:	6840      	ldr	r0, [r0, #4]
   d550c:	461a      	mov	r2, r3
   d550e:	4619      	mov	r1, r3
   d5510:	f7ff bbbc 	b.w	d4c8c <network_off>

000d5514 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5514:	6840      	ldr	r0, [r0, #4]
   d5516:	2100      	movs	r1, #0
   d5518:	f7ff bbe0 	b.w	d4cdc <network_is_on>

000d551c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d551c:	6840      	ldr	r0, [r0, #4]
   d551e:	2100      	movs	r1, #0
   d5520:	f7ff bbe4 	b.w	d4cec <network_is_off>

000d5524 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5524:	6840      	ldr	r0, [r0, #4]
   d5526:	2200      	movs	r2, #0
   d5528:	f081 0101 	eor.w	r1, r1, #1
   d552c:	f7ff bbb6 	b.w	d4c9c <network_listen>

000d5530 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5530:	6840      	ldr	r0, [r0, #4]
   d5532:	2200      	movs	r2, #0
   d5534:	f7ff bbc2 	b.w	d4cbc <network_set_listen_timeout>

000d5538 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5538:	2200      	movs	r2, #0
   d553a:	6840      	ldr	r0, [r0, #4]
   d553c:	4611      	mov	r1, r2
   d553e:	f7ff bbc5 	b.w	d4ccc <network_get_listen_timeout>

000d5542 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5542:	2200      	movs	r2, #0
   d5544:	6840      	ldr	r0, [r0, #4]
   d5546:	4611      	mov	r1, r2
   d5548:	f7ff bbb0 	b.w	d4cac <network_listening>

000d554c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d554c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5550:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5552:	b095      	sub	sp, #84	; 0x54
   d5554:	4616      	mov	r6, r2
   d5556:	460d      	mov	r5, r1
   d5558:	4607      	mov	r7, r0
    IPAddress addr;
   d555a:	f7ff fdd7 	bl	d510c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d555e:	4621      	mov	r1, r4
   d5560:	2218      	movs	r2, #24
   d5562:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5564:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5566:	f000 fd75 	bl	d6054 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d556a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d556c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5570:	4621      	mov	r1, r4
   d5572:	466b      	mov	r3, sp
   d5574:	aa0c      	add	r2, sp, #48	; 0x30
   d5576:	4630      	mov	r0, r6
   d5578:	f7ff f9e4 	bl	d4944 <netdb_getaddrinfo>
    if (!r) {
   d557c:	4604      	mov	r4, r0
   d557e:	2800      	cmp	r0, #0
   d5580:	d146      	bne.n	d5610 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5582:	4602      	mov	r2, r0
   d5584:	2101      	movs	r1, #1
   d5586:	6868      	ldr	r0, [r5, #4]
   d5588:	f7ff fb70 	bl	d4c6c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d558c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d558e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5590:	4622      	mov	r2, r4
   d5592:	6868      	ldr	r0, [r5, #4]
   d5594:	f7ff fb6a 	bl	d4c6c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5598:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d559a:	4681      	mov	r9, r0
        bool ok = false;
   d559c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d559e:	2e00      	cmp	r6, #0
   d55a0:	d036      	beq.n	d5610 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d55a2:	2900      	cmp	r1, #0
   d55a4:	d134      	bne.n	d5610 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d55a6:	6873      	ldr	r3, [r6, #4]
   d55a8:	2b02      	cmp	r3, #2
   d55aa:	d003      	beq.n	d55b4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d55ac:	2b0a      	cmp	r3, #10
   d55ae:	d00b      	beq.n	d55c8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d55b0:	69f6      	ldr	r6, [r6, #28]
   d55b2:	e7f4      	b.n	d559e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d55b4:	f1b8 0f00 	cmp.w	r8, #0
   d55b8:	d004      	beq.n	d55c4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d55ba:	6971      	ldr	r1, [r6, #20]
   d55bc:	4638      	mov	r0, r7
   d55be:	3104      	adds	r1, #4
   d55c0:	f7ff fdd1 	bl	d5166 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d55c4:	4641      	mov	r1, r8
   d55c6:	e7f3      	b.n	d55b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d55c8:	f1b9 0f00 	cmp.w	r9, #0
   d55cc:	d101      	bne.n	d55d2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d55ce:	4649      	mov	r1, r9
   d55d0:	e7ee      	b.n	d55b0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d55d2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d55d4:	2210      	movs	r2, #16
   d55d6:	a801      	add	r0, sp, #4
   d55d8:	f000 fd3c 	bl	d6054 <memset>
                    a.v = 6;
   d55dc:	2306      	movs	r3, #6
   d55de:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d55e2:	ad01      	add	r5, sp, #4
   d55e4:	f104 0308 	add.w	r3, r4, #8
   d55e8:	3418      	adds	r4, #24
   d55ea:	6818      	ldr	r0, [r3, #0]
   d55ec:	6859      	ldr	r1, [r3, #4]
   d55ee:	462a      	mov	r2, r5
   d55f0:	c203      	stmia	r2!, {r0, r1}
   d55f2:	3308      	adds	r3, #8
   d55f4:	42a3      	cmp	r3, r4
   d55f6:	4615      	mov	r5, r2
   d55f8:	d1f7      	bne.n	d55ea <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d55fa:	a901      	add	r1, sp, #4
   d55fc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d55fe:	ad07      	add	r5, sp, #28
   d5600:	f7ff fd92 	bl	d5128 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5606:	1d3c      	adds	r4, r7, #4
   d5608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d560a:	682b      	ldr	r3, [r5, #0]
   d560c:	7023      	strb	r3, [r4, #0]
   d560e:	e7de      	b.n	d55ce <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5610:	9800      	ldr	r0, [sp, #0]
   d5612:	f7ff f98f 	bl	d4934 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5616:	4638      	mov	r0, r7
   d5618:	b015      	add	sp, #84	; 0x54
   d561a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5620 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5620:	4b02      	ldr	r3, [pc, #8]	; (d562c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5622:	4a03      	ldr	r2, [pc, #12]	; (d5630 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5624:	601a      	str	r2, [r3, #0]
   d5626:	2200      	movs	r2, #0
   d5628:	605a      	str	r2, [r3, #4]

} // spark
   d562a:	4770      	bx	lr
   d562c:	2003e7c0 	.word	0x2003e7c0
   d5630:	000d6228 	.word	0x000d6228

000d5634 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5634:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5636:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5638:	d902      	bls.n	d5640 <pinAvailable+0xc>
    return false;
   d563a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d563c:	b002      	add	sp, #8
   d563e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5640:	f1a0 030b 	sub.w	r3, r0, #11
   d5644:	2b02      	cmp	r3, #2
   d5646:	d81a      	bhi.n	d567e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5648:	4c17      	ldr	r4, [pc, #92]	; (d56a8 <pinAvailable+0x74>)
   d564a:	7821      	ldrb	r1, [r4, #0]
   d564c:	f3bf 8f5b 	dmb	ish
   d5650:	f011 0101 	ands.w	r1, r1, #1
   d5654:	d10b      	bne.n	d566e <pinAvailable+0x3a>
   d5656:	4620      	mov	r0, r4
   d5658:	9101      	str	r1, [sp, #4]
   d565a:	f7fe fd20 	bl	d409e <__cxa_guard_acquire>
   d565e:	9901      	ldr	r1, [sp, #4]
   d5660:	b128      	cbz	r0, d566e <pinAvailable+0x3a>
   d5662:	4812      	ldr	r0, [pc, #72]	; (d56ac <pinAvailable+0x78>)
   d5664:	f7ff fbb0 	bl	d4dc8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5668:	4620      	mov	r0, r4
   d566a:	f7fe fd1d 	bl	d40a8 <__cxa_guard_release>
   d566e:	4b0f      	ldr	r3, [pc, #60]	; (d56ac <pinAvailable+0x78>)
   d5670:	7818      	ldrb	r0, [r3, #0]
   d5672:	f7ff fa6f 	bl	d4b54 <hal_spi_is_enabled>
   d5676:	2800      	cmp	r0, #0
   d5678:	d1df      	bne.n	d563a <pinAvailable+0x6>
  return true; // 'pin' is available
   d567a:	2001      	movs	r0, #1
   d567c:	e7de      	b.n	d563c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d567e:	2801      	cmp	r0, #1
   d5680:	d809      	bhi.n	d5696 <pinAvailable+0x62>
   d5682:	f000 f83f 	bl	d5704 <_Z19__fetch_global_Wirev>
   d5686:	2100      	movs	r1, #0
   d5688:	7c00      	ldrb	r0, [r0, #16]
   d568a:	f7ff fa4b 	bl	d4b24 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d568e:	f080 0001 	eor.w	r0, r0, #1
   d5692:	b2c0      	uxtb	r0, r0
   d5694:	e7d2      	b.n	d563c <pinAvailable+0x8>
   d5696:	3809      	subs	r0, #9
   d5698:	2801      	cmp	r0, #1
   d569a:	d8ee      	bhi.n	d567a <pinAvailable+0x46>
   d569c:	f7ff fe74 	bl	d5388 <_Z22__fetch_global_Serial1v>
   d56a0:	7c00      	ldrb	r0, [r0, #16]
   d56a2:	f7ff fa07 	bl	d4ab4 <hal_usart_is_enabled>
   d56a6:	e7f2      	b.n	d568e <pinAvailable+0x5a>
   d56a8:	2003e7c8 	.word	0x2003e7c8
   d56ac:	2003e7cc 	.word	0x2003e7cc

000d56b0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d56b0:	2823      	cmp	r0, #35	; 0x23
{
   d56b2:	b538      	push	{r3, r4, r5, lr}
   d56b4:	4604      	mov	r4, r0
   d56b6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d56b8:	d80a      	bhi.n	d56d0 <pinMode+0x20>
   d56ba:	29ff      	cmp	r1, #255	; 0xff
   d56bc:	d008      	beq.n	d56d0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d56be:	f7ff ffb9 	bl	d5634 <pinAvailable>
   d56c2:	b128      	cbz	r0, d56d0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d56c4:	4629      	mov	r1, r5
   d56c6:	4620      	mov	r0, r4
}
   d56c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d56cc:	f7ff b94a 	b.w	d4964 <HAL_Pin_Mode>
}
   d56d0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d56d4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d56d4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d56d6:	2300      	movs	r3, #0
   d56d8:	2520      	movs	r5, #32
   d56da:	8043      	strh	r3, [r0, #2]
   d56dc:	2314      	movs	r3, #20
{
   d56de:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d56e0:	8003      	strh	r3, [r0, #0]
   d56e2:	6085      	str	r5, [r0, #8]
   d56e4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d56e6:	4906      	ldr	r1, [pc, #24]	; (d5700 <_Z17acquireWireBufferv+0x2c>)
   d56e8:	4628      	mov	r0, r5
   d56ea:	f000 f83c 	bl	d5766 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d56ee:	4904      	ldr	r1, [pc, #16]	; (d5700 <_Z17acquireWireBufferv+0x2c>)
	};
   d56f0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d56f2:	4628      	mov	r0, r5
   d56f4:	f000 f837 	bl	d5766 <_ZnajRKSt9nothrow_t>
	};
   d56f8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d56fa:	4620      	mov	r0, r4
   d56fc:	bd38      	pop	{r3, r4, r5, pc}
   d56fe:	bf00      	nop
   d5700:	000d625c 	.word	0x000d625c

000d5704 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5704:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5706:	4d0f      	ldr	r5, [pc, #60]	; (d5744 <_Z19__fetch_global_Wirev+0x40>)
   d5708:	7829      	ldrb	r1, [r5, #0]
   d570a:	f3bf 8f5b 	dmb	ish
   d570e:	f011 0401 	ands.w	r4, r1, #1
{
   d5712:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5714:	d113      	bne.n	d573e <_Z19__fetch_global_Wirev+0x3a>
   d5716:	4628      	mov	r0, r5
   d5718:	f7fe fcc1 	bl	d409e <__cxa_guard_acquire>
   d571c:	b178      	cbz	r0, d573e <_Z19__fetch_global_Wirev+0x3a>
   d571e:	a801      	add	r0, sp, #4
   d5720:	f7ff ffd8 	bl	d56d4 <_Z17acquireWireBufferv>
   d5724:	aa01      	add	r2, sp, #4
   d5726:	4621      	mov	r1, r4
   d5728:	4807      	ldr	r0, [pc, #28]	; (d5748 <_Z19__fetch_global_Wirev+0x44>)
   d572a:	f7ff fe83 	bl	d5434 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d572e:	4628      	mov	r0, r5
   d5730:	f7fe fcba 	bl	d40a8 <__cxa_guard_release>
   d5734:	4a05      	ldr	r2, [pc, #20]	; (d574c <_Z19__fetch_global_Wirev+0x48>)
   d5736:	4906      	ldr	r1, [pc, #24]	; (d5750 <_Z19__fetch_global_Wirev+0x4c>)
   d5738:	4803      	ldr	r0, [pc, #12]	; (d5748 <_Z19__fetch_global_Wirev+0x44>)
   d573a:	f000 f80b 	bl	d5754 <__aeabi_atexit>
	return wire;
}
   d573e:	4802      	ldr	r0, [pc, #8]	; (d5748 <_Z19__fetch_global_Wirev+0x44>)
   d5740:	b007      	add	sp, #28
   d5742:	bd30      	pop	{r4, r5, pc}
   d5744:	2003e7d8 	.word	0x2003e7d8
   d5748:	2003e7dc 	.word	0x2003e7dc
   d574c:	2003e4fc 	.word	0x2003e4fc
   d5750:	000d53dd 	.word	0x000d53dd

000d5754 <__aeabi_atexit>:
   d5754:	460b      	mov	r3, r1
   d5756:	4601      	mov	r1, r0
   d5758:	4618      	mov	r0, r3
   d575a:	f000 bc5f 	b.w	d601c <__cxa_atexit>

000d575e <_ZdlPvj>:
   d575e:	f7fe bc9c 	b.w	d409a <_ZdlPv>

000d5762 <_ZnwjRKSt9nothrow_t>:
   d5762:	f7fe bc96 	b.w	d4092 <_Znwj>

000d5766 <_ZnajRKSt9nothrow_t>:
   d5766:	f7fe bc96 	b.w	d4096 <_Znaj>

000d576a <_ZSt25__throw_bad_function_callv>:
   d576a:	b508      	push	{r3, lr}
   d576c:	f7ff fade 	bl	d4d2c <abort>

000d5770 <__aeabi_drsub>:
   d5770:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5774:	e002      	b.n	d577c <__adddf3>
   d5776:	bf00      	nop

000d5778 <__aeabi_dsub>:
   d5778:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d577c <__adddf3>:
   d577c:	b530      	push	{r4, r5, lr}
   d577e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5782:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5786:	ea94 0f05 	teq	r4, r5
   d578a:	bf08      	it	eq
   d578c:	ea90 0f02 	teqeq	r0, r2
   d5790:	bf1f      	itttt	ne
   d5792:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5796:	ea55 0c02 	orrsne.w	ip, r5, r2
   d579a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d579e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d57a2:	f000 80e2 	beq.w	d596a <__adddf3+0x1ee>
   d57a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d57aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d57ae:	bfb8      	it	lt
   d57b0:	426d      	neglt	r5, r5
   d57b2:	dd0c      	ble.n	d57ce <__adddf3+0x52>
   d57b4:	442c      	add	r4, r5
   d57b6:	ea80 0202 	eor.w	r2, r0, r2
   d57ba:	ea81 0303 	eor.w	r3, r1, r3
   d57be:	ea82 0000 	eor.w	r0, r2, r0
   d57c2:	ea83 0101 	eor.w	r1, r3, r1
   d57c6:	ea80 0202 	eor.w	r2, r0, r2
   d57ca:	ea81 0303 	eor.w	r3, r1, r3
   d57ce:	2d36      	cmp	r5, #54	; 0x36
   d57d0:	bf88      	it	hi
   d57d2:	bd30      	pophi	{r4, r5, pc}
   d57d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d57d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d57dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d57e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d57e4:	d002      	beq.n	d57ec <__adddf3+0x70>
   d57e6:	4240      	negs	r0, r0
   d57e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d57ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d57f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d57f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d57f8:	d002      	beq.n	d5800 <__adddf3+0x84>
   d57fa:	4252      	negs	r2, r2
   d57fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5800:	ea94 0f05 	teq	r4, r5
   d5804:	f000 80a7 	beq.w	d5956 <__adddf3+0x1da>
   d5808:	f1a4 0401 	sub.w	r4, r4, #1
   d580c:	f1d5 0e20 	rsbs	lr, r5, #32
   d5810:	db0d      	blt.n	d582e <__adddf3+0xb2>
   d5812:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5816:	fa22 f205 	lsr.w	r2, r2, r5
   d581a:	1880      	adds	r0, r0, r2
   d581c:	f141 0100 	adc.w	r1, r1, #0
   d5820:	fa03 f20e 	lsl.w	r2, r3, lr
   d5824:	1880      	adds	r0, r0, r2
   d5826:	fa43 f305 	asr.w	r3, r3, r5
   d582a:	4159      	adcs	r1, r3
   d582c:	e00e      	b.n	d584c <__adddf3+0xd0>
   d582e:	f1a5 0520 	sub.w	r5, r5, #32
   d5832:	f10e 0e20 	add.w	lr, lr, #32
   d5836:	2a01      	cmp	r2, #1
   d5838:	fa03 fc0e 	lsl.w	ip, r3, lr
   d583c:	bf28      	it	cs
   d583e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5842:	fa43 f305 	asr.w	r3, r3, r5
   d5846:	18c0      	adds	r0, r0, r3
   d5848:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d584c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5850:	d507      	bpl.n	d5862 <__adddf3+0xe6>
   d5852:	f04f 0e00 	mov.w	lr, #0
   d5856:	f1dc 0c00 	rsbs	ip, ip, #0
   d585a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d585e:	eb6e 0101 	sbc.w	r1, lr, r1
   d5862:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5866:	d31b      	bcc.n	d58a0 <__adddf3+0x124>
   d5868:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d586c:	d30c      	bcc.n	d5888 <__adddf3+0x10c>
   d586e:	0849      	lsrs	r1, r1, #1
   d5870:	ea5f 0030 	movs.w	r0, r0, rrx
   d5874:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5878:	f104 0401 	add.w	r4, r4, #1
   d587c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5880:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5884:	f080 809a 	bcs.w	d59bc <__adddf3+0x240>
   d5888:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d588c:	bf08      	it	eq
   d588e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5892:	f150 0000 	adcs.w	r0, r0, #0
   d5896:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d589a:	ea41 0105 	orr.w	r1, r1, r5
   d589e:	bd30      	pop	{r4, r5, pc}
   d58a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d58a4:	4140      	adcs	r0, r0
   d58a6:	eb41 0101 	adc.w	r1, r1, r1
   d58aa:	3c01      	subs	r4, #1
   d58ac:	bf28      	it	cs
   d58ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d58b2:	d2e9      	bcs.n	d5888 <__adddf3+0x10c>
   d58b4:	f091 0f00 	teq	r1, #0
   d58b8:	bf04      	itt	eq
   d58ba:	4601      	moveq	r1, r0
   d58bc:	2000      	moveq	r0, #0
   d58be:	fab1 f381 	clz	r3, r1
   d58c2:	bf08      	it	eq
   d58c4:	3320      	addeq	r3, #32
   d58c6:	f1a3 030b 	sub.w	r3, r3, #11
   d58ca:	f1b3 0220 	subs.w	r2, r3, #32
   d58ce:	da0c      	bge.n	d58ea <__adddf3+0x16e>
   d58d0:	320c      	adds	r2, #12
   d58d2:	dd08      	ble.n	d58e6 <__adddf3+0x16a>
   d58d4:	f102 0c14 	add.w	ip, r2, #20
   d58d8:	f1c2 020c 	rsb	r2, r2, #12
   d58dc:	fa01 f00c 	lsl.w	r0, r1, ip
   d58e0:	fa21 f102 	lsr.w	r1, r1, r2
   d58e4:	e00c      	b.n	d5900 <__adddf3+0x184>
   d58e6:	f102 0214 	add.w	r2, r2, #20
   d58ea:	bfd8      	it	le
   d58ec:	f1c2 0c20 	rsble	ip, r2, #32
   d58f0:	fa01 f102 	lsl.w	r1, r1, r2
   d58f4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d58f8:	bfdc      	itt	le
   d58fa:	ea41 010c 	orrle.w	r1, r1, ip
   d58fe:	4090      	lslle	r0, r2
   d5900:	1ae4      	subs	r4, r4, r3
   d5902:	bfa2      	ittt	ge
   d5904:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5908:	4329      	orrge	r1, r5
   d590a:	bd30      	popge	{r4, r5, pc}
   d590c:	ea6f 0404 	mvn.w	r4, r4
   d5910:	3c1f      	subs	r4, #31
   d5912:	da1c      	bge.n	d594e <__adddf3+0x1d2>
   d5914:	340c      	adds	r4, #12
   d5916:	dc0e      	bgt.n	d5936 <__adddf3+0x1ba>
   d5918:	f104 0414 	add.w	r4, r4, #20
   d591c:	f1c4 0220 	rsb	r2, r4, #32
   d5920:	fa20 f004 	lsr.w	r0, r0, r4
   d5924:	fa01 f302 	lsl.w	r3, r1, r2
   d5928:	ea40 0003 	orr.w	r0, r0, r3
   d592c:	fa21 f304 	lsr.w	r3, r1, r4
   d5930:	ea45 0103 	orr.w	r1, r5, r3
   d5934:	bd30      	pop	{r4, r5, pc}
   d5936:	f1c4 040c 	rsb	r4, r4, #12
   d593a:	f1c4 0220 	rsb	r2, r4, #32
   d593e:	fa20 f002 	lsr.w	r0, r0, r2
   d5942:	fa01 f304 	lsl.w	r3, r1, r4
   d5946:	ea40 0003 	orr.w	r0, r0, r3
   d594a:	4629      	mov	r1, r5
   d594c:	bd30      	pop	{r4, r5, pc}
   d594e:	fa21 f004 	lsr.w	r0, r1, r4
   d5952:	4629      	mov	r1, r5
   d5954:	bd30      	pop	{r4, r5, pc}
   d5956:	f094 0f00 	teq	r4, #0
   d595a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d595e:	bf06      	itte	eq
   d5960:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5964:	3401      	addeq	r4, #1
   d5966:	3d01      	subne	r5, #1
   d5968:	e74e      	b.n	d5808 <__adddf3+0x8c>
   d596a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d596e:	bf18      	it	ne
   d5970:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5974:	d029      	beq.n	d59ca <__adddf3+0x24e>
   d5976:	ea94 0f05 	teq	r4, r5
   d597a:	bf08      	it	eq
   d597c:	ea90 0f02 	teqeq	r0, r2
   d5980:	d005      	beq.n	d598e <__adddf3+0x212>
   d5982:	ea54 0c00 	orrs.w	ip, r4, r0
   d5986:	bf04      	itt	eq
   d5988:	4619      	moveq	r1, r3
   d598a:	4610      	moveq	r0, r2
   d598c:	bd30      	pop	{r4, r5, pc}
   d598e:	ea91 0f03 	teq	r1, r3
   d5992:	bf1e      	ittt	ne
   d5994:	2100      	movne	r1, #0
   d5996:	2000      	movne	r0, #0
   d5998:	bd30      	popne	{r4, r5, pc}
   d599a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d599e:	d105      	bne.n	d59ac <__adddf3+0x230>
   d59a0:	0040      	lsls	r0, r0, #1
   d59a2:	4149      	adcs	r1, r1
   d59a4:	bf28      	it	cs
   d59a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d59aa:	bd30      	pop	{r4, r5, pc}
   d59ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d59b0:	bf3c      	itt	cc
   d59b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d59b6:	bd30      	popcc	{r4, r5, pc}
   d59b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d59bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d59c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d59c4:	f04f 0000 	mov.w	r0, #0
   d59c8:	bd30      	pop	{r4, r5, pc}
   d59ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d59ce:	bf1a      	itte	ne
   d59d0:	4619      	movne	r1, r3
   d59d2:	4610      	movne	r0, r2
   d59d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d59d8:	bf1c      	itt	ne
   d59da:	460b      	movne	r3, r1
   d59dc:	4602      	movne	r2, r0
   d59de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d59e2:	bf06      	itte	eq
   d59e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d59e8:	ea91 0f03 	teqeq	r1, r3
   d59ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d59f0:	bd30      	pop	{r4, r5, pc}
   d59f2:	bf00      	nop

000d59f4 <__aeabi_ui2d>:
   d59f4:	f090 0f00 	teq	r0, #0
   d59f8:	bf04      	itt	eq
   d59fa:	2100      	moveq	r1, #0
   d59fc:	4770      	bxeq	lr
   d59fe:	b530      	push	{r4, r5, lr}
   d5a00:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a04:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a08:	f04f 0500 	mov.w	r5, #0
   d5a0c:	f04f 0100 	mov.w	r1, #0
   d5a10:	e750      	b.n	d58b4 <__adddf3+0x138>
   d5a12:	bf00      	nop

000d5a14 <__aeabi_i2d>:
   d5a14:	f090 0f00 	teq	r0, #0
   d5a18:	bf04      	itt	eq
   d5a1a:	2100      	moveq	r1, #0
   d5a1c:	4770      	bxeq	lr
   d5a1e:	b530      	push	{r4, r5, lr}
   d5a20:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a24:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5a2c:	bf48      	it	mi
   d5a2e:	4240      	negmi	r0, r0
   d5a30:	f04f 0100 	mov.w	r1, #0
   d5a34:	e73e      	b.n	d58b4 <__adddf3+0x138>
   d5a36:	bf00      	nop

000d5a38 <__aeabi_f2d>:
   d5a38:	0042      	lsls	r2, r0, #1
   d5a3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5a3e:	ea4f 0131 	mov.w	r1, r1, rrx
   d5a42:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5a46:	bf1f      	itttt	ne
   d5a48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5a4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5a50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5a54:	4770      	bxne	lr
   d5a56:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5a5a:	bf08      	it	eq
   d5a5c:	4770      	bxeq	lr
   d5a5e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5a62:	bf04      	itt	eq
   d5a64:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5a68:	4770      	bxeq	lr
   d5a6a:	b530      	push	{r4, r5, lr}
   d5a6c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5a70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5a78:	e71c      	b.n	d58b4 <__adddf3+0x138>
   d5a7a:	bf00      	nop

000d5a7c <__aeabi_ul2d>:
   d5a7c:	ea50 0201 	orrs.w	r2, r0, r1
   d5a80:	bf08      	it	eq
   d5a82:	4770      	bxeq	lr
   d5a84:	b530      	push	{r4, r5, lr}
   d5a86:	f04f 0500 	mov.w	r5, #0
   d5a8a:	e00a      	b.n	d5aa2 <__aeabi_l2d+0x16>

000d5a8c <__aeabi_l2d>:
   d5a8c:	ea50 0201 	orrs.w	r2, r0, r1
   d5a90:	bf08      	it	eq
   d5a92:	4770      	bxeq	lr
   d5a94:	b530      	push	{r4, r5, lr}
   d5a96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5a9a:	d502      	bpl.n	d5aa2 <__aeabi_l2d+0x16>
   d5a9c:	4240      	negs	r0, r0
   d5a9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5aa2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5aa6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5aaa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5aae:	f43f aed8 	beq.w	d5862 <__adddf3+0xe6>
   d5ab2:	f04f 0203 	mov.w	r2, #3
   d5ab6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5aba:	bf18      	it	ne
   d5abc:	3203      	addne	r2, #3
   d5abe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5ac2:	bf18      	it	ne
   d5ac4:	3203      	addne	r2, #3
   d5ac6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5aca:	f1c2 0320 	rsb	r3, r2, #32
   d5ace:	fa00 fc03 	lsl.w	ip, r0, r3
   d5ad2:	fa20 f002 	lsr.w	r0, r0, r2
   d5ad6:	fa01 fe03 	lsl.w	lr, r1, r3
   d5ada:	ea40 000e 	orr.w	r0, r0, lr
   d5ade:	fa21 f102 	lsr.w	r1, r1, r2
   d5ae2:	4414      	add	r4, r2
   d5ae4:	e6bd      	b.n	d5862 <__adddf3+0xe6>
   d5ae6:	bf00      	nop

000d5ae8 <__aeabi_dmul>:
   d5ae8:	b570      	push	{r4, r5, r6, lr}
   d5aea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5aee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5af2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5af6:	bf1d      	ittte	ne
   d5af8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5afc:	ea94 0f0c 	teqne	r4, ip
   d5b00:	ea95 0f0c 	teqne	r5, ip
   d5b04:	f000 f8de 	bleq	d5cc4 <__aeabi_dmul+0x1dc>
   d5b08:	442c      	add	r4, r5
   d5b0a:	ea81 0603 	eor.w	r6, r1, r3
   d5b0e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5b12:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5b16:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5b1a:	bf18      	it	ne
   d5b1c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5b20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5b28:	d038      	beq.n	d5b9c <__aeabi_dmul+0xb4>
   d5b2a:	fba0 ce02 	umull	ip, lr, r0, r2
   d5b2e:	f04f 0500 	mov.w	r5, #0
   d5b32:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5b36:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5b3a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5b3e:	f04f 0600 	mov.w	r6, #0
   d5b42:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5b46:	f09c 0f00 	teq	ip, #0
   d5b4a:	bf18      	it	ne
   d5b4c:	f04e 0e01 	orrne.w	lr, lr, #1
   d5b50:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5b54:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5b58:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5b5c:	d204      	bcs.n	d5b68 <__aeabi_dmul+0x80>
   d5b5e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5b62:	416d      	adcs	r5, r5
   d5b64:	eb46 0606 	adc.w	r6, r6, r6
   d5b68:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5b6c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5b70:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5b74:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5b78:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5b7c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5b80:	bf88      	it	hi
   d5b82:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5b86:	d81e      	bhi.n	d5bc6 <__aeabi_dmul+0xde>
   d5b88:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5b8c:	bf08      	it	eq
   d5b8e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5b92:	f150 0000 	adcs.w	r0, r0, #0
   d5b96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5b9a:	bd70      	pop	{r4, r5, r6, pc}
   d5b9c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5ba0:	ea46 0101 	orr.w	r1, r6, r1
   d5ba4:	ea40 0002 	orr.w	r0, r0, r2
   d5ba8:	ea81 0103 	eor.w	r1, r1, r3
   d5bac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5bb0:	bfc2      	ittt	gt
   d5bb2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5bb6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5bba:	bd70      	popgt	{r4, r5, r6, pc}
   d5bbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5bc0:	f04f 0e00 	mov.w	lr, #0
   d5bc4:	3c01      	subs	r4, #1
   d5bc6:	f300 80ab 	bgt.w	d5d20 <__aeabi_dmul+0x238>
   d5bca:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5bce:	bfde      	ittt	le
   d5bd0:	2000      	movle	r0, #0
   d5bd2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5bd6:	bd70      	pople	{r4, r5, r6, pc}
   d5bd8:	f1c4 0400 	rsb	r4, r4, #0
   d5bdc:	3c20      	subs	r4, #32
   d5bde:	da35      	bge.n	d5c4c <__aeabi_dmul+0x164>
   d5be0:	340c      	adds	r4, #12
   d5be2:	dc1b      	bgt.n	d5c1c <__aeabi_dmul+0x134>
   d5be4:	f104 0414 	add.w	r4, r4, #20
   d5be8:	f1c4 0520 	rsb	r5, r4, #32
   d5bec:	fa00 f305 	lsl.w	r3, r0, r5
   d5bf0:	fa20 f004 	lsr.w	r0, r0, r4
   d5bf4:	fa01 f205 	lsl.w	r2, r1, r5
   d5bf8:	ea40 0002 	orr.w	r0, r0, r2
   d5bfc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5c00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5c04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5c08:	fa21 f604 	lsr.w	r6, r1, r4
   d5c0c:	eb42 0106 	adc.w	r1, r2, r6
   d5c10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c14:	bf08      	it	eq
   d5c16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c1a:	bd70      	pop	{r4, r5, r6, pc}
   d5c1c:	f1c4 040c 	rsb	r4, r4, #12
   d5c20:	f1c4 0520 	rsb	r5, r4, #32
   d5c24:	fa00 f304 	lsl.w	r3, r0, r4
   d5c28:	fa20 f005 	lsr.w	r0, r0, r5
   d5c2c:	fa01 f204 	lsl.w	r2, r1, r4
   d5c30:	ea40 0002 	orr.w	r0, r0, r2
   d5c34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5c3c:	f141 0100 	adc.w	r1, r1, #0
   d5c40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c44:	bf08      	it	eq
   d5c46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c4a:	bd70      	pop	{r4, r5, r6, pc}
   d5c4c:	f1c4 0520 	rsb	r5, r4, #32
   d5c50:	fa00 f205 	lsl.w	r2, r0, r5
   d5c54:	ea4e 0e02 	orr.w	lr, lr, r2
   d5c58:	fa20 f304 	lsr.w	r3, r0, r4
   d5c5c:	fa01 f205 	lsl.w	r2, r1, r5
   d5c60:	ea43 0302 	orr.w	r3, r3, r2
   d5c64:	fa21 f004 	lsr.w	r0, r1, r4
   d5c68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5c6c:	fa21 f204 	lsr.w	r2, r1, r4
   d5c70:	ea20 0002 	bic.w	r0, r0, r2
   d5c74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5c78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c7c:	bf08      	it	eq
   d5c7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5c82:	bd70      	pop	{r4, r5, r6, pc}
   d5c84:	f094 0f00 	teq	r4, #0
   d5c88:	d10f      	bne.n	d5caa <__aeabi_dmul+0x1c2>
   d5c8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5c8e:	0040      	lsls	r0, r0, #1
   d5c90:	eb41 0101 	adc.w	r1, r1, r1
   d5c94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5c98:	bf08      	it	eq
   d5c9a:	3c01      	subeq	r4, #1
   d5c9c:	d0f7      	beq.n	d5c8e <__aeabi_dmul+0x1a6>
   d5c9e:	ea41 0106 	orr.w	r1, r1, r6
   d5ca2:	f095 0f00 	teq	r5, #0
   d5ca6:	bf18      	it	ne
   d5ca8:	4770      	bxne	lr
   d5caa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5cae:	0052      	lsls	r2, r2, #1
   d5cb0:	eb43 0303 	adc.w	r3, r3, r3
   d5cb4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5cb8:	bf08      	it	eq
   d5cba:	3d01      	subeq	r5, #1
   d5cbc:	d0f7      	beq.n	d5cae <__aeabi_dmul+0x1c6>
   d5cbe:	ea43 0306 	orr.w	r3, r3, r6
   d5cc2:	4770      	bx	lr
   d5cc4:	ea94 0f0c 	teq	r4, ip
   d5cc8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5ccc:	bf18      	it	ne
   d5cce:	ea95 0f0c 	teqne	r5, ip
   d5cd2:	d00c      	beq.n	d5cee <__aeabi_dmul+0x206>
   d5cd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5cd8:	bf18      	it	ne
   d5cda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5cde:	d1d1      	bne.n	d5c84 <__aeabi_dmul+0x19c>
   d5ce0:	ea81 0103 	eor.w	r1, r1, r3
   d5ce4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5ce8:	f04f 0000 	mov.w	r0, #0
   d5cec:	bd70      	pop	{r4, r5, r6, pc}
   d5cee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5cf2:	bf06      	itte	eq
   d5cf4:	4610      	moveq	r0, r2
   d5cf6:	4619      	moveq	r1, r3
   d5cf8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5cfc:	d019      	beq.n	d5d32 <__aeabi_dmul+0x24a>
   d5cfe:	ea94 0f0c 	teq	r4, ip
   d5d02:	d102      	bne.n	d5d0a <__aeabi_dmul+0x222>
   d5d04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5d08:	d113      	bne.n	d5d32 <__aeabi_dmul+0x24a>
   d5d0a:	ea95 0f0c 	teq	r5, ip
   d5d0e:	d105      	bne.n	d5d1c <__aeabi_dmul+0x234>
   d5d10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5d14:	bf1c      	itt	ne
   d5d16:	4610      	movne	r0, r2
   d5d18:	4619      	movne	r1, r3
   d5d1a:	d10a      	bne.n	d5d32 <__aeabi_dmul+0x24a>
   d5d1c:	ea81 0103 	eor.w	r1, r1, r3
   d5d20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5d28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5d2c:	f04f 0000 	mov.w	r0, #0
   d5d30:	bd70      	pop	{r4, r5, r6, pc}
   d5d32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5d36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5d3a:	bd70      	pop	{r4, r5, r6, pc}

000d5d3c <__aeabi_ddiv>:
   d5d3c:	b570      	push	{r4, r5, r6, lr}
   d5d3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5d42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5d46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5d4a:	bf1d      	ittte	ne
   d5d4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5d50:	ea94 0f0c 	teqne	r4, ip
   d5d54:	ea95 0f0c 	teqne	r5, ip
   d5d58:	f000 f8a7 	bleq	d5eaa <__aeabi_ddiv+0x16e>
   d5d5c:	eba4 0405 	sub.w	r4, r4, r5
   d5d60:	ea81 0e03 	eor.w	lr, r1, r3
   d5d64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5d68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5d6c:	f000 8088 	beq.w	d5e80 <__aeabi_ddiv+0x144>
   d5d70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5d74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5d78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5d7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5d80:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5d84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5d88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5d8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5d90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5d94:	429d      	cmp	r5, r3
   d5d96:	bf08      	it	eq
   d5d98:	4296      	cmpeq	r6, r2
   d5d9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5d9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5da2:	d202      	bcs.n	d5daa <__aeabi_ddiv+0x6e>
   d5da4:	085b      	lsrs	r3, r3, #1
   d5da6:	ea4f 0232 	mov.w	r2, r2, rrx
   d5daa:	1ab6      	subs	r6, r6, r2
   d5dac:	eb65 0503 	sbc.w	r5, r5, r3
   d5db0:	085b      	lsrs	r3, r3, #1
   d5db2:	ea4f 0232 	mov.w	r2, r2, rrx
   d5db6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5dba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5dbe:	ebb6 0e02 	subs.w	lr, r6, r2
   d5dc2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5dc6:	bf22      	ittt	cs
   d5dc8:	1ab6      	subcs	r6, r6, r2
   d5dca:	4675      	movcs	r5, lr
   d5dcc:	ea40 000c 	orrcs.w	r0, r0, ip
   d5dd0:	085b      	lsrs	r3, r3, #1
   d5dd2:	ea4f 0232 	mov.w	r2, r2, rrx
   d5dd6:	ebb6 0e02 	subs.w	lr, r6, r2
   d5dda:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5dde:	bf22      	ittt	cs
   d5de0:	1ab6      	subcs	r6, r6, r2
   d5de2:	4675      	movcs	r5, lr
   d5de4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5de8:	085b      	lsrs	r3, r3, #1
   d5dea:	ea4f 0232 	mov.w	r2, r2, rrx
   d5dee:	ebb6 0e02 	subs.w	lr, r6, r2
   d5df2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5df6:	bf22      	ittt	cs
   d5df8:	1ab6      	subcs	r6, r6, r2
   d5dfa:	4675      	movcs	r5, lr
   d5dfc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5e00:	085b      	lsrs	r3, r3, #1
   d5e02:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e06:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e0e:	bf22      	ittt	cs
   d5e10:	1ab6      	subcs	r6, r6, r2
   d5e12:	4675      	movcs	r5, lr
   d5e14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5e18:	ea55 0e06 	orrs.w	lr, r5, r6
   d5e1c:	d018      	beq.n	d5e50 <__aeabi_ddiv+0x114>
   d5e1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5e22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5e26:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5e2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5e2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5e32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5e36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5e3a:	d1c0      	bne.n	d5dbe <__aeabi_ddiv+0x82>
   d5e3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e40:	d10b      	bne.n	d5e5a <__aeabi_ddiv+0x11e>
   d5e42:	ea41 0100 	orr.w	r1, r1, r0
   d5e46:	f04f 0000 	mov.w	r0, #0
   d5e4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5e4e:	e7b6      	b.n	d5dbe <__aeabi_ddiv+0x82>
   d5e50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5e54:	bf04      	itt	eq
   d5e56:	4301      	orreq	r1, r0
   d5e58:	2000      	moveq	r0, #0
   d5e5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5e5e:	bf88      	it	hi
   d5e60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5e64:	f63f aeaf 	bhi.w	d5bc6 <__aeabi_dmul+0xde>
   d5e68:	ebb5 0c03 	subs.w	ip, r5, r3
   d5e6c:	bf04      	itt	eq
   d5e6e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5e72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5e76:	f150 0000 	adcs.w	r0, r0, #0
   d5e7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5e7e:	bd70      	pop	{r4, r5, r6, pc}
   d5e80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5e84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5e88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5e8c:	bfc2      	ittt	gt
   d5e8e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5e92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5e96:	bd70      	popgt	{r4, r5, r6, pc}
   d5e98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5e9c:	f04f 0e00 	mov.w	lr, #0
   d5ea0:	3c01      	subs	r4, #1
   d5ea2:	e690      	b.n	d5bc6 <__aeabi_dmul+0xde>
   d5ea4:	ea45 0e06 	orr.w	lr, r5, r6
   d5ea8:	e68d      	b.n	d5bc6 <__aeabi_dmul+0xde>
   d5eaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5eae:	ea94 0f0c 	teq	r4, ip
   d5eb2:	bf08      	it	eq
   d5eb4:	ea95 0f0c 	teqeq	r5, ip
   d5eb8:	f43f af3b 	beq.w	d5d32 <__aeabi_dmul+0x24a>
   d5ebc:	ea94 0f0c 	teq	r4, ip
   d5ec0:	d10a      	bne.n	d5ed8 <__aeabi_ddiv+0x19c>
   d5ec2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5ec6:	f47f af34 	bne.w	d5d32 <__aeabi_dmul+0x24a>
   d5eca:	ea95 0f0c 	teq	r5, ip
   d5ece:	f47f af25 	bne.w	d5d1c <__aeabi_dmul+0x234>
   d5ed2:	4610      	mov	r0, r2
   d5ed4:	4619      	mov	r1, r3
   d5ed6:	e72c      	b.n	d5d32 <__aeabi_dmul+0x24a>
   d5ed8:	ea95 0f0c 	teq	r5, ip
   d5edc:	d106      	bne.n	d5eec <__aeabi_ddiv+0x1b0>
   d5ede:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5ee2:	f43f aefd 	beq.w	d5ce0 <__aeabi_dmul+0x1f8>
   d5ee6:	4610      	mov	r0, r2
   d5ee8:	4619      	mov	r1, r3
   d5eea:	e722      	b.n	d5d32 <__aeabi_dmul+0x24a>
   d5eec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5ef0:	bf18      	it	ne
   d5ef2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5ef6:	f47f aec5 	bne.w	d5c84 <__aeabi_dmul+0x19c>
   d5efa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5efe:	f47f af0d 	bne.w	d5d1c <__aeabi_dmul+0x234>
   d5f02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5f06:	f47f aeeb 	bne.w	d5ce0 <__aeabi_dmul+0x1f8>
   d5f0a:	e712      	b.n	d5d32 <__aeabi_dmul+0x24a>

000d5f0c <__gedf2>:
   d5f0c:	f04f 3cff 	mov.w	ip, #4294967295
   d5f10:	e006      	b.n	d5f20 <__cmpdf2+0x4>
   d5f12:	bf00      	nop

000d5f14 <__ledf2>:
   d5f14:	f04f 0c01 	mov.w	ip, #1
   d5f18:	e002      	b.n	d5f20 <__cmpdf2+0x4>
   d5f1a:	bf00      	nop

000d5f1c <__cmpdf2>:
   d5f1c:	f04f 0c01 	mov.w	ip, #1
   d5f20:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5f24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5f28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5f30:	bf18      	it	ne
   d5f32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5f36:	d01b      	beq.n	d5f70 <__cmpdf2+0x54>
   d5f38:	b001      	add	sp, #4
   d5f3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5f3e:	bf0c      	ite	eq
   d5f40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5f44:	ea91 0f03 	teqne	r1, r3
   d5f48:	bf02      	ittt	eq
   d5f4a:	ea90 0f02 	teqeq	r0, r2
   d5f4e:	2000      	moveq	r0, #0
   d5f50:	4770      	bxeq	lr
   d5f52:	f110 0f00 	cmn.w	r0, #0
   d5f56:	ea91 0f03 	teq	r1, r3
   d5f5a:	bf58      	it	pl
   d5f5c:	4299      	cmppl	r1, r3
   d5f5e:	bf08      	it	eq
   d5f60:	4290      	cmpeq	r0, r2
   d5f62:	bf2c      	ite	cs
   d5f64:	17d8      	asrcs	r0, r3, #31
   d5f66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5f6a:	f040 0001 	orr.w	r0, r0, #1
   d5f6e:	4770      	bx	lr
   d5f70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5f74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f78:	d102      	bne.n	d5f80 <__cmpdf2+0x64>
   d5f7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d5f7e:	d107      	bne.n	d5f90 <__cmpdf2+0x74>
   d5f80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5f84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5f88:	d1d6      	bne.n	d5f38 <__cmpdf2+0x1c>
   d5f8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d5f8e:	d0d3      	beq.n	d5f38 <__cmpdf2+0x1c>
   d5f90:	f85d 0b04 	ldr.w	r0, [sp], #4
   d5f94:	4770      	bx	lr
   d5f96:	bf00      	nop

000d5f98 <__aeabi_cdrcmple>:
   d5f98:	4684      	mov	ip, r0
   d5f9a:	4610      	mov	r0, r2
   d5f9c:	4662      	mov	r2, ip
   d5f9e:	468c      	mov	ip, r1
   d5fa0:	4619      	mov	r1, r3
   d5fa2:	4663      	mov	r3, ip
   d5fa4:	e000      	b.n	d5fa8 <__aeabi_cdcmpeq>
   d5fa6:	bf00      	nop

000d5fa8 <__aeabi_cdcmpeq>:
   d5fa8:	b501      	push	{r0, lr}
   d5faa:	f7ff ffb7 	bl	d5f1c <__cmpdf2>
   d5fae:	2800      	cmp	r0, #0
   d5fb0:	bf48      	it	mi
   d5fb2:	f110 0f00 	cmnmi.w	r0, #0
   d5fb6:	bd01      	pop	{r0, pc}

000d5fb8 <__aeabi_dcmpeq>:
   d5fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5fbc:	f7ff fff4 	bl	d5fa8 <__aeabi_cdcmpeq>
   d5fc0:	bf0c      	ite	eq
   d5fc2:	2001      	moveq	r0, #1
   d5fc4:	2000      	movne	r0, #0
   d5fc6:	f85d fb08 	ldr.w	pc, [sp], #8
   d5fca:	bf00      	nop

000d5fcc <__aeabi_dcmplt>:
   d5fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5fd0:	f7ff ffea 	bl	d5fa8 <__aeabi_cdcmpeq>
   d5fd4:	bf34      	ite	cc
   d5fd6:	2001      	movcc	r0, #1
   d5fd8:	2000      	movcs	r0, #0
   d5fda:	f85d fb08 	ldr.w	pc, [sp], #8
   d5fde:	bf00      	nop

000d5fe0 <__aeabi_dcmple>:
   d5fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5fe4:	f7ff ffe0 	bl	d5fa8 <__aeabi_cdcmpeq>
   d5fe8:	bf94      	ite	ls
   d5fea:	2001      	movls	r0, #1
   d5fec:	2000      	movhi	r0, #0
   d5fee:	f85d fb08 	ldr.w	pc, [sp], #8
   d5ff2:	bf00      	nop

000d5ff4 <__aeabi_dcmpge>:
   d5ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d5ff8:	f7ff ffce 	bl	d5f98 <__aeabi_cdrcmple>
   d5ffc:	bf94      	ite	ls
   d5ffe:	2001      	movls	r0, #1
   d6000:	2000      	movhi	r0, #0
   d6002:	f85d fb08 	ldr.w	pc, [sp], #8
   d6006:	bf00      	nop

000d6008 <__aeabi_dcmpgt>:
   d6008:	f84d ed08 	str.w	lr, [sp, #-8]!
   d600c:	f7ff ffc4 	bl	d5f98 <__aeabi_cdrcmple>
   d6010:	bf34      	ite	cc
   d6012:	2001      	movcc	r0, #1
   d6014:	2000      	movcs	r0, #0
   d6016:	f85d fb08 	ldr.w	pc, [sp], #8
   d601a:	bf00      	nop

000d601c <__cxa_atexit>:
   d601c:	b510      	push	{r4, lr}
   d601e:	4c05      	ldr	r4, [pc, #20]	; (d6034 <__cxa_atexit+0x18>)
   d6020:	4613      	mov	r3, r2
   d6022:	b12c      	cbz	r4, d6030 <__cxa_atexit+0x14>
   d6024:	460a      	mov	r2, r1
   d6026:	4601      	mov	r1, r0
   d6028:	2002      	movs	r0, #2
   d602a:	f3af 8000 	nop.w
   d602e:	bd10      	pop	{r4, pc}
   d6030:	4620      	mov	r0, r4
   d6032:	e7fc      	b.n	d602e <__cxa_atexit+0x12>
   d6034:	00000000 	.word	0x00000000

000d6038 <memcpy>:
   d6038:	440a      	add	r2, r1
   d603a:	4291      	cmp	r1, r2
   d603c:	f100 33ff 	add.w	r3, r0, #4294967295
   d6040:	d100      	bne.n	d6044 <memcpy+0xc>
   d6042:	4770      	bx	lr
   d6044:	b510      	push	{r4, lr}
   d6046:	f811 4b01 	ldrb.w	r4, [r1], #1
   d604a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d604e:	4291      	cmp	r1, r2
   d6050:	d1f9      	bne.n	d6046 <memcpy+0xe>
   d6052:	bd10      	pop	{r4, pc}

000d6054 <memset>:
   d6054:	4402      	add	r2, r0
   d6056:	4603      	mov	r3, r0
   d6058:	4293      	cmp	r3, r2
   d605a:	d100      	bne.n	d605e <memset+0xa>
   d605c:	4770      	bx	lr
   d605e:	f803 1b01 	strb.w	r1, [r3], #1
   d6062:	e7f9      	b.n	d6058 <memset+0x4>

000d6064 <srand>:
   d6064:	b538      	push	{r3, r4, r5, lr}
   d6066:	4b0d      	ldr	r3, [pc, #52]	; (d609c <srand+0x38>)
   d6068:	681d      	ldr	r5, [r3, #0]
   d606a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d606c:	4604      	mov	r4, r0
   d606e:	b97b      	cbnz	r3, d6090 <srand+0x2c>
   d6070:	2018      	movs	r0, #24
   d6072:	f7fe fe4b 	bl	d4d0c <malloc>
   d6076:	4a0a      	ldr	r2, [pc, #40]	; (d60a0 <srand+0x3c>)
   d6078:	4b0a      	ldr	r3, [pc, #40]	; (d60a4 <srand+0x40>)
   d607a:	63a8      	str	r0, [r5, #56]	; 0x38
   d607c:	e9c0 2300 	strd	r2, r3, [r0]
   d6080:	4b09      	ldr	r3, [pc, #36]	; (d60a8 <srand+0x44>)
   d6082:	6083      	str	r3, [r0, #8]
   d6084:	230b      	movs	r3, #11
   d6086:	8183      	strh	r3, [r0, #12]
   d6088:	2201      	movs	r2, #1
   d608a:	2300      	movs	r3, #0
   d608c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6090:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6092:	2200      	movs	r2, #0
   d6094:	611c      	str	r4, [r3, #16]
   d6096:	615a      	str	r2, [r3, #20]
   d6098:	bd38      	pop	{r3, r4, r5, pc}
   d609a:	bf00      	nop
   d609c:	2003e498 	.word	0x2003e498
   d60a0:	abcd330e 	.word	0xabcd330e
   d60a4:	e66d1234 	.word	0xe66d1234
   d60a8:	0005deec 	.word	0x0005deec

000d60ac <strlen>:
   d60ac:	4603      	mov	r3, r0
   d60ae:	f813 2b01 	ldrb.w	r2, [r3], #1
   d60b2:	2a00      	cmp	r2, #0
   d60b4:	d1fb      	bne.n	d60ae <strlen+0x2>
   d60b6:	1a18      	subs	r0, r3, r0
   d60b8:	3801      	subs	r0, #1
   d60ba:	4770      	bx	lr

000d60bc <dynalib_user>:
   d60bc:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d60cc:	0000 0000 6e55 6d20 7365 6173 6567 7300     ....Un message.s
   d60dc:	6e65 6964 676e 6854 6572 6461 0000 0000     endingThread....

000d60ec <_ZTVN5spark13EthernetClassE>:
	...
   d60f4:	4dab 000d 4da1 000d 4d97 000d 4d8d 000d     .M...M...M...M..
   d6104:	4d81 000d 4d75 000d 5515 000d 551d 000d     .M..uM...U...U..
   d6114:	4d69 000d 4d61 000d 4d57 000d 4d4d 000d     iM..aM..WM..MM..
   d6124:	554d 000d 7061 0070 5925 252d 2d6d 6425     MU..app.%Y-%m-%d
   d6134:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d6144:	6d69 0065                                   ime.

000d6148 <_ZTV9IPAddress>:
	...
   d6150:	50a9 000d 5099 000d 509b 000d               .P...P...P..

000d615c <_ZTV9USBSerial>:
	...
   d6164:	517f 000d 51e7 000d 51bd 000d 4e51 000d     .Q...Q...Q..QN..
   d6174:	51af 000d 5181 000d 5191 000d 51e1 000d     .Q...Q...Q...Q..
   d6184:	51a1 000d 517b 000d                         .Q..{Q..

000d618c <_ZTV11USARTSerial>:
	...
   d6194:	52e1 000d 534d 000d 5325 000d 4e51 000d     .R..MS..%S..QN..
   d61a4:	52f5 000d 5311 000d 5303 000d 531f 000d     .R...S...S...S..
   d61b4:	52e3 000d 52e7 000d                         .R...R..

000d61bc <_ZTV7TwoWire>:
	...
   d61c4:	53dd 000d 5427 000d 53ff 000d 53df 000d     .S..'T...S...S..
   d61d4:	5407 000d 540f 000d 5417 000d 541f 000d     .T...T...T...T..

000d61e4 <_ZTVN5spark9WiFiClassE>:
	...
   d61ec:	54b7 000d 54ad 000d 54a3 000d 5459 000d     .T...T...T..YT..
   d61fc:	5497 000d 548b 000d 5515 000d 551d 000d     .T...T...U...U..
   d620c:	547f 000d 5477 000d 546d 000d 5463 000d     .T..wT..mT..cT..
   d621c:	554d 000d                                   MU..

000d6220 <_ZTVN5spark12NetworkClassE>:
	...
   d6228:	54d5 000d 54df 000d 54e9 000d 54f3 000d     .T...T...T...T..
   d6238:	54fd 000d 5509 000d 5515 000d 551d 000d     .T...U...U...U..
   d6248:	5525 000d 5531 000d 5539 000d 5543 000d     %U..1U..9U..CU..
   d6258:	554d 000d                                   MU..

000d625c <_ZSt7nothrow>:
	...

000d625d <link_const_variable_data_end>:
   d625d:	00          	.byte	0x00
	...

000d6260 <link_constructors_location>:
   d6260:	000d4861 	.word	0x000d4861
   d6264:	000d4db5 	.word	0x000d4db5
   d6268:	000d4ddd 	.word	0x000d4ddd
   d626c:	000d4e29 	.word	0x000d4e29
   d6270:	000d4f11 	.word	0x000d4f11
   d6274:	000d4f21 	.word	0x000d4f21
   d6278:	000d4f59 	.word	0x000d4f59
   d627c:	000d54c1 	.word	0x000d54c1
   d6280:	000d5621 	.word	0x000d5621

000d6284 <link_constructors_end>:
	...
