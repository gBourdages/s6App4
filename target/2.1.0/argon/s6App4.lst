
c:/Users/Gabriel/Desktop/s6App4/target/2.1.0/argon/s6App4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002304  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6320  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e484  000d6324  0001e484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002f8  2003e4f8  2003e4f8  0002e4f8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6398  000d6398  00026398  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d63c0  000d63c0  000263c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00113ac0  00000000  00000000  000263c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000130d9  00000000  00000000  00139e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00022eff  00000000  00000000  0014cf5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002390  00000000  00000000  0016fe5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006790  00000000  00000000  001721ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003515c  00000000  00000000  0017897c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f82d  00000000  00000000  001adad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00103a56  00000000  00000000  001dd305  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005e90  00000000  00000000  002e0d5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f847 	bl	d60c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f84f 	bl	d60dc <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e484 	.word	0x2003e484
   d4048:	000d6324 	.word	0x000d6324
   d404c:	2003e4f8 	.word	0x2003e4f8
   d4050:	2003e4f8 	.word	0x2003e4f8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 f82d 	bl	d50bc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d62f4 	.word	0x000d62f4
   d407c:	000d6318 	.word	0x000d6318

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b88a 	b.w	d4198 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8a3 	bl	d41d0 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bfd7 	b.w	d5040 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 be7f 	b.w	d4d94 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 be7d 	b.w	d4d94 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 be83 	b.w	d4da4 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40b0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	2b2f      	cmp	r3, #47	; 0x2f
{
   d40b6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40b8:	d904      	bls.n	d40c4 <nrf_gpio_pin_port_decode+0x14>
   d40ba:	4a07      	ldr	r2, [pc, #28]	; (d40d8 <nrf_gpio_pin_port_decode+0x28>)
   d40bc:	2100      	movs	r1, #0
   d40be:	200a      	movs	r0, #10
   d40c0:	f000 fdcc 	bl	d4c5c <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40c4:	6823      	ldr	r3, [r4, #0]
   d40c6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40c8:	bf83      	ittte	hi
   d40ca:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d40ce:	4803      	ldrhi	r0, [pc, #12]	; (d40dc <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40d0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d40d2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d40d6:	bd10      	pop	{r4, pc}
   d40d8:	000d4a3d 	.word	0x000d4a3d
   d40dc:	50000300 	.word	0x50000300

000d40e0 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40e0:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d40e2:	2301      	movs	r3, #1
   d40e4:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d40e6:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d40e8:	4604      	mov	r4, r0
        if (th->func) {
   d40ea:	b143      	cbz	r3, d40fe <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d40ec:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40ee:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d40f0:	2301      	movs	r3, #1
   d40f2:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d40f4:	2000      	movs	r0, #0
    }
   d40f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d40fa:	f000 bcdf 	b.w	d4abc <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d40fe:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d4100:	2800      	cmp	r0, #0
   d4102:	d0f5      	beq.n	d40f0 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d4104:	6883      	ldr	r3, [r0, #8]
   d4106:	b90b      	cbnz	r3, d410c <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d4108:	f001 fb73 	bl	d57f2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d410c:	68c3      	ldr	r3, [r0, #12]
   d410e:	e7ee      	b.n	d40ee <_ZN6Thread3runEPv+0xe>

000d4110 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4110:	b510      	push	{r4, lr}
   d4112:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4114:	6800      	ldr	r0, [r0, #0]
   d4116:	b108      	cbz	r0, d411c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4118:	f000 fe44 	bl	d4da4 <free>
class SystemClass {
   d411c:	4620      	mov	r0, r4
   d411e:	bd10      	pop	{r4, pc}

000d4120 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d4120:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d4122:	6804      	ldr	r4, [r0, #0]
      operator()(_Tp* __ptr) const
   d4124:	4605      	mov	r5, r0
	if (__ptr != nullptr)
   d4126:	b14c      	cbz	r4, d413c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x1c>
      if (_M_manager)
   d4128:	68a3      	ldr	r3, [r4, #8]
   d412a:	b11b      	cbz	r3, d4134 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x14>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d412c:	2203      	movs	r2, #3
   d412e:	4621      	mov	r1, r4
   d4130:	4620      	mov	r0, r4
   d4132:	4798      	blx	r3
	delete __ptr;
   d4134:	2110      	movs	r1, #16
   d4136:	4620      	mov	r0, r4
   d4138:	f001 fb55 	bl	d57e6 <_ZdlPvj>
   d413c:	4628      	mov	r0, r5
   d413e:	2114      	movs	r1, #20
      }
   d4140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d4144:	f001 bb4f 	b.w	d57e6 <_ZdlPvj>

000d4148 <_ZN6ThreadD1Ev>:
    ~Thread()
   d4148:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d414a:	6803      	ldr	r3, [r0, #0]
   d414c:	4604      	mov	r4, r0
        if (!isValid())
   d414e:	b19b      	cbz	r3, d4178 <_ZN6ThreadD1Ev+0x30>
        return isValid() && os_thread_is_current(d_->handle);
   d4150:	6858      	ldr	r0, [r3, #4]
   d4152:	f000 fc8b 	bl	d4a6c <os_thread_is_current>
   d4156:	b978      	cbnz	r0, d4178 <_ZN6ThreadD1Ev+0x30>
   d4158:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d415a:	7c5a      	ldrb	r2, [r3, #17]
   d415c:	b912      	cbnz	r2, d4164 <_ZN6ThreadD1Ev+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d415e:	6858      	ldr	r0, [r3, #4]
   d4160:	f000 fc8c 	bl	d4a7c <os_thread_join>
        os_thread_cleanup(d_->handle);
   d4164:	6823      	ldr	r3, [r4, #0]
   d4166:	6858      	ldr	r0, [r3, #4]
   d4168:	f000 fc90 	bl	d4a8c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d416c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d416e:	2300      	movs	r3, #0
   d4170:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d4172:	b108      	cbz	r0, d4178 <_ZN6ThreadD1Ev+0x30>
      operator()(_Tp* __ptr) const
   d4174:	f7ff ffd4 	bl	d4120 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
	if (__ptr != nullptr)
   d4178:	6820      	ldr	r0, [r4, #0]
   d417a:	b108      	cbz	r0, d4180 <_ZN6ThreadD1Ev+0x38>
      operator()(_Tp* __ptr) const
   d417c:	f7ff ffd0 	bl	d4120 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d4180:	4620      	mov	r0, r4
   d4182:	bd10      	pop	{r4, pc}

000d4184 <_ZN11SystemClass10ticksDelayEm>:
        return SYSTEM_US_TICKS;
    }

    static inline uint32_t ticks()
    {
        return SYSTEM_TICK_COUNTER;
   d4184:	4b03      	ldr	r3, [pc, #12]	; (d4194 <_ZN11SystemClass10ticksDelayEm+0x10>)
   d4186:	6859      	ldr	r1, [r3, #4]
   d4188:	685a      	ldr	r2, [r3, #4]
    }

    static inline void ticksDelay(uint32_t duration)
    {
        uint32_t start = ticks();
        while ((ticks()-start)<duration) {}
   d418a:	1a52      	subs	r2, r2, r1
   d418c:	4282      	cmp	r2, r0
   d418e:	d3fb      	bcc.n	d4188 <_ZN11SystemClass10ticksDelayEm+0x4>
    }
   d4190:	4770      	bx	lr
   d4192:	bf00      	nop
   d4194:	e0001000 	.word	0xe0001000

000d4198 <setup>:
volatile uint8_t endByteBuffer = 0b00000000;
volatile uint8_t byteBuffer[255] = {};

volatile bool inputPinValue;

void setup() {
   d4198:	b507      	push	{r0, r1, r2, lr}
	Serial.begin(9600);
   d419a:	f001 f88f 	bl	d52bc <_Z16_fetch_usbserialv>
   d419e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41a2:	f001 f87f 	bl	d52a4 <_ZN9USBSerial5beginEl>
  pinMode(OUTPUT_PIN, OUTPUT_OPEN_DRAIN);
   d41a6:	2105      	movs	r1, #5
   d41a8:	2002      	movs	r0, #2
   d41aa:	f001 fac5 	bl	d5738 <pinMode>
  pinMode(INPUT_PIN, INPUT_PULLUP);
   d41ae:	2102      	movs	r1, #2
   d41b0:	2004      	movs	r0, #4
   d41b2:	f001 fac1 	bl	d5738 <pinMode>
  attachInterrupt(INPUT_PIN, interrupt, CHANGE);
   d41b6:	2200      	movs	r2, #0
   d41b8:	4904      	ldr	r1, [pc, #16]	; (d41cc <setup+0x34>)
   d41ba:	9200      	str	r2, [sp, #0]
   d41bc:	f04f 33ff 	mov.w	r3, #4294967295
   d41c0:	2004      	movs	r0, #4
   d41c2:	f001 f8a7 	bl	d5314 <_Z15attachInterrupttPFvvE13InterruptModeah>
  
}
   d41c6:	b003      	add	sp, #12
   d41c8:	f85d fb04 	ldr.w	pc, [sp], #4
   d41cc:	000d42bd 	.word	0x000d42bd

000d41d0 <loop>:

void loop() {
}
   d41d0:	4770      	bx	lr
	...

000d41d4 <_Z8resetMEFv>:

void resetMEF() {
  byteCount = 0;
   d41d4:	4a0c      	ldr	r2, [pc, #48]	; (d4208 <_Z8resetMEFv+0x34>)
  preambuleStateTimes = 0;
  startStateTimes = 0;

  headerMask = 0b0000000000000001;
   d41d6:	490d      	ldr	r1, [pc, #52]	; (d420c <_Z8resetMEFv+0x38>)
  byteCount = 0;
   d41d8:	2300      	movs	r3, #0
   d41da:	7013      	strb	r3, [r2, #0]
  preambuleStateTimes = 0;
   d41dc:	4a0c      	ldr	r2, [pc, #48]	; (d4210 <_Z8resetMEFv+0x3c>)
   d41de:	6013      	str	r3, [r2, #0]
  startStateTimes = 0;
   d41e0:	4a0c      	ldr	r2, [pc, #48]	; (d4214 <_Z8resetMEFv+0x40>)
   d41e2:	6013      	str	r3, [r2, #0]
  headerMask = 0b0000000000000001;
   d41e4:	2201      	movs	r2, #1
   d41e6:	800a      	strh	r2, [r1, #0]
  header = 0b0000000000000000;
   d41e8:	490b      	ldr	r1, [pc, #44]	; (d4218 <_Z8resetMEFv+0x44>)
   d41ea:	800b      	strh	r3, [r1, #0]

  msgMask = 0b00000001;
   d41ec:	490b      	ldr	r1, [pc, #44]	; (d421c <_Z8resetMEFv+0x48>)
   d41ee:	700a      	strb	r2, [r1, #0]
  msgBuffer = 0b00000000;
   d41f0:	490b      	ldr	r1, [pc, #44]	; (d4220 <_Z8resetMEFv+0x4c>)
   d41f2:	700b      	strb	r3, [r1, #0]

  crcMask = 0b0000000000000001;
   d41f4:	490b      	ldr	r1, [pc, #44]	; (d4224 <_Z8resetMEFv+0x50>)
   d41f6:	800a      	strh	r2, [r1, #0]
  crcBuffer = 0b0000000000000000;
   d41f8:	490b      	ldr	r1, [pc, #44]	; (d4228 <_Z8resetMEFv+0x54>)
   d41fa:	800b      	strh	r3, [r1, #0]

  endByteMask = 0b00000001;
   d41fc:	490b      	ldr	r1, [pc, #44]	; (d422c <_Z8resetMEFv+0x58>)
   d41fe:	700a      	strb	r2, [r1, #0]
  endByteBuffer = 0b00000000;
   d4200:	4a0b      	ldr	r2, [pc, #44]	; (d4230 <_Z8resetMEFv+0x5c>)
   d4202:	7013      	strb	r3, [r2, #0]
}
   d4204:	4770      	bx	lr
   d4206:	bf00      	nop
   d4208:	2003e60f 	.word	0x2003e60f
   d420c:	2003e488 	.word	0x2003e488
   d4210:	2003e634 	.word	0x2003e634
   d4214:	2003e638 	.word	0x2003e638
   d4218:	2003e614 	.word	0x2003e614
   d421c:	2003e48a 	.word	0x2003e48a
   d4220:	2003e628 	.word	0x2003e628
   d4224:	2003e484 	.word	0x2003e484
   d4228:	2003e610 	.word	0x2003e610
   d422c:	2003e486 	.word	0x2003e486
   d4230:	2003e612 	.word	0x2003e612

000d4234 <_Z18registerHeaderDatab>:
    delay(1000);
	}
}

void registerHeaderData(bool data) {
  if (data)
   d4234:	4a06      	ldr	r2, [pc, #24]	; (d4250 <_Z18registerHeaderDatab+0x1c>)
   d4236:	b128      	cbz	r0, d4244 <_Z18registerHeaderDatab+0x10>
    header |= headerMask;
   d4238:	4906      	ldr	r1, [pc, #24]	; (d4254 <_Z18registerHeaderDatab+0x20>)
   d423a:	8810      	ldrh	r0, [r2, #0]
   d423c:	880b      	ldrh	r3, [r1, #0]
   d423e:	4303      	orrs	r3, r0
   d4240:	b29b      	uxth	r3, r3
   d4242:	800b      	strh	r3, [r1, #0]
  headerMask <<= 1;
   d4244:	8813      	ldrh	r3, [r2, #0]
   d4246:	b29b      	uxth	r3, r3
   d4248:	005b      	lsls	r3, r3, #1
   d424a:	b29b      	uxth	r3, r3
   d424c:	8013      	strh	r3, [r2, #0]
}
   d424e:	4770      	bx	lr
   d4250:	2003e488 	.word	0x2003e488
   d4254:	2003e614 	.word	0x2003e614

000d4258 <_Z15registerMsgDatab>:

void registerMsgData(bool data) {
  if (data)
   d4258:	4a05      	ldr	r2, [pc, #20]	; (d4270 <_Z15registerMsgDatab+0x18>)
   d425a:	b120      	cbz	r0, d4266 <_Z15registerMsgDatab+0xe>
    msgBuffer |= msgMask;
   d425c:	4905      	ldr	r1, [pc, #20]	; (d4274 <_Z15registerMsgDatab+0x1c>)
   d425e:	7810      	ldrb	r0, [r2, #0]
   d4260:	780b      	ldrb	r3, [r1, #0]
   d4262:	4303      	orrs	r3, r0
   d4264:	700b      	strb	r3, [r1, #0]
  msgMask <<= 1;
   d4266:	7813      	ldrb	r3, [r2, #0]
   d4268:	005b      	lsls	r3, r3, #1
   d426a:	b2db      	uxtb	r3, r3
   d426c:	7013      	strb	r3, [r2, #0]
}
   d426e:	4770      	bx	lr
   d4270:	2003e48a 	.word	0x2003e48a
   d4274:	2003e628 	.word	0x2003e628

000d4278 <_Z15registerCRCDatab>:

void registerCRCData(bool data) {
  if (data)
   d4278:	4a06      	ldr	r2, [pc, #24]	; (d4294 <_Z15registerCRCDatab+0x1c>)
   d427a:	b128      	cbz	r0, d4288 <_Z15registerCRCDatab+0x10>
    crcBuffer |= crcMask;
   d427c:	4906      	ldr	r1, [pc, #24]	; (d4298 <_Z15registerCRCDatab+0x20>)
   d427e:	8810      	ldrh	r0, [r2, #0]
   d4280:	880b      	ldrh	r3, [r1, #0]
   d4282:	4303      	orrs	r3, r0
   d4284:	b29b      	uxth	r3, r3
   d4286:	800b      	strh	r3, [r1, #0]
  crcMask <<= 1;
   d4288:	8813      	ldrh	r3, [r2, #0]
   d428a:	b29b      	uxth	r3, r3
   d428c:	005b      	lsls	r3, r3, #1
   d428e:	b29b      	uxth	r3, r3
   d4290:	8013      	strh	r3, [r2, #0]
}
   d4292:	4770      	bx	lr
   d4294:	2003e484 	.word	0x2003e484
   d4298:	2003e610 	.word	0x2003e610

000d429c <_Z19registerEndByteDatab>:

void registerEndByteData(bool data) {
  if (data)
   d429c:	4a05      	ldr	r2, [pc, #20]	; (d42b4 <_Z19registerEndByteDatab+0x18>)
   d429e:	b120      	cbz	r0, d42aa <_Z19registerEndByteDatab+0xe>
    endByteBuffer |= endByteMask;
   d42a0:	4905      	ldr	r1, [pc, #20]	; (d42b8 <_Z19registerEndByteDatab+0x1c>)
   d42a2:	7810      	ldrb	r0, [r2, #0]
   d42a4:	780b      	ldrb	r3, [r1, #0]
   d42a6:	4303      	orrs	r3, r0
   d42a8:	700b      	strb	r3, [r1, #0]
  endByteMask <<= 1;
   d42aa:	7813      	ldrb	r3, [r2, #0]
   d42ac:	005b      	lsls	r3, r3, #1
   d42ae:	b2db      	uxtb	r3, r3
   d42b0:	7013      	strb	r3, [r2, #0]
}
   d42b2:	4770      	bx	lr
   d42b4:	2003e486 	.word	0x2003e486
   d42b8:	2003e612 	.word	0x2003e612

000d42bc <_Z9interruptv>:
void interrupt() {
   d42bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
        return SYSTEM_TICK_COUNTER;
   d42c0:	4bac      	ldr	r3, [pc, #688]	; (d4574 <_Z9interruptv+0x2b8>)
  interruptTick = System.ticks();
   d42c2:	4cad      	ldr	r4, [pc, #692]	; (d4578 <_Z9interruptv+0x2bc>)
   d42c4:	685b      	ldr	r3, [r3, #4]
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42c6:	4ead      	ldr	r6, [pc, #692]	; (d457c <_Z9interruptv+0x2c0>)
   d42c8:	6023      	str	r3, [r4, #0]
   d42ca:	7833      	ldrb	r3, [r6, #0]
   d42cc:	4fac      	ldr	r7, [pc, #688]	; (d4580 <_Z9interruptv+0x2c4>)
   d42ce:	f3bf 8f5b 	dmb	ish
   d42d2:	f013 0f01 	tst.w	r3, #1
   d42d6:	d109      	bne.n	d42ec <_Z9interruptv+0x30>
   d42d8:	4630      	mov	r0, r6
   d42da:	f7ff fee0 	bl	d409e <__cxa_guard_acquire>
   d42de:	b128      	cbz	r0, d42ec <_Z9interruptv+0x30>
   d42e0:	f000 fb7c 	bl	d49dc <HAL_Pin_Map>
   d42e4:	6038      	str	r0, [r7, #0]
   d42e6:	4630      	mov	r0, r6
   d42e8:	f7ff fede 	bl	d40a8 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42ec:	683b      	ldr	r3, [r7, #0]
   d42ee:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42f2:	7833      	ldrb	r3, [r6, #0]
   d42f4:	f3bf 8f5b 	dmb	ish
   d42f8:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42fa:	ea4f 1845 	mov.w	r8, r5, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42fe:	d409      	bmi.n	d4314 <_Z9interruptv+0x58>
   d4300:	489e      	ldr	r0, [pc, #632]	; (d457c <_Z9interruptv+0x2c0>)
   d4302:	f7ff fecc 	bl	d409e <__cxa_guard_acquire>
   d4306:	b128      	cbz	r0, d4314 <_Z9interruptv+0x58>
   d4308:	f000 fb68 	bl	d49dc <HAL_Pin_Map>
   d430c:	6038      	str	r0, [r7, #0]
   d430e:	489b      	ldr	r0, [pc, #620]	; (d457c <_Z9interruptv+0x2c0>)
   d4310:	f7ff feca 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4314:	683b      	ldr	r3, [r7, #0]
  inputPinValue = pinReadFast(INPUT_PIN);
   d4316:	4e9b      	ldr	r6, [pc, #620]	; (d4584 <_Z9interruptv+0x2c8>)
   d4318:	f893 5041 	ldrb.w	r5, [r3, #65]	; 0x41
   d431c:	f005 051f 	and.w	r5, r5, #31
   d4320:	ea45 0508 	orr.w	r5, r5, r8
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4324:	a801      	add	r0, sp, #4
   d4326:	9501      	str	r5, [sp, #4]
   d4328:	f7ff fec2 	bl	d40b0 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d432c:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
    return nrf_gpio_pin_read(nrf_pin);
   d4330:	9501      	str	r5, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4332:	a801      	add	r0, sp, #4
   d4334:	f7ff febc 	bl	d40b0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4338:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   d433a:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
  switch (state) {
   d433e:	4d92      	ldr	r5, [pc, #584]	; (d4588 <_Z9interruptv+0x2cc>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4340:	40d3      	lsrs	r3, r2
  inputPinValue = pinReadFast(INPUT_PIN);
   d4342:	f003 0301 	and.w	r3, r3, #1
   d4346:	7033      	strb	r3, [r6, #0]
  switch (state) {
   d4348:	682b      	ldr	r3, [r5, #0]
   d434a:	2b06      	cmp	r3, #6
   d434c:	d823      	bhi.n	d4396 <_Z9interruptv+0xda>
   d434e:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4352:	0007      	.short	0x0007
   d4354:	0025000c 	.word	0x0025000c
   d4358:	00620033 	.word	0x00620033
   d435c:	00c8009e 	.word	0x00c8009e
    if(inputPinValue)
   d4360:	7833      	ldrb	r3, [r6, #0]
   d4362:	b9c3      	cbnz	r3, d4396 <_Z9interruptv+0xda>
    state = PREAMBULE;
   d4364:	2301      	movs	r3, #1
      state = HEADER;
   d4366:	602b      	str	r3, [r5, #0]
   d4368:	e015      	b.n	d4396 <_Z9interruptv+0xda>
    if(!inputPinValue)
   d436a:	7833      	ldrb	r3, [r6, #0]
   d436c:	b19b      	cbz	r3, d4396 <_Z9interruptv+0xda>
    period = interruptTick - periodStart;
   d436e:	4987      	ldr	r1, [pc, #540]	; (d458c <_Z9interruptv+0x2d0>)
   d4370:	6823      	ldr	r3, [r4, #0]
   d4372:	680a      	ldr	r2, [r1, #0]
   d4374:	1a9b      	subs	r3, r3, r2
   d4376:	4a86      	ldr	r2, [pc, #536]	; (d4590 <_Z9interruptv+0x2d4>)
   d4378:	6013      	str	r3, [r2, #0]
    periodStart = interruptTick;
   d437a:	6823      	ldr	r3, [r4, #0]
   d437c:	600b      	str	r3, [r1, #0]
    if (preambuleStateTimes++ >= 4) {
   d437e:	4985      	ldr	r1, [pc, #532]	; (d4594 <_Z9interruptv+0x2d8>)
   d4380:	680b      	ldr	r3, [r1, #0]
   d4382:	1c58      	adds	r0, r3, #1
   d4384:	2b03      	cmp	r3, #3
   d4386:	6008      	str	r0, [r1, #0]
   d4388:	d905      	bls.n	d4396 <_Z9interruptv+0xda>
      state = START;
   d438a:	2302      	movs	r3, #2
   d438c:	602b      	str	r3, [r5, #0]
      manchesterTicksReceiver = period / 4;
   d438e:	6813      	ldr	r3, [r2, #0]
   d4390:	4a81      	ldr	r2, [pc, #516]	; (d4598 <_Z9interruptv+0x2dc>)
   d4392:	089b      	lsrs	r3, r3, #2
   d4394:	6013      	str	r3, [r2, #0]
}
   d4396:	b002      	add	sp, #8
   d4398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(!inputPinValue)
   d439c:	7833      	ldrb	r3, [r6, #0]
   d439e:	2b00      	cmp	r3, #0
   d43a0:	d0f9      	beq.n	d4396 <_Z9interruptv+0xda>
    if (startStateTimes++ >= 5) {
   d43a2:	4a7e      	ldr	r2, [pc, #504]	; (d459c <_Z9interruptv+0x2e0>)
   d43a4:	6813      	ldr	r3, [r2, #0]
   d43a6:	1c59      	adds	r1, r3, #1
   d43a8:	2b04      	cmp	r3, #4
   d43aa:	6011      	str	r1, [r2, #0]
   d43ac:	d9f3      	bls.n	d4396 <_Z9interruptv+0xda>
      lastStateChange = interruptTick;
   d43ae:	4b7c      	ldr	r3, [pc, #496]	; (d45a0 <_Z9interruptv+0x2e4>)
   d43b0:	6822      	ldr	r2, [r4, #0]
   d43b2:	601a      	str	r2, [r3, #0]
      state = HEADER;
   d43b4:	2303      	movs	r3, #3
   d43b6:	e7d6      	b.n	d4366 <_Z9interruptv+0xaa>
    if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d43b8:	4f79      	ldr	r7, [pc, #484]	; (d45a0 <_Z9interruptv+0x2e4>)
   d43ba:	6820      	ldr	r0, [r4, #0]
   d43bc:	683b      	ldr	r3, [r7, #0]
   d43be:	4a76      	ldr	r2, [pc, #472]	; (d4598 <_Z9interruptv+0x2dc>)
   d43c0:	1ac0      	subs	r0, r0, r3
   d43c2:	f8d2 a000 	ldr.w	sl, [r2]
   d43c6:	f001 fb59 	bl	d5a7c <__aeabi_ui2d>
   d43ca:	4680      	mov	r8, r0
   d43cc:	4650      	mov	r0, sl
   d43ce:	4689      	mov	r9, r1
   d43d0:	f001 fb54 	bl	d5a7c <__aeabi_ui2d>
   d43d4:	4b73      	ldr	r3, [pc, #460]	; (d45a4 <_Z9interruptv+0x2e8>)
   d43d6:	2200      	movs	r2, #0
   d43d8:	f001 fbca 	bl	d5b70 <__aeabi_dmul>
   d43dc:	4602      	mov	r2, r0
   d43de:	460b      	mov	r3, r1
   d43e0:	4640      	mov	r0, r8
   d43e2:	4649      	mov	r1, r9
   d43e4:	f001 fe36 	bl	d6054 <__aeabi_dcmplt>
   d43e8:	2800      	cmp	r0, #0
   d43ea:	d1d4      	bne.n	d4396 <_Z9interruptv+0xda>
    lastStateChange = interruptTick;
   d43ec:	6823      	ldr	r3, [r4, #0]
   d43ee:	603b      	str	r3, [r7, #0]
    registerHeaderData(!inputPinValue);
   d43f0:	7830      	ldrb	r0, [r6, #0]
   d43f2:	f080 0001 	eor.w	r0, r0, #1
   d43f6:	f7ff ff1d 	bl	d4234 <_Z18registerHeaderDatab>
    if (!headerMask) {
   d43fa:	4b6b      	ldr	r3, [pc, #428]	; (d45a8 <_Z9interruptv+0x2ec>)
   d43fc:	881b      	ldrh	r3, [r3, #0]
   d43fe:	b29b      	uxth	r3, r3
   d4400:	2b00      	cmp	r3, #0
   d4402:	d1c8      	bne.n	d4396 <_Z9interruptv+0xda>
      state = MESSAGE;
   d4404:	2304      	movs	r3, #4
   d4406:	602b      	str	r3, [r5, #0]
      msgLength = (header & 0b1111111100000000) >> 8;
   d4408:	4b68      	ldr	r3, [pc, #416]	; (d45ac <_Z9interruptv+0x2f0>)
   d440a:	4a69      	ldr	r2, [pc, #420]	; (d45b0 <_Z9interruptv+0x2f4>)
   d440c:	881b      	ldrh	r3, [r3, #0]
   d440e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d4412:	7013      	strb	r3, [r2, #0]
   d4414:	e7bf      	b.n	d4396 <_Z9interruptv+0xda>
    if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d4416:	4f62      	ldr	r7, [pc, #392]	; (d45a0 <_Z9interruptv+0x2e4>)
   d4418:	6820      	ldr	r0, [r4, #0]
   d441a:	683b      	ldr	r3, [r7, #0]
   d441c:	4a5e      	ldr	r2, [pc, #376]	; (d4598 <_Z9interruptv+0x2dc>)
   d441e:	1ac0      	subs	r0, r0, r3
   d4420:	f8d2 a000 	ldr.w	sl, [r2]
   d4424:	f001 fb2a 	bl	d5a7c <__aeabi_ui2d>
   d4428:	4680      	mov	r8, r0
   d442a:	4650      	mov	r0, sl
   d442c:	4689      	mov	r9, r1
   d442e:	f001 fb25 	bl	d5a7c <__aeabi_ui2d>
   d4432:	4b5c      	ldr	r3, [pc, #368]	; (d45a4 <_Z9interruptv+0x2e8>)
   d4434:	2200      	movs	r2, #0
   d4436:	f001 fb9b 	bl	d5b70 <__aeabi_dmul>
   d443a:	4602      	mov	r2, r0
   d443c:	460b      	mov	r3, r1
   d443e:	4640      	mov	r0, r8
   d4440:	4649      	mov	r1, r9
   d4442:	f001 fe07 	bl	d6054 <__aeabi_dcmplt>
   d4446:	2800      	cmp	r0, #0
   d4448:	d1a5      	bne.n	d4396 <_Z9interruptv+0xda>
    lastStateChange = interruptTick;
   d444a:	6823      	ldr	r3, [r4, #0]
   d444c:	603b      	str	r3, [r7, #0]
    registerMsgData(!inputPinValue);
   d444e:	7830      	ldrb	r0, [r6, #0]
   d4450:	f080 0001 	eor.w	r0, r0, #1
   d4454:	f7ff ff00 	bl	d4258 <_Z15registerMsgDatab>
    if (!msgMask) {
   d4458:	4956      	ldr	r1, [pc, #344]	; (d45b4 <_Z9interruptv+0x2f8>)
   d445a:	780b      	ldrb	r3, [r1, #0]
   d445c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   d4460:	2b00      	cmp	r3, #0
   d4462:	d198      	bne.n	d4396 <_Z9interruptv+0xda>
      byteBuffer[byteCount++] = msgBuffer;
   d4464:	4a54      	ldr	r2, [pc, #336]	; (d45b8 <_Z9interruptv+0x2fc>)
   d4466:	4855      	ldr	r0, [pc, #340]	; (d45bc <_Z9interruptv+0x300>)
   d4468:	7813      	ldrb	r3, [r2, #0]
   d446a:	4f55      	ldr	r7, [pc, #340]	; (d45c0 <_Z9interruptv+0x304>)
   d446c:	b2de      	uxtb	r6, r3
   d446e:	3301      	adds	r3, #1
   d4470:	b2db      	uxtb	r3, r3
   d4472:	7013      	strb	r3, [r2, #0]
   d4474:	7803      	ldrb	r3, [r0, #0]
   d4476:	b2db      	uxtb	r3, r3
   d4478:	55bb      	strb	r3, [r7, r6]
      msgMask = 0b00000001;
   d447a:	2301      	movs	r3, #1
      msgBuffer = 0b00000000;
   d447c:	7004      	strb	r4, [r0, #0]
      msgMask = 0b00000001;
   d447e:	700b      	strb	r3, [r1, #0]
      if (byteCount == msgLength) {
   d4480:	4b4b      	ldr	r3, [pc, #300]	; (d45b0 <_Z9interruptv+0x2f4>)
   d4482:	7812      	ldrb	r2, [r2, #0]
   d4484:	781b      	ldrb	r3, [r3, #0]
   d4486:	429a      	cmp	r2, r3
   d4488:	d185      	bne.n	d4396 <_Z9interruptv+0xda>
        state = CRC;
   d448a:	2305      	movs	r3, #5
   d448c:	e76b      	b.n	d4366 <_Z9interruptv+0xaa>
      if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d448e:	4f44      	ldr	r7, [pc, #272]	; (d45a0 <_Z9interruptv+0x2e4>)
   d4490:	6820      	ldr	r0, [r4, #0]
   d4492:	683b      	ldr	r3, [r7, #0]
   d4494:	4a40      	ldr	r2, [pc, #256]	; (d4598 <_Z9interruptv+0x2dc>)
   d4496:	1ac0      	subs	r0, r0, r3
   d4498:	f8d2 a000 	ldr.w	sl, [r2]
   d449c:	f001 faee 	bl	d5a7c <__aeabi_ui2d>
   d44a0:	4680      	mov	r8, r0
   d44a2:	4650      	mov	r0, sl
   d44a4:	4689      	mov	r9, r1
   d44a6:	f001 fae9 	bl	d5a7c <__aeabi_ui2d>
   d44aa:	4b3e      	ldr	r3, [pc, #248]	; (d45a4 <_Z9interruptv+0x2e8>)
   d44ac:	2200      	movs	r2, #0
   d44ae:	f001 fb5f 	bl	d5b70 <__aeabi_dmul>
   d44b2:	4602      	mov	r2, r0
   d44b4:	460b      	mov	r3, r1
   d44b6:	4640      	mov	r0, r8
   d44b8:	4649      	mov	r1, r9
   d44ba:	f001 fdcb 	bl	d6054 <__aeabi_dcmplt>
   d44be:	2800      	cmp	r0, #0
   d44c0:	f47f af69 	bne.w	d4396 <_Z9interruptv+0xda>
      lastStateChange = interruptTick;
   d44c4:	6823      	ldr	r3, [r4, #0]
   d44c6:	603b      	str	r3, [r7, #0]
      registerCRCData(!inputPinValue);
   d44c8:	7830      	ldrb	r0, [r6, #0]
   d44ca:	f080 0001 	eor.w	r0, r0, #1
   d44ce:	f7ff fed3 	bl	d4278 <_Z15registerCRCDatab>
      if (!crcMask) {
   d44d2:	4b3c      	ldr	r3, [pc, #240]	; (d45c4 <_Z9interruptv+0x308>)
   d44d4:	881b      	ldrh	r3, [r3, #0]
   d44d6:	b29b      	uxth	r3, r3
   d44d8:	2b00      	cmp	r3, #0
   d44da:	f47f af5c 	bne.w	d4396 <_Z9interruptv+0xda>
        state = END;
   d44de:	2306      	movs	r3, #6
   d44e0:	e741      	b.n	d4366 <_Z9interruptv+0xaa>
      if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d44e2:	4f2f      	ldr	r7, [pc, #188]	; (d45a0 <_Z9interruptv+0x2e4>)
   d44e4:	6820      	ldr	r0, [r4, #0]
   d44e6:	683b      	ldr	r3, [r7, #0]
   d44e8:	4a2b      	ldr	r2, [pc, #172]	; (d4598 <_Z9interruptv+0x2dc>)
   d44ea:	1ac0      	subs	r0, r0, r3
   d44ec:	f8d2 a000 	ldr.w	sl, [r2]
   d44f0:	f001 fac4 	bl	d5a7c <__aeabi_ui2d>
   d44f4:	4680      	mov	r8, r0
   d44f6:	4650      	mov	r0, sl
   d44f8:	4689      	mov	r9, r1
   d44fa:	f001 fabf 	bl	d5a7c <__aeabi_ui2d>
   d44fe:	4b29      	ldr	r3, [pc, #164]	; (d45a4 <_Z9interruptv+0x2e8>)
   d4500:	2200      	movs	r2, #0
   d4502:	f001 fb35 	bl	d5b70 <__aeabi_dmul>
   d4506:	4602      	mov	r2, r0
   d4508:	460b      	mov	r3, r1
   d450a:	4640      	mov	r0, r8
   d450c:	4649      	mov	r1, r9
   d450e:	f001 fda1 	bl	d6054 <__aeabi_dcmplt>
   d4512:	2800      	cmp	r0, #0
   d4514:	f47f af3f 	bne.w	d4396 <_Z9interruptv+0xda>
      lastStateChange = interruptTick;
   d4518:	6823      	ldr	r3, [r4, #0]
   d451a:	603b      	str	r3, [r7, #0]
      registerEndByteData(!inputPinValue);
   d451c:	7830      	ldrb	r0, [r6, #0]
   d451e:	f080 0001 	eor.w	r0, r0, #1
   d4522:	f7ff febb 	bl	d429c <_Z19registerEndByteDatab>
      if (!endByteMask) {
   d4526:	4b28      	ldr	r3, [pc, #160]	; (d45c8 <_Z9interruptv+0x30c>)
   d4528:	781b      	ldrb	r3, [r3, #0]
   d452a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d452e:	2b00      	cmp	r3, #0
   d4530:	f47f af31 	bne.w	d4396 <_Z9interruptv+0xda>
        state = WAITING;
   d4534:	602a      	str	r2, [r5, #0]
        Serial.println((char*)byteBuffer);
   d4536:	f000 fec1 	bl	d52bc <_Z16_fetch_usbserialv>
   d453a:	4921      	ldr	r1, [pc, #132]	; (d45c0 <_Z9interruptv+0x304>)
   d453c:	f000 fd03 	bl	d4f46 <_ZN5Print7printlnEPKc>
        Serial.println(crcBuffer);
   d4540:	f000 febc 	bl	d52bc <_Z16_fetch_usbserialv>
   d4544:	4b21      	ldr	r3, [pc, #132]	; (d45cc <_Z9interruptv+0x310>)
   d4546:	8819      	ldrh	r1, [r3, #0]
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4548:	220a      	movs	r2, #10
   d454a:	b289      	uxth	r1, r1
   d454c:	4604      	mov	r4, r0
   d454e:	f000 fd04 	bl	d4f5a <_ZN5Print11printNumberEmh>
        n += println();
   d4552:	4620      	mov	r0, r4
   d4554:	f000 fceb 	bl	d4f2e <_ZN5Print7printlnEv>
        Serial.println(endByteBuffer);
   d4558:	f000 feb0 	bl	d52bc <_Z16_fetch_usbserialv>
   d455c:	4b1c      	ldr	r3, [pc, #112]	; (d45d0 <_Z9interruptv+0x314>)
   d455e:	4604      	mov	r4, r0
   d4560:	7819      	ldrb	r1, [r3, #0]
        return printNumber(val, base) + t;
   d4562:	220a      	movs	r2, #10
   d4564:	f000 fcf9 	bl	d4f5a <_ZN5Print11printNumberEmh>
        n += println();
   d4568:	4620      	mov	r0, r4
   d456a:	f000 fce0 	bl	d4f2e <_ZN5Print7printlnEv>
        resetMEF();
   d456e:	f7ff fe31 	bl	d41d4 <_Z8resetMEFv>
}
   d4572:	e710      	b.n	d4396 <_Z9interruptv+0xda>
   d4574:	e0001000 	.word	0xe0001000
   d4578:	2003e618 	.word	0x2003e618
   d457c:	2003e4fc 	.word	0x2003e4fc
   d4580:	2003e500 	.word	0x2003e500
   d4584:	2003e616 	.word	0x2003e616
   d4588:	2003e63c 	.word	0x2003e63c
   d458c:	2003e630 	.word	0x2003e630
   d4590:	2003e62c 	.word	0x2003e62c
   d4594:	2003e634 	.word	0x2003e634
   d4598:	2003e624 	.word	0x2003e624
   d459c:	2003e638 	.word	0x2003e638
   d45a0:	2003e61c 	.word	0x2003e61c
   d45a4:	3ff80000 	.word	0x3ff80000
   d45a8:	2003e488 	.word	0x2003e488
   d45ac:	2003e614 	.word	0x2003e614
   d45b0:	2003e629 	.word	0x2003e629
   d45b4:	2003e48a 	.word	0x2003e48a
   d45b8:	2003e60f 	.word	0x2003e60f
   d45bc:	2003e628 	.word	0x2003e628
   d45c0:	2003e510 	.word	0x2003e510
   d45c4:	2003e484 	.word	0x2003e484
   d45c8:	2003e486 	.word	0x2003e486
   d45cc:	2003e610 	.word	0x2003e610
   d45d0:	2003e612 	.word	0x2003e612

000d45d4 <_Z17sendManchesterLOWv>:
  sendManchesterHIGH();
  sendManchesterLOW();
  sendManchesterHIGH();
}

void sendManchesterLOW() {
   d45d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d45d6:	4d37      	ldr	r5, [pc, #220]	; (d46b4 <_Z17sendManchesterLOWv+0xe0>)
   d45d8:	4c37      	ldr	r4, [pc, #220]	; (d46b8 <_Z17sendManchesterLOWv+0xe4>)
   d45da:	782b      	ldrb	r3, [r5, #0]
   d45dc:	f3bf 8f5b 	dmb	ish
   d45e0:	f013 0f01 	tst.w	r3, #1
   d45e4:	d109      	bne.n	d45fa <_Z17sendManchesterLOWv+0x26>
   d45e6:	4628      	mov	r0, r5
   d45e8:	f7ff fd59 	bl	d409e <__cxa_guard_acquire>
   d45ec:	b128      	cbz	r0, d45fa <_Z17sendManchesterLOWv+0x26>
   d45ee:	f000 f9f5 	bl	d49dc <HAL_Pin_Map>
   d45f2:	6020      	str	r0, [r4, #0]
   d45f4:	4628      	mov	r0, r5
   d45f6:	f7ff fd57 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d45fa:	6823      	ldr	r3, [r4, #0]
   d45fc:	f893 3020 	ldrb.w	r3, [r3, #32]
   d4600:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4602:	782b      	ldrb	r3, [r5, #0]
   d4604:	f3bf 8f5b 	dmb	ish
   d4608:	07d9      	lsls	r1, r3, #31
   d460a:	d409      	bmi.n	d4620 <_Z17sendManchesterLOWv+0x4c>
   d460c:	4829      	ldr	r0, [pc, #164]	; (d46b4 <_Z17sendManchesterLOWv+0xe0>)
   d460e:	f7ff fd46 	bl	d409e <__cxa_guard_acquire>
   d4612:	b128      	cbz	r0, d4620 <_Z17sendManchesterLOWv+0x4c>
   d4614:	f000 f9e2 	bl	d49dc <HAL_Pin_Map>
   d4618:	6020      	str	r0, [r4, #0]
   d461a:	4826      	ldr	r0, [pc, #152]	; (d46b4 <_Z17sendManchesterLOWv+0xe0>)
   d461c:	f7ff fd44 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4620:	6823      	ldr	r3, [r4, #0]
   d4622:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d4626:	f003 031f 	and.w	r3, r3, #31
   d462a:	4333      	orrs	r3, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d462c:	a801      	add	r0, sp, #4
   d462e:	9301      	str	r3, [sp, #4]
   d4630:	f7ff fd3e 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4634:	9a01      	ldr	r2, [sp, #4]
  pinResetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d4636:	4e21      	ldr	r6, [pc, #132]	; (d46bc <_Z17sendManchesterLOWv+0xe8>)
   d4638:	2301      	movs	r3, #1
   d463a:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d463c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   d4640:	6830      	ldr	r0, [r6, #0]
   d4642:	f7ff fd9f 	bl	d4184 <_ZN11SystemClass10ticksDelayEm>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4646:	782b      	ldrb	r3, [r5, #0]
   d4648:	f3bf 8f5b 	dmb	ish
   d464c:	07da      	lsls	r2, r3, #31
   d464e:	d409      	bmi.n	d4664 <_Z17sendManchesterLOWv+0x90>
   d4650:	4818      	ldr	r0, [pc, #96]	; (d46b4 <_Z17sendManchesterLOWv+0xe0>)
   d4652:	f7ff fd24 	bl	d409e <__cxa_guard_acquire>
   d4656:	b128      	cbz	r0, d4664 <_Z17sendManchesterLOWv+0x90>
   d4658:	f000 f9c0 	bl	d49dc <HAL_Pin_Map>
   d465c:	6020      	str	r0, [r4, #0]
   d465e:	4815      	ldr	r0, [pc, #84]	; (d46b4 <_Z17sendManchesterLOWv+0xe0>)
   d4660:	f7ff fd22 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4664:	6823      	ldr	r3, [r4, #0]
   d4666:	f893 3020 	ldrb.w	r3, [r3, #32]
   d466a:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d466c:	782b      	ldrb	r3, [r5, #0]
   d466e:	f3bf 8f5b 	dmb	ish
   d4672:	07db      	lsls	r3, r3, #31
   d4674:	d409      	bmi.n	d468a <_Z17sendManchesterLOWv+0xb6>
   d4676:	480f      	ldr	r0, [pc, #60]	; (d46b4 <_Z17sendManchesterLOWv+0xe0>)
   d4678:	f7ff fd11 	bl	d409e <__cxa_guard_acquire>
   d467c:	b128      	cbz	r0, d468a <_Z17sendManchesterLOWv+0xb6>
   d467e:	f000 f9ad 	bl	d49dc <HAL_Pin_Map>
   d4682:	6020      	str	r0, [r4, #0]
   d4684:	480b      	ldr	r0, [pc, #44]	; (d46b4 <_Z17sendManchesterLOWv+0xe0>)
   d4686:	f7ff fd0f 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d468a:	6823      	ldr	r3, [r4, #0]
   d468c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d4690:	f003 031f 	and.w	r3, r3, #31
   d4694:	433b      	orrs	r3, r7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4696:	a801      	add	r0, sp, #4
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	f7ff fd09 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d469e:	9a01      	ldr	r2, [sp, #4]
   d46a0:	2301      	movs	r3, #1
   d46a2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d46a4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d46a8:	6830      	ldr	r0, [r6, #0]
   d46aa:	f7ff fd6b 	bl	d4184 <_ZN11SystemClass10ticksDelayEm>
}
   d46ae:	b003      	add	sp, #12
   d46b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d46b2:	bf00      	nop
   d46b4:	2003e4fc 	.word	0x2003e4fc
   d46b8:	2003e500 	.word	0x2003e500
   d46bc:	2003e620 	.word	0x2003e620

000d46c0 <_Z18sendManchesterHIGHv>:

void sendManchesterHIGH() {
   d46c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46c2:	4d37      	ldr	r5, [pc, #220]	; (d47a0 <_Z18sendManchesterHIGHv+0xe0>)
   d46c4:	4c37      	ldr	r4, [pc, #220]	; (d47a4 <_Z18sendManchesterHIGHv+0xe4>)
   d46c6:	782b      	ldrb	r3, [r5, #0]
   d46c8:	f3bf 8f5b 	dmb	ish
   d46cc:	f013 0f01 	tst.w	r3, #1
   d46d0:	d109      	bne.n	d46e6 <_Z18sendManchesterHIGHv+0x26>
   d46d2:	4628      	mov	r0, r5
   d46d4:	f7ff fce3 	bl	d409e <__cxa_guard_acquire>
   d46d8:	b128      	cbz	r0, d46e6 <_Z18sendManchesterHIGHv+0x26>
   d46da:	f000 f97f 	bl	d49dc <HAL_Pin_Map>
   d46de:	6020      	str	r0, [r4, #0]
   d46e0:	4628      	mov	r0, r5
   d46e2:	f7ff fce1 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46e6:	6823      	ldr	r3, [r4, #0]
   d46e8:	f893 3020 	ldrb.w	r3, [r3, #32]
   d46ec:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46ee:	782b      	ldrb	r3, [r5, #0]
   d46f0:	f3bf 8f5b 	dmb	ish
   d46f4:	07d9      	lsls	r1, r3, #31
   d46f6:	d409      	bmi.n	d470c <_Z18sendManchesterHIGHv+0x4c>
   d46f8:	4829      	ldr	r0, [pc, #164]	; (d47a0 <_Z18sendManchesterHIGHv+0xe0>)
   d46fa:	f7ff fcd0 	bl	d409e <__cxa_guard_acquire>
   d46fe:	b128      	cbz	r0, d470c <_Z18sendManchesterHIGHv+0x4c>
   d4700:	f000 f96c 	bl	d49dc <HAL_Pin_Map>
   d4704:	6020      	str	r0, [r4, #0]
   d4706:	4826      	ldr	r0, [pc, #152]	; (d47a0 <_Z18sendManchesterHIGHv+0xe0>)
   d4708:	f7ff fcce 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d470c:	6823      	ldr	r3, [r4, #0]
   d470e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d4712:	f003 031f 	and.w	r3, r3, #31
   d4716:	4333      	orrs	r3, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4718:	a801      	add	r0, sp, #4
   d471a:	9301      	str	r3, [sp, #4]
   d471c:	f7ff fcc8 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4720:	9a01      	ldr	r2, [sp, #4]
  pinSetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d4722:	4e21      	ldr	r6, [pc, #132]	; (d47a8 <_Z18sendManchesterHIGHv+0xe8>)
   d4724:	2301      	movs	r3, #1
   d4726:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d4728:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
   d472c:	6830      	ldr	r0, [r6, #0]
   d472e:	f7ff fd29 	bl	d4184 <_ZN11SystemClass10ticksDelayEm>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4732:	782b      	ldrb	r3, [r5, #0]
   d4734:	f3bf 8f5b 	dmb	ish
   d4738:	07da      	lsls	r2, r3, #31
   d473a:	d409      	bmi.n	d4750 <_Z18sendManchesterHIGHv+0x90>
   d473c:	4818      	ldr	r0, [pc, #96]	; (d47a0 <_Z18sendManchesterHIGHv+0xe0>)
   d473e:	f7ff fcae 	bl	d409e <__cxa_guard_acquire>
   d4742:	b128      	cbz	r0, d4750 <_Z18sendManchesterHIGHv+0x90>
   d4744:	f000 f94a 	bl	d49dc <HAL_Pin_Map>
   d4748:	6020      	str	r0, [r4, #0]
   d474a:	4815      	ldr	r0, [pc, #84]	; (d47a0 <_Z18sendManchesterHIGHv+0xe0>)
   d474c:	f7ff fcac 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4750:	6823      	ldr	r3, [r4, #0]
   d4752:	f893 3020 	ldrb.w	r3, [r3, #32]
   d4756:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4758:	782b      	ldrb	r3, [r5, #0]
   d475a:	f3bf 8f5b 	dmb	ish
   d475e:	07db      	lsls	r3, r3, #31
   d4760:	d409      	bmi.n	d4776 <_Z18sendManchesterHIGHv+0xb6>
   d4762:	480f      	ldr	r0, [pc, #60]	; (d47a0 <_Z18sendManchesterHIGHv+0xe0>)
   d4764:	f7ff fc9b 	bl	d409e <__cxa_guard_acquire>
   d4768:	b128      	cbz	r0, d4776 <_Z18sendManchesterHIGHv+0xb6>
   d476a:	f000 f937 	bl	d49dc <HAL_Pin_Map>
   d476e:	6020      	str	r0, [r4, #0]
   d4770:	480b      	ldr	r0, [pc, #44]	; (d47a0 <_Z18sendManchesterHIGHv+0xe0>)
   d4772:	f7ff fc99 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4776:	6823      	ldr	r3, [r4, #0]
   d4778:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d477c:	f003 031f 	and.w	r3, r3, #31
   d4780:	433b      	orrs	r3, r7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4782:	a801      	add	r0, sp, #4
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	f7ff fc93 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d478a:	9a01      	ldr	r2, [sp, #4]
   d478c:	2301      	movs	r3, #1
   d478e:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   d4790:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d4794:	6830      	ldr	r0, [r6, #0]
   d4796:	f7ff fcf5 	bl	d4184 <_ZN11SystemClass10ticksDelayEm>
}
   d479a:	b003      	add	sp, #12
   d479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d479e:	bf00      	nop
   d47a0:	2003e4fc 	.word	0x2003e4fc
   d47a4:	2003e500 	.word	0x2003e500
   d47a8:	2003e620 	.word	0x2003e620

000d47ac <_Z9preambulev>:
void preambule() {
   d47ac:	b508      	push	{r3, lr}
  sendManchesterLOW();
   d47ae:	f7ff ff11 	bl	d45d4 <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d47b2:	f7ff ff85 	bl	d46c0 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d47b6:	f7ff ff0d 	bl	d45d4 <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d47ba:	f7ff ff81 	bl	d46c0 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d47be:	f7ff ff09 	bl	d45d4 <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d47c2:	f7ff ff7d 	bl	d46c0 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d47c6:	f7ff ff05 	bl	d45d4 <_Z17sendManchesterLOWv>
}
   d47ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendManchesterHIGH();
   d47ce:	f7ff bf77 	b.w	d46c0 <_Z18sendManchesterHIGHv>

000d47d2 <_Z17sendManchesterBitb>:

void sendManchesterBit(bool value) {
  if (value) {
   d47d2:	b108      	cbz	r0, d47d8 <_Z17sendManchesterBitb+0x6>
    sendManchesterHIGH();
   d47d4:	f7ff bf74 	b.w	d46c0 <_Z18sendManchesterHIGHv>
    return;
  }
  sendManchesterLOW();
   d47d8:	f7ff befc 	b.w	d45d4 <_Z17sendManchesterLOWv>

000d47dc <_Z9sendBytesPhh>:
void sendBytes(uint8_t* bytes, uint8_t length) {
   d47dc:	b570      	push	{r4, r5, r6, lr}
   d47de:	4604      	mov	r4, r0
   d47e0:	1846      	adds	r6, r0, r1
  for (int i = 0; i < length; ++i) {
   d47e2:	42b4      	cmp	r4, r6
   d47e4:	d00b      	beq.n	d47fe <_Z9sendBytesPhh+0x22>
    for (int j = 0; j < 8; ++j) {
   d47e6:	2500      	movs	r5, #0
      sendManchesterBit(bytes[i] & (0b00000001 << j));
   d47e8:	7820      	ldrb	r0, [r4, #0]
   d47ea:	4128      	asrs	r0, r5
   d47ec:	f000 0001 	and.w	r0, r0, #1
    for (int j = 0; j < 8; ++j) {
   d47f0:	3501      	adds	r5, #1
      sendManchesterBit(bytes[i] & (0b00000001 << j));
   d47f2:	f7ff ffee 	bl	d47d2 <_Z17sendManchesterBitb>
    for (int j = 0; j < 8; ++j) {
   d47f6:	2d08      	cmp	r5, #8
   d47f8:	d1f6      	bne.n	d47e8 <_Z9sendBytesPhh+0xc>
  for (int i = 0; i < length; ++i) {
   d47fa:	3401      	adds	r4, #1
   d47fc:	e7f1      	b.n	d47e2 <_Z9sendBytesPhh+0x6>
}
   d47fe:	bd70      	pop	{r4, r5, r6, pc}

000d4800 <_Z8sendByteh>:
void sendByte(uint8_t byte) {
   d4800:	b538      	push	{r3, r4, r5, lr}
   d4802:	4605      	mov	r5, r0
  for (int j = 0; j < 8; ++j) {
   d4804:	2400      	movs	r4, #0
      sendManchesterBit(byte & (0b00000001 << j));
   d4806:	fa45 f004 	asr.w	r0, r5, r4
   d480a:	f000 0001 	and.w	r0, r0, #1
  for (int j = 0; j < 8; ++j) {
   d480e:	3401      	adds	r4, #1
      sendManchesterBit(byte & (0b00000001 << j));
   d4810:	f7ff ffdf 	bl	d47d2 <_Z17sendManchesterBitb>
  for (int j = 0; j < 8; ++j) {
   d4814:	2c08      	cmp	r4, #8
   d4816:	d1f6      	bne.n	d4806 <_Z8sendByteh+0x6>
}
   d4818:	bd38      	pop	{r3, r4, r5, pc}

000d481a <_Z12sendDualBytet>:
void sendDualByte(uint16_t byte) {
   d481a:	b538      	push	{r3, r4, r5, lr}
   d481c:	4605      	mov	r5, r0
  for (int j = 0; j < 16; ++j) {
   d481e:	2400      	movs	r4, #0
      sendManchesterBit(byte & (0b0000000000000001 << j));
   d4820:	fa45 f004 	asr.w	r0, r5, r4
   d4824:	f000 0001 	and.w	r0, r0, #1
  for (int j = 0; j < 16; ++j) {
   d4828:	3401      	adds	r4, #1
      sendManchesterBit(byte & (0b0000000000000001 << j));
   d482a:	f7ff ffd2 	bl	d47d2 <_Z17sendManchesterBitb>
  for (int j = 0; j < 16; ++j) {
   d482e:	2c10      	cmp	r4, #16
   d4830:	d1f6      	bne.n	d4820 <_Z12sendDualBytet+0x6>
}
   d4832:	bd38      	pop	{r3, r4, r5, pc}

000d4834 <_Z5crc16Phh>:
}

uint16_t crc16(uint8_t *input_str, uint8_t length ) {
   d4834:	b510      	push	{r4, lr}
   d4836:	4401      	add	r1, r0
   d4838:	4604      	mov	r4, r0
	uint8_t x;
    uint16_t crc = 0xFFFF;
   d483a:	f64f 70ff 	movw	r0, #65535	; 0xffff

    while (length--){
   d483e:	428c      	cmp	r4, r1
   d4840:	d00c      	beq.n	d485c <_Z5crc16Phh+0x28>
        x = crc >> 8 ^ *input_str++;
   d4842:	f814 3b01 	ldrb.w	r3, [r4], #1
   d4846:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
        x ^= x>>4;
   d484a:	ea83 1313 	eor.w	r3, r3, r3, lsr #4
        crc = (crc << 8) ^ ((uint8_t)(x << 12)) ^ ((uint8_t)(x <<5)) ^ ((uint8_t)x);
   d484e:	ea43 2200 	orr.w	r2, r3, r0, lsl #8
   d4852:	015b      	lsls	r3, r3, #5
   d4854:	b2db      	uxtb	r3, r3
   d4856:	4053      	eors	r3, r2
   d4858:	b298      	uxth	r0, r3
    while (length--){
   d485a:	e7f0      	b.n	d483e <_Z5crc16Phh+0xa>
    }
    return crc;
   d485c:	bd10      	pop	{r4, pc}
	...

000d4860 <_Z21sendingThreadFunctionPv>:
void sendingThreadFunction(void *param) {
   d4860:	b570      	push	{r4, r5, r6, lr}
		msgCrc = crc16((uint8_t*)"Un message", 11);
   d4862:	4e1f      	ldr	r6, [pc, #124]	; (d48e0 <_Z21sendingThreadFunctionPv+0x80>)
    msgCrc = crc16((uint8_t*)"Un message?", 12);
   d4864:	4d1f      	ldr	r5, [pc, #124]	; (d48e4 <_Z21sendingThreadFunctionPv+0x84>)
		msgCrc = crc16((uint8_t*)"Un message", 11);
   d4866:	210b      	movs	r1, #11
   d4868:	4630      	mov	r0, r6
   d486a:	f7ff ffe3 	bl	d4834 <_Z5crc16Phh>
   d486e:	4604      	mov	r4, r0
    preambule();
   d4870:	f7ff ff9c 	bl	d47ac <_Z9preambulev>
    sendByte(0b01111110);
   d4874:	207e      	movs	r0, #126	; 0x7e
   d4876:	f7ff ffc3 	bl	d4800 <_Z8sendByteh>
    sendByte(0b00000000); //flags
   d487a:	2000      	movs	r0, #0
   d487c:	f7ff ffc0 	bl	d4800 <_Z8sendByteh>
    sendByte(11); //length
   d4880:	200b      	movs	r0, #11
   d4882:	f7ff ffbd 	bl	d4800 <_Z8sendByteh>
    sendBytes((uint8_t*)"Un message", 11);
   d4886:	210b      	movs	r1, #11
   d4888:	4630      	mov	r0, r6
   d488a:	f7ff ffa7 	bl	d47dc <_Z9sendBytesPhh>
    sendDualByte(msgCrc);
   d488e:	4620      	mov	r0, r4
   d4890:	f7ff ffc3 	bl	d481a <_Z12sendDualBytet>
    sendByte(0b01111110);
   d4894:	207e      	movs	r0, #126	; 0x7e
   d4896:	f7ff ffb3 	bl	d4800 <_Z8sendByteh>
    delay(1000);
   d489a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d489e:	f000 fb8d 	bl	d4fbc <delay>
    msgCrc = crc16((uint8_t*)"Un message?", 12);
   d48a2:	210c      	movs	r1, #12
   d48a4:	4628      	mov	r0, r5
   d48a6:	f7ff ffc5 	bl	d4834 <_Z5crc16Phh>
   d48aa:	4604      	mov	r4, r0
    preambule();
   d48ac:	f7ff ff7e 	bl	d47ac <_Z9preambulev>
    sendByte(0b01111110);
   d48b0:	207e      	movs	r0, #126	; 0x7e
   d48b2:	f7ff ffa5 	bl	d4800 <_Z8sendByteh>
    sendByte(0b00000000); //flags
   d48b6:	2000      	movs	r0, #0
   d48b8:	f7ff ffa2 	bl	d4800 <_Z8sendByteh>
    sendByte(12); //length
   d48bc:	200c      	movs	r0, #12
   d48be:	f7ff ff9f 	bl	d4800 <_Z8sendByteh>
    sendBytes((uint8_t*)"Un message?", 12);
   d48c2:	210c      	movs	r1, #12
   d48c4:	4628      	mov	r0, r5
   d48c6:	f7ff ff89 	bl	d47dc <_Z9sendBytesPhh>
    sendDualByte(msgCrc);
   d48ca:	4620      	mov	r0, r4
   d48cc:	f7ff ffa5 	bl	d481a <_Z12sendDualBytet>
    sendByte(0b01111110);
   d48d0:	207e      	movs	r0, #126	; 0x7e
   d48d2:	f7ff ff95 	bl	d4800 <_Z8sendByteh>
    delay(1000);
   d48d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d48da:	f000 fb6f 	bl	d4fbc <delay>
	while(true) {
   d48de:	e7c2      	b.n	d4866 <_Z21sendingThreadFunctionPv+0x6>
   d48e0:	000d6158 	.word	0x000d6158
   d48e4:	000d6163 	.word	0x000d6163

000d48e8 <_GLOBAL__sub_I_SystemMode>:
   d48e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d48ea:	4d27      	ldr	r5, [pc, #156]	; (d4988 <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   d48ec:	4b27      	ldr	r3, [pc, #156]	; (d498c <_GLOBAL__sub_I_SystemMode+0xa4>)
   d48ee:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d48f0:	2400      	movs	r4, #0
        set_system_mode(mode);
   d48f2:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   d48f4:	602c      	str	r4, [r5, #0]
   d48f6:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d48f8:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d48fa:	f000 f9b7 	bl	d4c6c <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d48fe:	4a24      	ldr	r2, [pc, #144]	; (d4990 <_GLOBAL__sub_I_SystemMode+0xa8>)
   d4900:	4924      	ldr	r1, [pc, #144]	; (d4994 <_GLOBAL__sub_I_SystemMode+0xac>)
   d4902:	4628      	mov	r0, r5
   d4904:	f000 ff6a 	bl	d57dc <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4908:	4621      	mov	r1, r4
   d490a:	2001      	movs	r0, #1
   d490c:	f000 f9be 	bl	d4c8c <system_thread_set_state>
        : d_(new(std::nothrow) Data)
   d4910:	4921      	ldr	r1, [pc, #132]	; (d4998 <_GLOBAL__sub_I_SystemMode+0xb0>)
   d4912:	2014      	movs	r0, #20
   d4914:	f000 ff69 	bl	d57ea <_ZnwjRKSt9nothrow_t>
   d4918:	b128      	cbz	r0, d4926 <_GLOBAL__sub_I_SystemMode+0x3e>
            exited(false) {
   d491a:	e9c0 4400 	strd	r4, r4, [r0]
   d491e:	e9c0 4402 	strd	r4, r4, [r0, #8]
   d4922:	7404      	strb	r4, [r0, #16]
   d4924:	7444      	strb	r4, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d4926:	4c1d      	ldr	r4, [pc, #116]	; (d499c <_GLOBAL__sub_I_SystemMode+0xb4>)
   d4928:	6020      	str	r0, [r4, #0]
        if (!d_) {
   d492a:	b1a8      	cbz	r0, d4958 <_GLOBAL__sub_I_SystemMode+0x70>
        d_->func = function;
   d492c:	4b1c      	ldr	r3, [pc, #112]	; (d49a0 <_GLOBAL__sub_I_SystemMode+0xb8>)
   d492e:	6083      	str	r3, [r0, #8]
        d_->func_param = function_param;
   d4930:	2300      	movs	r3, #0
   d4932:	60c3      	str	r3, [r0, #12]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d4934:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d4938:	e9cd 0300 	strd	r0, r3, [sp]
   d493c:	4919      	ldr	r1, [pc, #100]	; (d49a4 <_GLOBAL__sub_I_SystemMode+0xbc>)
   d493e:	4b1a      	ldr	r3, [pc, #104]	; (d49a8 <_GLOBAL__sub_I_SystemMode+0xc0>)
   d4940:	2202      	movs	r2, #2
   d4942:	3004      	adds	r0, #4
   d4944:	f000 f88a 	bl	d4a5c <os_thread_create>
   d4948:	b930      	cbnz	r0, d4958 <_GLOBAL__sub_I_SystemMode+0x70>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d494a:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
   d494c:	7c1b      	ldrb	r3, [r3, #16]
   d494e:	b94b      	cbnz	r3, d4964 <_GLOBAL__sub_I_SystemMode+0x7c>
            HAL_Delay_Milliseconds(1);
   d4950:	2001      	movs	r0, #1
   d4952:	f000 f86b 	bl	d4a2c <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d4956:	e7f8      	b.n	d494a <_GLOBAL__sub_I_SystemMode+0x62>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4958:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d495a:	2300      	movs	r3, #0
   d495c:	6023      	str	r3, [r4, #0]
	if (__p != pointer())
   d495e:	b108      	cbz	r0, d4964 <_GLOBAL__sub_I_SystemMode+0x7c>
      operator()(_Tp* __ptr) const
   d4960:	f7ff fbde 	bl	d4120 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
Thread thread("sendingThread", sendingThreadFunction);
   d4964:	4a0a      	ldr	r2, [pc, #40]	; (d4990 <_GLOBAL__sub_I_SystemMode+0xa8>)
   d4966:	4911      	ldr	r1, [pc, #68]	; (d49ac <_GLOBAL__sub_I_SystemMode+0xc4>)
   d4968:	480c      	ldr	r0, [pc, #48]	; (d499c <_GLOBAL__sub_I_SystemMode+0xb4>)
   d496a:	f000 ff37 	bl	d57dc <__aeabi_atexit>
        return SYSTEM_US_TICKS;
   d496e:	4b10      	ldr	r3, [pc, #64]	; (d49b0 <_GLOBAL__sub_I_SystemMode+0xc8>)
   d4970:	4a10      	ldr	r2, [pc, #64]	; (d49b4 <_GLOBAL__sub_I_SystemMode+0xcc>)
   d4972:	681b      	ldr	r3, [r3, #0]
   d4974:	fbb3 f2f2 	udiv	r2, r3, r2
uint32_t manchesterTicks = System.ticksPerMicrosecond() * MANCHESTER_TIME;
   d4978:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d497c:	4353      	muls	r3, r2
   d497e:	4a0e      	ldr	r2, [pc, #56]	; (d49b8 <_GLOBAL__sub_I_SystemMode+0xd0>)
   d4980:	6013      	str	r3, [r2, #0]
   d4982:	b003      	add	sp, #12
   d4984:	bd30      	pop	{r4, r5, pc}
   d4986:	bf00      	nop
   d4988:	2003e504 	.word	0x2003e504
   d498c:	ffff0000 	.word	0xffff0000
   d4990:	2003e4f8 	.word	0x2003e4f8
   d4994:	000d4111 	.word	0x000d4111
   d4998:	000d62f0 	.word	0x000d62f0
   d499c:	2003e640 	.word	0x2003e640
   d49a0:	000d4861 	.word	0x000d4861
   d49a4:	000d616f 	.word	0x000d616f
   d49a8:	000d40e1 	.word	0x000d40e1
   d49ac:	000d4149 	.word	0x000d4149
   d49b0:	2003e490 	.word	0x2003e490
   d49b4:	000f4240 	.word	0x000f4240
   d49b8:	2003e620 	.word	0x2003e620

000d49bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d49bc:	b508      	push	{r3, lr}
   d49be:	4b02      	ldr	r3, [pc, #8]	; (d49c8 <netdb_freeaddrinfo+0xc>)
   d49c0:	681b      	ldr	r3, [r3, #0]
   d49c2:	689b      	ldr	r3, [r3, #8]
   d49c4:	9301      	str	r3, [sp, #4]
   d49c6:	bd08      	pop	{r3, pc}
   d49c8:	00030268 	.word	0x00030268

000d49cc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b02      	ldr	r3, [pc, #8]	; (d49d8 <netdb_getaddrinfo+0xc>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	68db      	ldr	r3, [r3, #12]
   d49d4:	9301      	str	r3, [sp, #4]
   d49d6:	bd08      	pop	{r3, pc}
   d49d8:	00030268 	.word	0x00030268

000d49dc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b02      	ldr	r3, [pc, #8]	; (d49e8 <HAL_Pin_Map+0xc>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	681b      	ldr	r3, [r3, #0]
   d49e4:	9301      	str	r3, [sp, #4]
   d49e6:	bd08      	pop	{r3, pc}
   d49e8:	0003022c 	.word	0x0003022c

000d49ec <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <HAL_Pin_Mode+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	689b      	ldr	r3, [r3, #8]
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	0003022c 	.word	0x0003022c

000d49fc <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <HAL_Interrupts_Attach+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	699b      	ldr	r3, [r3, #24]
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	0003022c 	.word	0x0003022c

000d4a0c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <HAL_Interrupts_Detach+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	69db      	ldr	r3, [r3, #28]
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	0003022c 	.word	0x0003022c

000d4a1c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <HAL_RNG_GetRandomNumber+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	685b      	ldr	r3, [r3, #4]
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	00030218 	.word	0x00030218

000d4a2c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <HAL_Delay_Milliseconds+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	689b      	ldr	r3, [r3, #8]
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	00030218 	.word	0x00030218

000d4a3c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <HAL_Delay_Microseconds+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	68db      	ldr	r3, [r3, #12]
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	00030218 	.word	0x00030218

000d4a4c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	695b      	ldr	r3, [r3, #20]
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	00030218 	.word	0x00030218

000d4a5c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <os_thread_create+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	685b      	ldr	r3, [r3, #4]
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	00030248 	.word	0x00030248

000d4a6c <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <os_thread_is_current+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	689b      	ldr	r3, [r3, #8]
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	00030248 	.word	0x00030248

000d4a7c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <os_thread_join+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	691b      	ldr	r3, [r3, #16]
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	00030248 	.word	0x00030248

000d4a8c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <os_thread_cleanup+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	695b      	ldr	r3, [r3, #20]
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	00030248 	.word	0x00030248

000d4a9c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <os_mutex_recursive_create+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	00030248 	.word	0x00030248

000d4aac <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <os_mutex_recursive_destroy+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	00030248 	.word	0x00030248

000d4abc <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <os_thread_exit+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	00030248 	.word	0x00030248

000d4acc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <inet_inet_ntop+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	695b      	ldr	r3, [r3, #20]
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	00030264 	.word	0x00030264

000d4adc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <hal_usart_init+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	681b      	ldr	r3, [r3, #0]
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	0003023c 	.word	0x0003023c

000d4aec <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <hal_usart_write+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	68db      	ldr	r3, [r3, #12]
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	0003023c 	.word	0x0003023c

000d4afc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <hal_usart_available+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	691b      	ldr	r3, [r3, #16]
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	0003023c 	.word	0x0003023c

000d4b0c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <hal_usart_read+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	695b      	ldr	r3, [r3, #20]
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	0003023c 	.word	0x0003023c

000d4b1c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <hal_usart_peek+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	699b      	ldr	r3, [r3, #24]
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	0003023c 	.word	0x0003023c

000d4b2c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <hal_usart_flush+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	69db      	ldr	r3, [r3, #28]
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	0003023c 	.word	0x0003023c

000d4b3c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <hal_usart_is_enabled+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	6a1b      	ldr	r3, [r3, #32]
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	0003023c 	.word	0x0003023c

000d4b4c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <hal_usart_available_data_for_write+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	0003023c 	.word	0x0003023c

000d4b5c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <hal_i2c_write+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	6a1b      	ldr	r3, [r3, #32]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	00030228 	.word	0x00030228

000d4b6c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <hal_i2c_available+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	00030228 	.word	0x00030228

000d4b7c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <hal_i2c_read+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	00030228 	.word	0x00030228

000d4b8c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <hal_i2c_peek+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	00030228 	.word	0x00030228

000d4b9c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <hal_i2c_flush+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	00030228 	.word	0x00030228

000d4bac <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <hal_i2c_is_enabled+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	00030228 	.word	0x00030228

000d4bbc <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <hal_i2c_init+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	00030228 	.word	0x00030228

000d4bcc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <hal_spi_init+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	69db      	ldr	r3, [r3, #28]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	00030230 	.word	0x00030230

000d4bdc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <hal_spi_is_enabled+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	6a1b      	ldr	r3, [r3, #32]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030230 	.word	0x00030230

000d4bec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <HAL_USB_USART_Init+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	681b      	ldr	r3, [r3, #0]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	0003024c 	.word	0x0003024c

000d4bfc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <HAL_USB_USART_Begin+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	685b      	ldr	r3, [r3, #4]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	0003024c 	.word	0x0003024c

000d4c0c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <HAL_USB_USART_Available_Data+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	691b      	ldr	r3, [r3, #16]
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	0003024c 	.word	0x0003024c

000d4c1c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	695b      	ldr	r3, [r3, #20]
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	0003024c 	.word	0x0003024c

000d4c2c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <HAL_USB_USART_Receive_Data+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	699b      	ldr	r3, [r3, #24]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	0003024c 	.word	0x0003024c

000d4c3c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <HAL_USB_USART_Send_Data+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	69db      	ldr	r3, [r3, #28]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	0003024c 	.word	0x0003024c

000d4c4c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <HAL_USB_USART_Flush_Data+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	6a1b      	ldr	r3, [r3, #32]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	0003024c 	.word	0x0003024c

000d4c5c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <panic_+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030260 	.word	0x00030260

000d4c6c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <set_system_mode+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	685b      	ldr	r3, [r3, #4]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030220 	.word	0x00030220

000d4c7c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <system_delay_ms+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	695b      	ldr	r3, [r3, #20]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030220 	.word	0x00030220

000d4c8c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <system_thread_set_state+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030220 	.word	0x00030220

000d4c9c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b03      	ldr	r3, [pc, #12]	; (d4cac <system_ctrl_set_app_request_handler+0x10>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ca6:	9301      	str	r3, [sp, #4]
   d4ca8:	bd08      	pop	{r3, pc}
   d4caa:	0000      	.short	0x0000
   d4cac:	00030220 	.word	0x00030220

000d4cb0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b03      	ldr	r3, [pc, #12]	; (d4cc0 <system_ctrl_set_result+0x10>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4cba:	9301      	str	r3, [sp, #4]
   d4cbc:	bd08      	pop	{r3, pc}
   d4cbe:	0000      	.short	0x0000
   d4cc0:	00030220 	.word	0x00030220

000d4cc4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <network_connect+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	685b      	ldr	r3, [r3, #4]
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030240 	.word	0x00030240

000d4cd4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <network_connecting+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	689b      	ldr	r3, [r3, #8]
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030240 	.word	0x00030240

000d4ce4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <network_disconnect+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	68db      	ldr	r3, [r3, #12]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030240 	.word	0x00030240

000d4cf4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <network_ready+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	691b      	ldr	r3, [r3, #16]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030240 	.word	0x00030240

000d4d04 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <network_on+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	695b      	ldr	r3, [r3, #20]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030240 	.word	0x00030240

000d4d14 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <network_off+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	699b      	ldr	r3, [r3, #24]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030240 	.word	0x00030240

000d4d24 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <network_listen+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	69db      	ldr	r3, [r3, #28]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030240 	.word	0x00030240

000d4d34 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <network_listening+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	6a1b      	ldr	r3, [r3, #32]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030240 	.word	0x00030240

000d4d44 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <network_set_listen_timeout+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030240 	.word	0x00030240

000d4d54 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <network_get_listen_timeout+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030240 	.word	0x00030240

000d4d64 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <network_is_on+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030240 	.word	0x00030240

000d4d74 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <network_is_off+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030240 	.word	0x00030240

000d4d84 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	00030244 	.word	0x00030244

000d4d94 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <malloc+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	681b      	ldr	r3, [r3, #0]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	0003021c 	.word	0x0003021c

000d4da4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <free+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	685b      	ldr	r3, [r3, #4]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	0003021c 	.word	0x0003021c

000d4db4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <abort+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	0003021c 	.word	0x0003021c

000d4dc4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <newlib_impure_ptr_callback+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	0003021c 	.word	0x0003021c

000d4dd4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4dd4:	2200      	movs	r2, #0
   d4dd6:	6840      	ldr	r0, [r0, #4]
   d4dd8:	4611      	mov	r1, r2
   d4dda:	f7ff bfab 	b.w	d4d34 <network_listening>

000d4dde <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4dde:	2200      	movs	r2, #0
   d4de0:	6840      	ldr	r0, [r0, #4]
   d4de2:	4611      	mov	r1, r2
   d4de4:	f7ff bfb6 	b.w	d4d54 <network_get_listen_timeout>

000d4de8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4de8:	6840      	ldr	r0, [r0, #4]
   d4dea:	2200      	movs	r2, #0
   d4dec:	f7ff bfaa 	b.w	d4d44 <network_set_listen_timeout>

000d4df0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4df0:	6840      	ldr	r0, [r0, #4]
   d4df2:	2200      	movs	r2, #0
   d4df4:	f081 0101 	eor.w	r1, r1, #1
   d4df8:	f7ff bf94 	b.w	d4d24 <network_listen>

000d4dfc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4dfc:	2300      	movs	r3, #0
   d4dfe:	6840      	ldr	r0, [r0, #4]
   d4e00:	461a      	mov	r2, r3
   d4e02:	4619      	mov	r1, r3
   d4e04:	f7ff bf86 	b.w	d4d14 <network_off>

000d4e08 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4e08:	2300      	movs	r3, #0
   d4e0a:	6840      	ldr	r0, [r0, #4]
   d4e0c:	461a      	mov	r2, r3
   d4e0e:	4619      	mov	r1, r3
   d4e10:	f7ff bf78 	b.w	d4d04 <network_on>

000d4e14 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4e14:	2200      	movs	r2, #0
   d4e16:	6840      	ldr	r0, [r0, #4]
   d4e18:	4611      	mov	r1, r2
   d4e1a:	f7ff bf6b 	b.w	d4cf4 <network_ready>

000d4e1e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4e1e:	2200      	movs	r2, #0
   d4e20:	6840      	ldr	r0, [r0, #4]
   d4e22:	4611      	mov	r1, r2
   d4e24:	f7ff bf56 	b.w	d4cd4 <network_connecting>

000d4e28 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e28:	6840      	ldr	r0, [r0, #4]
   d4e2a:	2200      	movs	r2, #0
   d4e2c:	2102      	movs	r1, #2
   d4e2e:	f7ff bf59 	b.w	d4ce4 <network_disconnect>

000d4e32 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4e32:	2300      	movs	r3, #0
   d4e34:	6840      	ldr	r0, [r0, #4]
   d4e36:	461a      	mov	r2, r3
   d4e38:	f7ff bf44 	b.w	d4cc4 <network_connect>

000d4e3c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4e3c:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4e3e:	2203      	movs	r2, #3
   d4e40:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4e42:	4a02      	ldr	r2, [pc, #8]	; (d4e4c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4e44:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4e46:	4770      	bx	lr
   d4e48:	2003e644 	.word	0x2003e644
   d4e4c:	000d6188 	.word	0x000d6188

000d4e50 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4e50:	b510      	push	{r4, lr}
   d4e52:	4604      	mov	r4, r0
   d4e54:	4608      	mov	r0, r1
{
    _spi = spi;
   d4e56:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4e58:	f7ff feb8 	bl	d4bcc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4e5c:	2300      	movs	r3, #0
   d4e5e:	6063      	str	r3, [r4, #4]
}
   d4e60:	4620      	mov	r0, r4
   d4e62:	bd10      	pop	{r4, pc}

000d4e64 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4e64:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4e66:	4b09      	ldr	r3, [pc, #36]	; (d4e8c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4e68:	4c09      	ldr	r4, [pc, #36]	; (d4e90 <_GLOBAL__sub_I_System+0x2c>)
   d4e6a:	2202      	movs	r2, #2
   d4e6c:	2000      	movs	r0, #0
   d4e6e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4e70:	4b08      	ldr	r3, [pc, #32]	; (d4e94 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4e72:	6020      	str	r0, [r4, #0]
   d4e74:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4e76:	71a0      	strb	r0, [r4, #6]
   d4e78:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e7a:	f7ff fef7 	bl	d4c6c <set_system_mode>
SystemClass System;
   d4e7e:	4620      	mov	r0, r4
   d4e80:	4a05      	ldr	r2, [pc, #20]	; (d4e98 <_GLOBAL__sub_I_System+0x34>)
   d4e82:	4906      	ldr	r1, [pc, #24]	; (d4e9c <_GLOBAL__sub_I_System+0x38>)
   d4e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4e88:	f000 bca8 	b.w	d57dc <__aeabi_atexit>
   d4e8c:	2003e658 	.word	0x2003e658
   d4e90:	2003e64c 	.word	0x2003e64c
   d4e94:	ffff0000 	.word	0xffff0000
   d4e98:	2003e4f8 	.word	0x2003e4f8
   d4e9c:	000d4111 	.word	0x000d4111

000d4ea0 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4ea0:	b510      	push	{r4, lr}
   d4ea2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4ea4:	6800      	ldr	r0, [r0, #0]
   d4ea6:	b108      	cbz	r0, d4eac <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4ea8:	f7ff fe00 	bl	d4aac <os_mutex_recursive_destroy>
    }
   d4eac:	4620      	mov	r0, r4
   d4eae:	bd10      	pop	{r4, pc}

000d4eb0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4eb0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4eb2:	4c06      	ldr	r4, [pc, #24]	; (d4ecc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4eb4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4eb6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4eb8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4eba:	f7ff fdef 	bl	d4a9c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4ebe:	4620      	mov	r0, r4
   d4ec0:	4a03      	ldr	r2, [pc, #12]	; (d4ed0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4ec2:	4904      	ldr	r1, [pc, #16]	; (d4ed4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4ec8:	f000 bc88 	b.w	d57dc <__aeabi_atexit>
   d4ecc:	2003e65c 	.word	0x2003e65c
   d4ed0:	2003e4f8 	.word	0x2003e4f8
   d4ed4:	000d4ea1 	.word	0x000d4ea1

000d4ed8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4eda:	4606      	mov	r6, r0
   d4edc:	460d      	mov	r5, r1
  size_t n = 0;
   d4ede:	188f      	adds	r7, r1, r2
   d4ee0:	2400      	movs	r4, #0
  while (size--) {
   d4ee2:	42bd      	cmp	r5, r7
   d4ee4:	d00c      	beq.n	d4f00 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4ee6:	6833      	ldr	r3, [r6, #0]
   d4ee8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4eec:	689b      	ldr	r3, [r3, #8]
   d4eee:	4630      	mov	r0, r6
   d4ef0:	4798      	blx	r3
     if (chunk>=0)
   d4ef2:	1e03      	subs	r3, r0, #0
   d4ef4:	db01      	blt.n	d4efa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4ef6:	441c      	add	r4, r3
  while (size--) {
   d4ef8:	e7f3      	b.n	d4ee2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4efa:	2c00      	cmp	r4, #0
   d4efc:	bf08      	it	eq
   d4efe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4f00:	4620      	mov	r0, r4
   d4f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f04 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4f04:	b513      	push	{r0, r1, r4, lr}
   d4f06:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4f08:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4f0a:	b159      	cbz	r1, d4f24 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4f0c:	9101      	str	r1, [sp, #4]
   d4f0e:	f001 f911 	bl	d6134 <strlen>
   d4f12:	6823      	ldr	r3, [r4, #0]
   d4f14:	9901      	ldr	r1, [sp, #4]
   d4f16:	68db      	ldr	r3, [r3, #12]
   d4f18:	4602      	mov	r2, r0
   d4f1a:	4620      	mov	r0, r4
    }
   d4f1c:	b002      	add	sp, #8
   d4f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4f22:	4718      	bx	r3
    }
   d4f24:	b002      	add	sp, #8
   d4f26:	bd10      	pop	{r4, pc}

000d4f28 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4f28:	6803      	ldr	r3, [r0, #0]
   d4f2a:	689b      	ldr	r3, [r3, #8]
   d4f2c:	4718      	bx	r3

000d4f2e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4f2e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4f30:	210d      	movs	r1, #13
{
   d4f32:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4f34:	f7ff fff8 	bl	d4f28 <_ZN5Print5printEc>
  n += print('\n');
   d4f38:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4f3a:	4604      	mov	r4, r0
  n += print('\n');
   d4f3c:	4628      	mov	r0, r5
   d4f3e:	f7ff fff3 	bl	d4f28 <_ZN5Print5printEc>
  return n;
}
   d4f42:	4420      	add	r0, r4
   d4f44:	bd38      	pop	{r3, r4, r5, pc}

000d4f46 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4f46:	b538      	push	{r3, r4, r5, lr}
   d4f48:	4605      	mov	r5, r0
  return write(str);
   d4f4a:	f7ff ffdb 	bl	d4f04 <_ZN5Print5writeEPKc>
   d4f4e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4f50:	4628      	mov	r0, r5
   d4f52:	f7ff ffec 	bl	d4f2e <_ZN5Print7printlnEv>
  return n;
}
   d4f56:	4420      	add	r0, r4
   d4f58:	bd38      	pop	{r3, r4, r5, pc}

000d4f5a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4f5a:	b530      	push	{r4, r5, lr}
   d4f5c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4f5e:	2300      	movs	r3, #0
   d4f60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4f64:	2a01      	cmp	r2, #1
   d4f66:	bf98      	it	ls
   d4f68:	220a      	movls	r2, #10
   d4f6a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4f6c:	460d      	mov	r5, r1
   d4f6e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4f72:	fb01 5312 	mls	r3, r1, r2, r5
   d4f76:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4f7a:	2b09      	cmp	r3, #9
   d4f7c:	bf94      	ite	ls
   d4f7e:	3330      	addls	r3, #48	; 0x30
   d4f80:	3337      	addhi	r3, #55	; 0x37
   d4f82:	b2db      	uxtb	r3, r3
  } while(n);
   d4f84:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4f86:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4f8a:	d9ef      	bls.n	d4f6c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4f8c:	4621      	mov	r1, r4
   d4f8e:	f7ff ffb9 	bl	d4f04 <_ZN5Print5writeEPKc>
}
   d4f92:	b00b      	add	sp, #44	; 0x2c
   d4f94:	bd30      	pop	{r4, r5, pc}
	...

000d4f98 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f98:	4b01      	ldr	r3, [pc, #4]	; (d4fa0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f9a:	4a02      	ldr	r2, [pc, #8]	; (d4fa4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f9c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4f9e:	4770      	bx	lr
   d4fa0:	2003e660 	.word	0x2003e660
   d4fa4:	000d61bc 	.word	0x000d61bc

000d4fa8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4fa8:	4b02      	ldr	r3, [pc, #8]	; (d4fb4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4faa:	681a      	ldr	r2, [r3, #0]
   d4fac:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4fae:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4fb0:	4770      	bx	lr
   d4fb2:	bf00      	nop
   d4fb4:	2003e48c 	.word	0x2003e48c
   d4fb8:	2003e664 	.word	0x2003e664

000d4fbc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4fbc:	2100      	movs	r1, #0
   d4fbe:	f7ff be5d 	b.w	d4c7c <system_delay_ms>

000d4fc2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4fc2:	b510      	push	{r4, lr}
      if (_M_manager)
   d4fc4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4fc6:	4604      	mov	r4, r0
      if (_M_manager)
   d4fc8:	b113      	cbz	r3, d4fd0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4fca:	2203      	movs	r2, #3
   d4fcc:	4601      	mov	r1, r0
   d4fce:	4798      	blx	r3
    }
   d4fd0:	4620      	mov	r0, r4
   d4fd2:	bd10      	pop	{r4, pc}

000d4fd4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4fd4:	b510      	push	{r4, lr}
   d4fd6:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d4fd8:	f7ff fff3 	bl	d4fc2 <_ZNSt14_Function_baseD1Ev>
   d4fdc:	4620      	mov	r0, r4
   d4fde:	bd10      	pop	{r4, pc}

000d4fe0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4fe0:	4803      	ldr	r0, [pc, #12]	; (d4ff0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4fe2:	4a04      	ldr	r2, [pc, #16]	; (d4ff4 <_GLOBAL__sub_I_RGB+0x14>)
   d4fe4:	4904      	ldr	r1, [pc, #16]	; (d4ff8 <_GLOBAL__sub_I_RGB+0x18>)
   d4fe6:	2300      	movs	r3, #0
   d4fe8:	6083      	str	r3, [r0, #8]
   d4fea:	f000 bbf7 	b.w	d57dc <__aeabi_atexit>
   d4fee:	bf00      	nop
   d4ff0:	2003e668 	.word	0x2003e668
   d4ff4:	2003e4f8 	.word	0x2003e4f8
   d4ff8:	000d4fd5 	.word	0x000d4fd5

000d4ffc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4ffc:	4b01      	ldr	r3, [pc, #4]	; (d5004 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4ffe:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5000:	4770      	bx	lr
   d5002:	bf00      	nop
   d5004:	2003e494 	.word	0x2003e494

000d5008 <serialEventRun>:
{
   d5008:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d500a:	4b0b      	ldr	r3, [pc, #44]	; (d5038 <serialEventRun+0x30>)
   d500c:	b143      	cbz	r3, d5020 <serialEventRun+0x18>
   d500e:	f000 f955 	bl	d52bc <_Z16_fetch_usbserialv>
   d5012:	6803      	ldr	r3, [r0, #0]
   d5014:	691b      	ldr	r3, [r3, #16]
   d5016:	4798      	blx	r3
   d5018:	2800      	cmp	r0, #0
   d501a:	dd01      	ble.n	d5020 <serialEventRun+0x18>
        serialEvent();
   d501c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5020:	4b06      	ldr	r3, [pc, #24]	; (d503c <serialEventRun+0x34>)
   d5022:	b143      	cbz	r3, d5036 <serialEventRun+0x2e>
   d5024:	f000 f9f4 	bl	d5410 <_Z22__fetch_global_Serial1v>
   d5028:	6803      	ldr	r3, [r0, #0]
   d502a:	691b      	ldr	r3, [r3, #16]
   d502c:	4798      	blx	r3
   d502e:	2800      	cmp	r0, #0
   d5030:	dd01      	ble.n	d5036 <serialEventRun+0x2e>
        serialEvent1();
   d5032:	f3af 8000 	nop.w
}
   d5036:	bd08      	pop	{r3, pc}
	...

000d5040 <_post_loop>:
{
   d5040:	b508      	push	{r3, lr}
	serialEventRun();
   d5042:	f7ff ffe1 	bl	d5008 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5046:	f7ff fd01 	bl	d4a4c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d504a:	4b01      	ldr	r3, [pc, #4]	; (d5050 <_post_loop+0x10>)
   d504c:	6018      	str	r0, [r3, #0]
}
   d504e:	bd08      	pop	{r3, pc}
   d5050:	2003e7d4 	.word	0x2003e7d4

000d5054 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5054:	4802      	ldr	r0, [pc, #8]	; (d5060 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5056:	4a03      	ldr	r2, [pc, #12]	; (d5064 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5058:	4903      	ldr	r1, [pc, #12]	; (d5068 <_Z33system_initialize_user_backup_ramv+0x14>)
   d505a:	1a12      	subs	r2, r2, r0
   d505c:	f001 b830 	b.w	d60c0 <memcpy>
   d5060:	2003f400 	.word	0x2003f400
   d5064:	2003f404 	.word	0x2003f404
   d5068:	000d6320 	.word	0x000d6320

000d506c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d506c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d506e:	2300      	movs	r3, #0
   d5070:	9300      	str	r3, [sp, #0]
   d5072:	461a      	mov	r2, r3
   d5074:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5078:	f7ff fe1a 	bl	d4cb0 <system_ctrl_set_result>
}
   d507c:	b003      	add	sp, #12
   d507e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5084 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5084:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5086:	8843      	ldrh	r3, [r0, #2]
   d5088:	2b0a      	cmp	r3, #10
   d508a:	d008      	beq.n	d509e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d508c:	2b50      	cmp	r3, #80	; 0x50
   d508e:	d10b      	bne.n	d50a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5090:	4b09      	ldr	r3, [pc, #36]	; (d50b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5092:	681b      	ldr	r3, [r3, #0]
   d5094:	b14b      	cbz	r3, d50aa <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5096:	b003      	add	sp, #12
   d5098:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d509c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d509e:	f7ff ffe5 	bl	d506c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d50a2:	b003      	add	sp, #12
   d50a4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d50a8:	2300      	movs	r3, #0
   d50aa:	9300      	str	r3, [sp, #0]
   d50ac:	461a      	mov	r2, r3
   d50ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d50b2:	f7ff fdfd 	bl	d4cb0 <system_ctrl_set_result>
}
   d50b6:	e7f4      	b.n	d50a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d50b8:	2003e67c 	.word	0x2003e67c

000d50bc <module_user_init_hook>:
{
   d50bc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d50be:	4c12      	ldr	r4, [pc, #72]	; (d5108 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d50c0:	4812      	ldr	r0, [pc, #72]	; (d510c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d50c2:	4d13      	ldr	r5, [pc, #76]	; (d5110 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d50c4:	2100      	movs	r1, #0
   d50c6:	f7ff fe7d 	bl	d4dc4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d50ca:	6823      	ldr	r3, [r4, #0]
   d50cc:	42ab      	cmp	r3, r5
   d50ce:	4b11      	ldr	r3, [pc, #68]	; (d5114 <module_user_init_hook+0x58>)
   d50d0:	bf0c      	ite	eq
   d50d2:	2201      	moveq	r2, #1
   d50d4:	2200      	movne	r2, #0
   d50d6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d50d8:	d002      	beq.n	d50e0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d50da:	f7ff ffbb 	bl	d5054 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d50de:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d50e0:	f7ff fc9c 	bl	d4a1c <HAL_RNG_GetRandomNumber>
   d50e4:	4604      	mov	r4, r0
    srand(seed);
   d50e6:	f001 f801 	bl	d60ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d50ea:	4b0b      	ldr	r3, [pc, #44]	; (d5118 <module_user_init_hook+0x5c>)
   d50ec:	b113      	cbz	r3, d50f4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d50ee:	4620      	mov	r0, r4
   d50f0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d50f4:	2100      	movs	r1, #0
   d50f6:	4808      	ldr	r0, [pc, #32]	; (d5118 <module_user_init_hook+0x5c>)
   d50f8:	f7ff fe44 	bl	d4d84 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d50fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5100:	4806      	ldr	r0, [pc, #24]	; (d511c <module_user_init_hook+0x60>)
   d5102:	2100      	movs	r1, #0
   d5104:	f7ff bdca 	b.w	d4c9c <system_ctrl_set_app_request_handler>
   d5108:	2003f400 	.word	0x2003f400
   d510c:	000d4ffd 	.word	0x000d4ffd
   d5110:	9a271c1e 	.word	0x9a271c1e
   d5114:	2003e678 	.word	0x2003e678
   d5118:	00000000 	.word	0x00000000
   d511c:	000d5085 	.word	0x000d5085

000d5120 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5120:	4770      	bx	lr

000d5122 <_ZN9IPAddressD0Ev>:
   d5122:	b510      	push	{r4, lr}
   d5124:	2118      	movs	r1, #24
   d5126:	4604      	mov	r4, r0
   d5128:	f000 fb5d 	bl	d57e6 <_ZdlPvj>
   d512c:	4620      	mov	r0, r4
   d512e:	bd10      	pop	{r4, pc}

000d5130 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5130:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5132:	7d03      	ldrb	r3, [r0, #20]
   d5134:	2b06      	cmp	r3, #6
{
   d5136:	b08d      	sub	sp, #52	; 0x34
   d5138:	460e      	mov	r6, r1
   d513a:	f100 0704 	add.w	r7, r0, #4
   d513e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5142:	d012      	beq.n	d516a <_ZNK9IPAddress7printToER5Print+0x3a>
   d5144:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5148:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d514c:	220a      	movs	r2, #10
   d514e:	4630      	mov	r0, r6
   d5150:	f7ff ff03 	bl	d4f5a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5154:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5156:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5158:	d019      	beq.n	d518e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d515a:	2c00      	cmp	r4, #0
   d515c:	d0f4      	beq.n	d5148 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d515e:	212e      	movs	r1, #46	; 0x2e
   d5160:	4630      	mov	r0, r6
   d5162:	f7ff fee1 	bl	d4f28 <_ZN5Print5printEc>
   d5166:	4404      	add	r4, r0
   d5168:	e7ee      	b.n	d5148 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d516a:	232f      	movs	r3, #47	; 0x2f
   d516c:	466a      	mov	r2, sp
   d516e:	4639      	mov	r1, r7
   d5170:	200a      	movs	r0, #10
		buf[0] = 0;
   d5172:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5176:	f7ff fca9 	bl	d4acc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d517a:	4668      	mov	r0, sp
   d517c:	f000 ffda 	bl	d6134 <strlen>
   d5180:	6833      	ldr	r3, [r6, #0]
   d5182:	4602      	mov	r2, r0
   d5184:	68db      	ldr	r3, [r3, #12]
   d5186:	4669      	mov	r1, sp
   d5188:	4630      	mov	r0, r6
   d518a:	4798      	blx	r3
   d518c:	4604      	mov	r4, r0
    }
    return n;
}
   d518e:	4620      	mov	r0, r4
   d5190:	b00d      	add	sp, #52	; 0x34
   d5192:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5194 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5194:	b510      	push	{r4, lr}
   d5196:	4b05      	ldr	r3, [pc, #20]	; (d51ac <_ZN9IPAddressC1Ev+0x18>)
   d5198:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d519a:	2211      	movs	r2, #17
   d519c:	f840 3b04 	str.w	r3, [r0], #4
   d51a0:	2100      	movs	r1, #0
   d51a2:	f000 ff9b 	bl	d60dc <memset>
}
   d51a6:	4620      	mov	r0, r4
   d51a8:	bd10      	pop	{r4, pc}
   d51aa:	bf00      	nop
   d51ac:	000d61e4 	.word	0x000d61e4

000d51b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d51b0:	4603      	mov	r3, r0
   d51b2:	4a07      	ldr	r2, [pc, #28]	; (d51d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d51b4:	b510      	push	{r4, lr}
   d51b6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d51ba:	f101 0210 	add.w	r2, r1, #16
   d51be:	f851 4b04 	ldr.w	r4, [r1], #4
   d51c2:	f843 4b04 	str.w	r4, [r3], #4
   d51c6:	4291      	cmp	r1, r2
   d51c8:	d1f9      	bne.n	d51be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d51ca:	780a      	ldrb	r2, [r1, #0]
   d51cc:	701a      	strb	r2, [r3, #0]
}
   d51ce:	bd10      	pop	{r4, pc}
   d51d0:	000d61e4 	.word	0x000d61e4

000d51d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d51d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d51d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d51da:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d51de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d51e2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d51e6:	2304      	movs	r3, #4
   d51e8:	6041      	str	r1, [r0, #4]
   d51ea:	7503      	strb	r3, [r0, #20]
}
   d51ec:	bd10      	pop	{r4, pc}

000d51ee <_ZN9IPAddressaSEPKh>:
{
   d51ee:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d51f0:	78cb      	ldrb	r3, [r1, #3]
   d51f2:	9300      	str	r3, [sp, #0]
   d51f4:	788b      	ldrb	r3, [r1, #2]
   d51f6:	784a      	ldrb	r2, [r1, #1]
   d51f8:	7809      	ldrb	r1, [r1, #0]
   d51fa:	f7ff ffeb 	bl	d51d4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d51fe:	b002      	add	sp, #8
   d5200:	bd10      	pop	{r4, pc}

000d5202 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5202:	7441      	strb	r1, [r0, #17]
}
   d5204:	4770      	bx	lr

000d5206 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5206:	4770      	bx	lr

000d5208 <_ZN9USBSerial4readEv>:
{
   d5208:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d520a:	2100      	movs	r1, #0
   d520c:	7c00      	ldrb	r0, [r0, #16]
   d520e:	f7ff fd0d 	bl	d4c2c <HAL_USB_USART_Receive_Data>
}
   d5212:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5216:	bd08      	pop	{r3, pc}

000d5218 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5218:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d521a:	2101      	movs	r1, #1
   d521c:	7c00      	ldrb	r0, [r0, #16]
   d521e:	f7ff fd05 	bl	d4c2c <HAL_USB_USART_Receive_Data>
}
   d5222:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5226:	bd08      	pop	{r3, pc}

000d5228 <_ZN9USBSerial17availableForWriteEv>:
{
   d5228:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d522a:	7c00      	ldrb	r0, [r0, #16]
   d522c:	f7ff fcf6 	bl	d4c1c <HAL_USB_USART_Available_Data_For_Write>
}
   d5230:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5234:	bd08      	pop	{r3, pc}

000d5236 <_ZN9USBSerial9availableEv>:
{
   d5236:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5238:	7c00      	ldrb	r0, [r0, #16]
   d523a:	f7ff fce7 	bl	d4c0c <HAL_USB_USART_Available_Data>
}
   d523e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5242:	bd08      	pop	{r3, pc}

000d5244 <_ZN9USBSerial5writeEh>:
{
   d5244:	b513      	push	{r0, r1, r4, lr}
   d5246:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5248:	7c00      	ldrb	r0, [r0, #16]
{
   d524a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d524c:	f7ff fce6 	bl	d4c1c <HAL_USB_USART_Available_Data_For_Write>
   d5250:	2800      	cmp	r0, #0
   d5252:	9901      	ldr	r1, [sp, #4]
   d5254:	dc01      	bgt.n	d525a <_ZN9USBSerial5writeEh+0x16>
   d5256:	7c60      	ldrb	r0, [r4, #17]
   d5258:	b120      	cbz	r0, d5264 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d525a:	7c20      	ldrb	r0, [r4, #16]
   d525c:	f7ff fcee 	bl	d4c3c <HAL_USB_USART_Send_Data>
   d5260:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5264:	b002      	add	sp, #8
   d5266:	bd10      	pop	{r4, pc}

000d5268 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5268:	7c00      	ldrb	r0, [r0, #16]
   d526a:	f7ff bcef 	b.w	d4c4c <HAL_USB_USART_Flush_Data>

000d526e <_ZN9USBSerialD0Ev>:
   d526e:	b510      	push	{r4, lr}
   d5270:	2114      	movs	r1, #20
   d5272:	4604      	mov	r4, r0
   d5274:	f000 fab7 	bl	d57e6 <_ZdlPvj>
   d5278:	4620      	mov	r0, r4
   d527a:	bd10      	pop	{r4, pc}

000d527c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d527c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d527e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5282:	4604      	mov	r4, r0
   d5284:	4608      	mov	r0, r1
   d5286:	2100      	movs	r1, #0
   d5288:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d528c:	4b04      	ldr	r3, [pc, #16]	; (d52a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d528e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5290:	2301      	movs	r3, #1
  _serial = serial;
   d5292:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5294:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5296:	4611      	mov	r1, r2
   d5298:	f7ff fca8 	bl	d4bec <HAL_USB_USART_Init>
}
   d529c:	4620      	mov	r0, r4
   d529e:	bd10      	pop	{r4, pc}
   d52a0:	000d61f8 	.word	0x000d61f8

000d52a4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d52a4:	7c00      	ldrb	r0, [r0, #16]
   d52a6:	2200      	movs	r2, #0
   d52a8:	f7ff bca8 	b.w	d4bfc <HAL_USB_USART_Begin>

000d52ac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d52ac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d52ae:	2214      	movs	r2, #20
{
   d52b0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d52b2:	2100      	movs	r1, #0
   d52b4:	f000 ff12 	bl	d60dc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d52b8:	4620      	mov	r0, r4
   d52ba:	bd10      	pop	{r4, pc}

000d52bc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d52bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d52be:	4c10      	ldr	r4, [pc, #64]	; (d5300 <_Z16_fetch_usbserialv+0x44>)
{
   d52c0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d52c2:	a803      	add	r0, sp, #12
   d52c4:	f7ff fff2 	bl	d52ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d52c8:	7821      	ldrb	r1, [r4, #0]
   d52ca:	f3bf 8f5b 	dmb	ish
   d52ce:	f011 0101 	ands.w	r1, r1, #1
   d52d2:	d111      	bne.n	d52f8 <_Z16_fetch_usbserialv+0x3c>
   d52d4:	4620      	mov	r0, r4
   d52d6:	9101      	str	r1, [sp, #4]
   d52d8:	f7fe fee1 	bl	d409e <__cxa_guard_acquire>
   d52dc:	9901      	ldr	r1, [sp, #4]
   d52de:	b158      	cbz	r0, d52f8 <_Z16_fetch_usbserialv+0x3c>
   d52e0:	aa03      	add	r2, sp, #12
   d52e2:	4808      	ldr	r0, [pc, #32]	; (d5304 <_Z16_fetch_usbserialv+0x48>)
   d52e4:	f7ff ffca 	bl	d527c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d52e8:	4620      	mov	r0, r4
   d52ea:	f7fe fedd 	bl	d40a8 <__cxa_guard_release>
   d52ee:	4a06      	ldr	r2, [pc, #24]	; (d5308 <_Z16_fetch_usbserialv+0x4c>)
   d52f0:	4906      	ldr	r1, [pc, #24]	; (d530c <_Z16_fetch_usbserialv+0x50>)
   d52f2:	4804      	ldr	r0, [pc, #16]	; (d5304 <_Z16_fetch_usbserialv+0x48>)
   d52f4:	f000 fa72 	bl	d57dc <__aeabi_atexit>
	return _usbserial;
}
   d52f8:	4802      	ldr	r0, [pc, #8]	; (d5304 <_Z16_fetch_usbserialv+0x48>)
   d52fa:	b008      	add	sp, #32
   d52fc:	bd10      	pop	{r4, pc}
   d52fe:	bf00      	nop
   d5300:	2003e680 	.word	0x2003e680
   d5304:	2003e684 	.word	0x2003e684
   d5308:	2003e4f8 	.word	0x2003e4f8
   d530c:	000d5207 	.word	0x000d5207

000d5310 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d5310:	4700      	bx	r0
	...

000d5314 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d5314:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d5318:	2400      	movs	r4, #0
{
   d531a:	461d      	mov	r5, r3
   d531c:	460f      	mov	r7, r1
   d531e:	4690      	mov	r8, r2
   d5320:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d5322:	f7ff fb73 	bl	d4a0c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d5326:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5328:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d532c:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5330:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d5334:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d5338:	bfa2      	ittt	ge
   d533a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d533e:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d5342:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5344:	4907      	ldr	r1, [pc, #28]	; (d5364 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d5346:	9400      	str	r4, [sp, #0]
   d5348:	4643      	mov	r3, r8
   d534a:	463a      	mov	r2, r7
   d534c:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d534e:	bfa8      	it	ge
   d5350:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d5354:	f7ff fb52 	bl	d49fc <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d5358:	fab0 f080 	clz	r0, r0
   d535c:	0940      	lsrs	r0, r0, #5
   d535e:	b004      	add	sp, #16
   d5360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5364:	000d5311 	.word	0x000d5311

000d5368 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5368:	4770      	bx	lr

000d536a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d536a:	7441      	strb	r1, [r0, #17]
}
   d536c:	4770      	bx	lr

000d536e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d536e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5370:	7c00      	ldrb	r0, [r0, #16]
   d5372:	f7ff fbeb 	bl	d4b4c <hal_usart_available_data_for_write>
}
   d5376:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d537a:	bd08      	pop	{r3, pc}

000d537c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d537c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d537e:	7c00      	ldrb	r0, [r0, #16]
   d5380:	f7ff fbbc 	bl	d4afc <hal_usart_available>
}
   d5384:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5388:	bd08      	pop	{r3, pc}

000d538a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d538a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d538c:	7c00      	ldrb	r0, [r0, #16]
   d538e:	f7ff fbc5 	bl	d4b1c <hal_usart_peek>
}
   d5392:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5396:	bd08      	pop	{r3, pc}

000d5398 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5398:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d539a:	7c00      	ldrb	r0, [r0, #16]
   d539c:	f7ff fbb6 	bl	d4b0c <hal_usart_read>
}
   d53a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d53a4:	bd08      	pop	{r3, pc}

000d53a6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d53a6:	7c00      	ldrb	r0, [r0, #16]
   d53a8:	f7ff bbc0 	b.w	d4b2c <hal_usart_flush>

000d53ac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d53ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d53ae:	7c45      	ldrb	r5, [r0, #17]
{
   d53b0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d53b2:	b12d      	cbz	r5, d53c0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d53b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d53b6:	b003      	add	sp, #12
   d53b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d53bc:	f7ff bb96 	b.w	d4aec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d53c0:	7c00      	ldrb	r0, [r0, #16]
   d53c2:	9101      	str	r1, [sp, #4]
   d53c4:	f7ff fbc2 	bl	d4b4c <hal_usart_available_data_for_write>
   d53c8:	2800      	cmp	r0, #0
   d53ca:	9901      	ldr	r1, [sp, #4]
   d53cc:	dcf2      	bgt.n	d53b4 <_ZN11USARTSerial5writeEh+0x8>
}
   d53ce:	4628      	mov	r0, r5
   d53d0:	b003      	add	sp, #12
   d53d2:	bd30      	pop	{r4, r5, pc}

000d53d4 <_ZN11USARTSerialD0Ev>:
   d53d4:	b510      	push	{r4, lr}
   d53d6:	2114      	movs	r1, #20
   d53d8:	4604      	mov	r4, r0
   d53da:	f000 fa04 	bl	d57e6 <_ZdlPvj>
   d53de:	4620      	mov	r0, r4
   d53e0:	bd10      	pop	{r4, pc}
	...

000d53e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d53e4:	b510      	push	{r4, lr}
   d53e6:	f04f 0c00 	mov.w	ip, #0
   d53ea:	4604      	mov	r4, r0
   d53ec:	4608      	mov	r0, r1
   d53ee:	4611      	mov	r1, r2
   d53f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d53f4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d53f8:	4a04      	ldr	r2, [pc, #16]	; (d540c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d53fa:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d53fc:	2201      	movs	r2, #1
  _serial = serial;
   d53fe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5400:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5402:	461a      	mov	r2, r3
   d5404:	f7ff fb6a 	bl	d4adc <hal_usart_init>
}
   d5408:	4620      	mov	r0, r4
   d540a:	bd10      	pop	{r4, pc}
   d540c:	000d6228 	.word	0x000d6228

000d5410 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5410:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5412:	4c0e      	ldr	r4, [pc, #56]	; (d544c <_Z22__fetch_global_Serial1v+0x3c>)
   d5414:	7821      	ldrb	r1, [r4, #0]
   d5416:	f3bf 8f5b 	dmb	ish
   d541a:	f011 0101 	ands.w	r1, r1, #1
   d541e:	d112      	bne.n	d5446 <_Z22__fetch_global_Serial1v+0x36>
   d5420:	4620      	mov	r0, r4
   d5422:	9101      	str	r1, [sp, #4]
   d5424:	f7fe fe3b 	bl	d409e <__cxa_guard_acquire>
   d5428:	9901      	ldr	r1, [sp, #4]
   d542a:	b160      	cbz	r0, d5446 <_Z22__fetch_global_Serial1v+0x36>
   d542c:	4a08      	ldr	r2, [pc, #32]	; (d5450 <_Z22__fetch_global_Serial1v+0x40>)
   d542e:	4b09      	ldr	r3, [pc, #36]	; (d5454 <_Z22__fetch_global_Serial1v+0x44>)
   d5430:	4809      	ldr	r0, [pc, #36]	; (d5458 <_Z22__fetch_global_Serial1v+0x48>)
   d5432:	f7ff ffd7 	bl	d53e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5436:	4620      	mov	r0, r4
   d5438:	f7fe fe36 	bl	d40a8 <__cxa_guard_release>
   d543c:	4a07      	ldr	r2, [pc, #28]	; (d545c <_Z22__fetch_global_Serial1v+0x4c>)
   d543e:	4908      	ldr	r1, [pc, #32]	; (d5460 <_Z22__fetch_global_Serial1v+0x50>)
   d5440:	4805      	ldr	r0, [pc, #20]	; (d5458 <_Z22__fetch_global_Serial1v+0x48>)
   d5442:	f000 f9cb 	bl	d57dc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5446:	4804      	ldr	r0, [pc, #16]	; (d5458 <_Z22__fetch_global_Serial1v+0x48>)
   d5448:	b002      	add	sp, #8
   d544a:	bd10      	pop	{r4, pc}
   d544c:	2003e698 	.word	0x2003e698
   d5450:	2003e69c 	.word	0x2003e69c
   d5454:	2003e720 	.word	0x2003e720
   d5458:	2003e7a4 	.word	0x2003e7a4
   d545c:	2003e4f8 	.word	0x2003e4f8
   d5460:	000d5369 	.word	0x000d5369

000d5464 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5464:	4770      	bx	lr

000d5466 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5468:	4606      	mov	r6, r0
   d546a:	4615      	mov	r5, r2
   d546c:	460c      	mov	r4, r1
   d546e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5470:	42bc      	cmp	r4, r7
   d5472:	d006      	beq.n	d5482 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5474:	6833      	ldr	r3, [r6, #0]
   d5476:	f814 1b01 	ldrb.w	r1, [r4], #1
   d547a:	689b      	ldr	r3, [r3, #8]
   d547c:	4630      	mov	r0, r6
   d547e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5480:	e7f6      	b.n	d5470 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5482:	4628      	mov	r0, r5
   d5484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5486 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5486:	7c00      	ldrb	r0, [r0, #16]
   d5488:	2200      	movs	r2, #0
   d548a:	f7ff bb67 	b.w	d4b5c <hal_i2c_write>

000d548e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d548e:	7c00      	ldrb	r0, [r0, #16]
   d5490:	2100      	movs	r1, #0
   d5492:	f7ff bb6b 	b.w	d4b6c <hal_i2c_available>

000d5496 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5496:	7c00      	ldrb	r0, [r0, #16]
   d5498:	2100      	movs	r1, #0
   d549a:	f7ff bb6f 	b.w	d4b7c <hal_i2c_read>

000d549e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d549e:	7c00      	ldrb	r0, [r0, #16]
   d54a0:	2100      	movs	r1, #0
   d54a2:	f7ff bb73 	b.w	d4b8c <hal_i2c_peek>

000d54a6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d54a6:	7c00      	ldrb	r0, [r0, #16]
   d54a8:	2100      	movs	r1, #0
   d54aa:	f7ff bb77 	b.w	d4b9c <hal_i2c_flush>

000d54ae <_ZN7TwoWireD0Ev>:
   d54ae:	b510      	push	{r4, lr}
   d54b0:	2114      	movs	r1, #20
   d54b2:	4604      	mov	r4, r0
   d54b4:	f000 f997 	bl	d57e6 <_ZdlPvj>
   d54b8:	4620      	mov	r0, r4
   d54ba:	bd10      	pop	{r4, pc}

000d54bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d54bc:	b510      	push	{r4, lr}
   d54be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54c2:	4604      	mov	r4, r0
   d54c4:	4608      	mov	r0, r1
   d54c6:	2100      	movs	r1, #0
   d54c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d54cc:	4b03      	ldr	r3, [pc, #12]	; (d54dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d54ce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d54d0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d54d2:	4611      	mov	r1, r2
   d54d4:	f7ff fb72 	bl	d4bbc <hal_i2c_init>
}
   d54d8:	4620      	mov	r0, r4
   d54da:	bd10      	pop	{r4, pc}
   d54dc:	000d6258 	.word	0x000d6258

000d54e0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d54e0:	2200      	movs	r2, #0
   d54e2:	6840      	ldr	r0, [r0, #4]
   d54e4:	4611      	mov	r1, r2
   d54e6:	f7ff bc05 	b.w	d4cf4 <network_ready>

000d54ea <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d54ea:	2200      	movs	r2, #0
   d54ec:	6840      	ldr	r0, [r0, #4]
   d54ee:	4611      	mov	r1, r2
   d54f0:	f7ff bc20 	b.w	d4d34 <network_listening>

000d54f4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d54f4:	2200      	movs	r2, #0
   d54f6:	6840      	ldr	r0, [r0, #4]
   d54f8:	4611      	mov	r1, r2
   d54fa:	f7ff bc2b 	b.w	d4d54 <network_get_listen_timeout>

000d54fe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d54fe:	6840      	ldr	r0, [r0, #4]
   d5500:	2200      	movs	r2, #0
   d5502:	f7ff bc1f 	b.w	d4d44 <network_set_listen_timeout>

000d5506 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5506:	6840      	ldr	r0, [r0, #4]
   d5508:	2200      	movs	r2, #0
   d550a:	f081 0101 	eor.w	r1, r1, #1
   d550e:	f7ff bc09 	b.w	d4d24 <network_listen>

000d5512 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5512:	2300      	movs	r3, #0
   d5514:	6840      	ldr	r0, [r0, #4]
   d5516:	461a      	mov	r2, r3
   d5518:	4619      	mov	r1, r3
   d551a:	f7ff bbfb 	b.w	d4d14 <network_off>

000d551e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d551e:	2300      	movs	r3, #0
   d5520:	6840      	ldr	r0, [r0, #4]
   d5522:	461a      	mov	r2, r3
   d5524:	4619      	mov	r1, r3
   d5526:	f7ff bbed 	b.w	d4d04 <network_on>

000d552a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d552a:	2200      	movs	r2, #0
   d552c:	6840      	ldr	r0, [r0, #4]
   d552e:	4611      	mov	r1, r2
   d5530:	f7ff bbd0 	b.w	d4cd4 <network_connecting>

000d5534 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5534:	6840      	ldr	r0, [r0, #4]
   d5536:	2200      	movs	r2, #0
   d5538:	2102      	movs	r1, #2
   d553a:	f7ff bbd3 	b.w	d4ce4 <network_disconnect>

000d553e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d553e:	2300      	movs	r3, #0
   d5540:	6840      	ldr	r0, [r0, #4]
   d5542:	461a      	mov	r2, r3
   d5544:	f7ff bbbe 	b.w	d4cc4 <network_connect>

000d5548 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5548:	4b02      	ldr	r3, [pc, #8]	; (d5554 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d554a:	2204      	movs	r2, #4
   d554c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d554e:	4a02      	ldr	r2, [pc, #8]	; (d5558 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5550:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5552:	4770      	bx	lr
   d5554:	2003e7b8 	.word	0x2003e7b8
   d5558:	000d6280 	.word	0x000d6280

000d555c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d555c:	2300      	movs	r3, #0
   d555e:	6840      	ldr	r0, [r0, #4]
   d5560:	461a      	mov	r2, r3
   d5562:	f7ff bbaf 	b.w	d4cc4 <network_connect>

000d5566 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5566:	6840      	ldr	r0, [r0, #4]
   d5568:	2200      	movs	r2, #0
   d556a:	2102      	movs	r1, #2
   d556c:	f7ff bbba 	b.w	d4ce4 <network_disconnect>

000d5570 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5570:	2200      	movs	r2, #0
   d5572:	6840      	ldr	r0, [r0, #4]
   d5574:	4611      	mov	r1, r2
   d5576:	f7ff bbad 	b.w	d4cd4 <network_connecting>

000d557a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d557a:	2200      	movs	r2, #0
   d557c:	6840      	ldr	r0, [r0, #4]
   d557e:	4611      	mov	r1, r2
   d5580:	f7ff bbb8 	b.w	d4cf4 <network_ready>

000d5584 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5584:	2300      	movs	r3, #0
   d5586:	6840      	ldr	r0, [r0, #4]
   d5588:	461a      	mov	r2, r3
   d558a:	4619      	mov	r1, r3
   d558c:	f7ff bbba 	b.w	d4d04 <network_on>

000d5590 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5590:	2300      	movs	r3, #0
   d5592:	6840      	ldr	r0, [r0, #4]
   d5594:	461a      	mov	r2, r3
   d5596:	4619      	mov	r1, r3
   d5598:	f7ff bbbc 	b.w	d4d14 <network_off>

000d559c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d559c:	6840      	ldr	r0, [r0, #4]
   d559e:	2100      	movs	r1, #0
   d55a0:	f7ff bbe0 	b.w	d4d64 <network_is_on>

000d55a4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d55a4:	6840      	ldr	r0, [r0, #4]
   d55a6:	2100      	movs	r1, #0
   d55a8:	f7ff bbe4 	b.w	d4d74 <network_is_off>

000d55ac <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d55ac:	6840      	ldr	r0, [r0, #4]
   d55ae:	2200      	movs	r2, #0
   d55b0:	f081 0101 	eor.w	r1, r1, #1
   d55b4:	f7ff bbb6 	b.w	d4d24 <network_listen>

000d55b8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d55b8:	6840      	ldr	r0, [r0, #4]
   d55ba:	2200      	movs	r2, #0
   d55bc:	f7ff bbc2 	b.w	d4d44 <network_set_listen_timeout>

000d55c0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d55c0:	2200      	movs	r2, #0
   d55c2:	6840      	ldr	r0, [r0, #4]
   d55c4:	4611      	mov	r1, r2
   d55c6:	f7ff bbc5 	b.w	d4d54 <network_get_listen_timeout>

000d55ca <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d55ca:	2200      	movs	r2, #0
   d55cc:	6840      	ldr	r0, [r0, #4]
   d55ce:	4611      	mov	r1, r2
   d55d0:	f7ff bbb0 	b.w	d4d34 <network_listening>

000d55d4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d55d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d55d8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d55da:	b095      	sub	sp, #84	; 0x54
   d55dc:	4616      	mov	r6, r2
   d55de:	460d      	mov	r5, r1
   d55e0:	4607      	mov	r7, r0
    IPAddress addr;
   d55e2:	f7ff fdd7 	bl	d5194 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d55e6:	4621      	mov	r1, r4
   d55e8:	2218      	movs	r2, #24
   d55ea:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d55ec:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d55ee:	f000 fd75 	bl	d60dc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d55f2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d55f4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d55f8:	4621      	mov	r1, r4
   d55fa:	466b      	mov	r3, sp
   d55fc:	aa0c      	add	r2, sp, #48	; 0x30
   d55fe:	4630      	mov	r0, r6
   d5600:	f7ff f9e4 	bl	d49cc <netdb_getaddrinfo>
    if (!r) {
   d5604:	4604      	mov	r4, r0
   d5606:	2800      	cmp	r0, #0
   d5608:	d146      	bne.n	d5698 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d560a:	4602      	mov	r2, r0
   d560c:	2101      	movs	r1, #1
   d560e:	6868      	ldr	r0, [r5, #4]
   d5610:	f7ff fb70 	bl	d4cf4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5614:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5616:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5618:	4622      	mov	r2, r4
   d561a:	6868      	ldr	r0, [r5, #4]
   d561c:	f7ff fb6a 	bl	d4cf4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5620:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5622:	4681      	mov	r9, r0
        bool ok = false;
   d5624:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5626:	2e00      	cmp	r6, #0
   d5628:	d036      	beq.n	d5698 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d562a:	2900      	cmp	r1, #0
   d562c:	d134      	bne.n	d5698 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d562e:	6873      	ldr	r3, [r6, #4]
   d5630:	2b02      	cmp	r3, #2
   d5632:	d003      	beq.n	d563c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5634:	2b0a      	cmp	r3, #10
   d5636:	d00b      	beq.n	d5650 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5638:	69f6      	ldr	r6, [r6, #28]
   d563a:	e7f4      	b.n	d5626 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d563c:	f1b8 0f00 	cmp.w	r8, #0
   d5640:	d004      	beq.n	d564c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5642:	6971      	ldr	r1, [r6, #20]
   d5644:	4638      	mov	r0, r7
   d5646:	3104      	adds	r1, #4
   d5648:	f7ff fdd1 	bl	d51ee <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d564c:	4641      	mov	r1, r8
   d564e:	e7f3      	b.n	d5638 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5650:	f1b9 0f00 	cmp.w	r9, #0
   d5654:	d101      	bne.n	d565a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5656:	4649      	mov	r1, r9
   d5658:	e7ee      	b.n	d5638 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d565a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d565c:	2210      	movs	r2, #16
   d565e:	a801      	add	r0, sp, #4
   d5660:	f000 fd3c 	bl	d60dc <memset>
                    a.v = 6;
   d5664:	2306      	movs	r3, #6
   d5666:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d566a:	ad01      	add	r5, sp, #4
   d566c:	f104 0308 	add.w	r3, r4, #8
   d5670:	3418      	adds	r4, #24
   d5672:	6818      	ldr	r0, [r3, #0]
   d5674:	6859      	ldr	r1, [r3, #4]
   d5676:	462a      	mov	r2, r5
   d5678:	c203      	stmia	r2!, {r0, r1}
   d567a:	3308      	adds	r3, #8
   d567c:	42a3      	cmp	r3, r4
   d567e:	4615      	mov	r5, r2
   d5680:	d1f7      	bne.n	d5672 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5682:	a901      	add	r1, sp, #4
   d5684:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5686:	ad07      	add	r5, sp, #28
   d5688:	f7ff fd92 	bl	d51b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d568c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d568e:	1d3c      	adds	r4, r7, #4
   d5690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5692:	682b      	ldr	r3, [r5, #0]
   d5694:	7023      	strb	r3, [r4, #0]
   d5696:	e7de      	b.n	d5656 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5698:	9800      	ldr	r0, [sp, #0]
   d569a:	f7ff f98f 	bl	d49bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d569e:	4638      	mov	r0, r7
   d56a0:	b015      	add	sp, #84	; 0x54
   d56a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d56a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d56a8:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d56aa:	4a03      	ldr	r2, [pc, #12]	; (d56b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d56ac:	601a      	str	r2, [r3, #0]
   d56ae:	2200      	movs	r2, #0
   d56b0:	605a      	str	r2, [r3, #4]

} // spark
   d56b2:	4770      	bx	lr
   d56b4:	2003e7c0 	.word	0x2003e7c0
   d56b8:	000d62bc 	.word	0x000d62bc

000d56bc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d56bc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d56be:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d56c0:	d902      	bls.n	d56c8 <pinAvailable+0xc>
    return false;
   d56c2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d56c4:	b002      	add	sp, #8
   d56c6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d56c8:	f1a0 030b 	sub.w	r3, r0, #11
   d56cc:	2b02      	cmp	r3, #2
   d56ce:	d81a      	bhi.n	d5706 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d56d0:	4c17      	ldr	r4, [pc, #92]	; (d5730 <pinAvailable+0x74>)
   d56d2:	7821      	ldrb	r1, [r4, #0]
   d56d4:	f3bf 8f5b 	dmb	ish
   d56d8:	f011 0101 	ands.w	r1, r1, #1
   d56dc:	d10b      	bne.n	d56f6 <pinAvailable+0x3a>
   d56de:	4620      	mov	r0, r4
   d56e0:	9101      	str	r1, [sp, #4]
   d56e2:	f7fe fcdc 	bl	d409e <__cxa_guard_acquire>
   d56e6:	9901      	ldr	r1, [sp, #4]
   d56e8:	b128      	cbz	r0, d56f6 <pinAvailable+0x3a>
   d56ea:	4812      	ldr	r0, [pc, #72]	; (d5734 <pinAvailable+0x78>)
   d56ec:	f7ff fbb0 	bl	d4e50 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d56f0:	4620      	mov	r0, r4
   d56f2:	f7fe fcd9 	bl	d40a8 <__cxa_guard_release>
   d56f6:	4b0f      	ldr	r3, [pc, #60]	; (d5734 <pinAvailable+0x78>)
   d56f8:	7818      	ldrb	r0, [r3, #0]
   d56fa:	f7ff fa6f 	bl	d4bdc <hal_spi_is_enabled>
   d56fe:	2800      	cmp	r0, #0
   d5700:	d1df      	bne.n	d56c2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5702:	2001      	movs	r0, #1
   d5704:	e7de      	b.n	d56c4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5706:	2801      	cmp	r0, #1
   d5708:	d809      	bhi.n	d571e <pinAvailable+0x62>
   d570a:	f000 f83f 	bl	d578c <_Z19__fetch_global_Wirev>
   d570e:	2100      	movs	r1, #0
   d5710:	7c00      	ldrb	r0, [r0, #16]
   d5712:	f7ff fa4b 	bl	d4bac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5716:	f080 0001 	eor.w	r0, r0, #1
   d571a:	b2c0      	uxtb	r0, r0
   d571c:	e7d2      	b.n	d56c4 <pinAvailable+0x8>
   d571e:	3809      	subs	r0, #9
   d5720:	2801      	cmp	r0, #1
   d5722:	d8ee      	bhi.n	d5702 <pinAvailable+0x46>
   d5724:	f7ff fe74 	bl	d5410 <_Z22__fetch_global_Serial1v>
   d5728:	7c00      	ldrb	r0, [r0, #16]
   d572a:	f7ff fa07 	bl	d4b3c <hal_usart_is_enabled>
   d572e:	e7f2      	b.n	d5716 <pinAvailable+0x5a>
   d5730:	2003e7c8 	.word	0x2003e7c8
   d5734:	2003e7cc 	.word	0x2003e7cc

000d5738 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5738:	2823      	cmp	r0, #35	; 0x23
{
   d573a:	b538      	push	{r3, r4, r5, lr}
   d573c:	4604      	mov	r4, r0
   d573e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5740:	d80a      	bhi.n	d5758 <pinMode+0x20>
   d5742:	29ff      	cmp	r1, #255	; 0xff
   d5744:	d008      	beq.n	d5758 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5746:	f7ff ffb9 	bl	d56bc <pinAvailable>
   d574a:	b128      	cbz	r0, d5758 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d574c:	4629      	mov	r1, r5
   d574e:	4620      	mov	r0, r4
}
   d5750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5754:	f7ff b94a 	b.w	d49ec <HAL_Pin_Mode>
}
   d5758:	bd38      	pop	{r3, r4, r5, pc}
	...

000d575c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d575c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d575e:	2300      	movs	r3, #0
   d5760:	2520      	movs	r5, #32
   d5762:	8043      	strh	r3, [r0, #2]
   d5764:	2314      	movs	r3, #20
{
   d5766:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5768:	8003      	strh	r3, [r0, #0]
   d576a:	6085      	str	r5, [r0, #8]
   d576c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d576e:	4906      	ldr	r1, [pc, #24]	; (d5788 <_Z17acquireWireBufferv+0x2c>)
   d5770:	4628      	mov	r0, r5
   d5772:	f000 f83c 	bl	d57ee <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5776:	4904      	ldr	r1, [pc, #16]	; (d5788 <_Z17acquireWireBufferv+0x2c>)
	};
   d5778:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d577a:	4628      	mov	r0, r5
   d577c:	f000 f837 	bl	d57ee <_ZnajRKSt9nothrow_t>
	};
   d5780:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5782:	4620      	mov	r0, r4
   d5784:	bd38      	pop	{r3, r4, r5, pc}
   d5786:	bf00      	nop
   d5788:	000d62f0 	.word	0x000d62f0

000d578c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d578c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d578e:	4d0f      	ldr	r5, [pc, #60]	; (d57cc <_Z19__fetch_global_Wirev+0x40>)
   d5790:	7829      	ldrb	r1, [r5, #0]
   d5792:	f3bf 8f5b 	dmb	ish
   d5796:	f011 0401 	ands.w	r4, r1, #1
{
   d579a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d579c:	d113      	bne.n	d57c6 <_Z19__fetch_global_Wirev+0x3a>
   d579e:	4628      	mov	r0, r5
   d57a0:	f7fe fc7d 	bl	d409e <__cxa_guard_acquire>
   d57a4:	b178      	cbz	r0, d57c6 <_Z19__fetch_global_Wirev+0x3a>
   d57a6:	a801      	add	r0, sp, #4
   d57a8:	f7ff ffd8 	bl	d575c <_Z17acquireWireBufferv>
   d57ac:	aa01      	add	r2, sp, #4
   d57ae:	4621      	mov	r1, r4
   d57b0:	4807      	ldr	r0, [pc, #28]	; (d57d0 <_Z19__fetch_global_Wirev+0x44>)
   d57b2:	f7ff fe83 	bl	d54bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d57b6:	4628      	mov	r0, r5
   d57b8:	f7fe fc76 	bl	d40a8 <__cxa_guard_release>
   d57bc:	4a05      	ldr	r2, [pc, #20]	; (d57d4 <_Z19__fetch_global_Wirev+0x48>)
   d57be:	4906      	ldr	r1, [pc, #24]	; (d57d8 <_Z19__fetch_global_Wirev+0x4c>)
   d57c0:	4803      	ldr	r0, [pc, #12]	; (d57d0 <_Z19__fetch_global_Wirev+0x44>)
   d57c2:	f000 f80b 	bl	d57dc <__aeabi_atexit>
	return wire;
}
   d57c6:	4802      	ldr	r0, [pc, #8]	; (d57d0 <_Z19__fetch_global_Wirev+0x44>)
   d57c8:	b007      	add	sp, #28
   d57ca:	bd30      	pop	{r4, r5, pc}
   d57cc:	2003e7d8 	.word	0x2003e7d8
   d57d0:	2003e7dc 	.word	0x2003e7dc
   d57d4:	2003e4f8 	.word	0x2003e4f8
   d57d8:	000d5465 	.word	0x000d5465

000d57dc <__aeabi_atexit>:
   d57dc:	460b      	mov	r3, r1
   d57de:	4601      	mov	r1, r0
   d57e0:	4618      	mov	r0, r3
   d57e2:	f000 bc5f 	b.w	d60a4 <__cxa_atexit>

000d57e6 <_ZdlPvj>:
   d57e6:	f7fe bc58 	b.w	d409a <_ZdlPv>

000d57ea <_ZnwjRKSt9nothrow_t>:
   d57ea:	f7fe bc52 	b.w	d4092 <_Znwj>

000d57ee <_ZnajRKSt9nothrow_t>:
   d57ee:	f7fe bc52 	b.w	d4096 <_Znaj>

000d57f2 <_ZSt25__throw_bad_function_callv>:
   d57f2:	b508      	push	{r3, lr}
   d57f4:	f7ff fade 	bl	d4db4 <abort>

000d57f8 <__aeabi_drsub>:
   d57f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d57fc:	e002      	b.n	d5804 <__adddf3>
   d57fe:	bf00      	nop

000d5800 <__aeabi_dsub>:
   d5800:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5804 <__adddf3>:
   d5804:	b530      	push	{r4, r5, lr}
   d5806:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d580a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d580e:	ea94 0f05 	teq	r4, r5
   d5812:	bf08      	it	eq
   d5814:	ea90 0f02 	teqeq	r0, r2
   d5818:	bf1f      	itttt	ne
   d581a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d581e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5822:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5826:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d582a:	f000 80e2 	beq.w	d59f2 <__adddf3+0x1ee>
   d582e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5832:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5836:	bfb8      	it	lt
   d5838:	426d      	neglt	r5, r5
   d583a:	dd0c      	ble.n	d5856 <__adddf3+0x52>
   d583c:	442c      	add	r4, r5
   d583e:	ea80 0202 	eor.w	r2, r0, r2
   d5842:	ea81 0303 	eor.w	r3, r1, r3
   d5846:	ea82 0000 	eor.w	r0, r2, r0
   d584a:	ea83 0101 	eor.w	r1, r3, r1
   d584e:	ea80 0202 	eor.w	r2, r0, r2
   d5852:	ea81 0303 	eor.w	r3, r1, r3
   d5856:	2d36      	cmp	r5, #54	; 0x36
   d5858:	bf88      	it	hi
   d585a:	bd30      	pophi	{r4, r5, pc}
   d585c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5860:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5864:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5868:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d586c:	d002      	beq.n	d5874 <__adddf3+0x70>
   d586e:	4240      	negs	r0, r0
   d5870:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5874:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5878:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d587c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5880:	d002      	beq.n	d5888 <__adddf3+0x84>
   d5882:	4252      	negs	r2, r2
   d5884:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5888:	ea94 0f05 	teq	r4, r5
   d588c:	f000 80a7 	beq.w	d59de <__adddf3+0x1da>
   d5890:	f1a4 0401 	sub.w	r4, r4, #1
   d5894:	f1d5 0e20 	rsbs	lr, r5, #32
   d5898:	db0d      	blt.n	d58b6 <__adddf3+0xb2>
   d589a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d589e:	fa22 f205 	lsr.w	r2, r2, r5
   d58a2:	1880      	adds	r0, r0, r2
   d58a4:	f141 0100 	adc.w	r1, r1, #0
   d58a8:	fa03 f20e 	lsl.w	r2, r3, lr
   d58ac:	1880      	adds	r0, r0, r2
   d58ae:	fa43 f305 	asr.w	r3, r3, r5
   d58b2:	4159      	adcs	r1, r3
   d58b4:	e00e      	b.n	d58d4 <__adddf3+0xd0>
   d58b6:	f1a5 0520 	sub.w	r5, r5, #32
   d58ba:	f10e 0e20 	add.w	lr, lr, #32
   d58be:	2a01      	cmp	r2, #1
   d58c0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d58c4:	bf28      	it	cs
   d58c6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d58ca:	fa43 f305 	asr.w	r3, r3, r5
   d58ce:	18c0      	adds	r0, r0, r3
   d58d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d58d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d58d8:	d507      	bpl.n	d58ea <__adddf3+0xe6>
   d58da:	f04f 0e00 	mov.w	lr, #0
   d58de:	f1dc 0c00 	rsbs	ip, ip, #0
   d58e2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d58e6:	eb6e 0101 	sbc.w	r1, lr, r1
   d58ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d58ee:	d31b      	bcc.n	d5928 <__adddf3+0x124>
   d58f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d58f4:	d30c      	bcc.n	d5910 <__adddf3+0x10c>
   d58f6:	0849      	lsrs	r1, r1, #1
   d58f8:	ea5f 0030 	movs.w	r0, r0, rrx
   d58fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5900:	f104 0401 	add.w	r4, r4, #1
   d5904:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5908:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d590c:	f080 809a 	bcs.w	d5a44 <__adddf3+0x240>
   d5910:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5914:	bf08      	it	eq
   d5916:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d591a:	f150 0000 	adcs.w	r0, r0, #0
   d591e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5922:	ea41 0105 	orr.w	r1, r1, r5
   d5926:	bd30      	pop	{r4, r5, pc}
   d5928:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d592c:	4140      	adcs	r0, r0
   d592e:	eb41 0101 	adc.w	r1, r1, r1
   d5932:	3c01      	subs	r4, #1
   d5934:	bf28      	it	cs
   d5936:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d593a:	d2e9      	bcs.n	d5910 <__adddf3+0x10c>
   d593c:	f091 0f00 	teq	r1, #0
   d5940:	bf04      	itt	eq
   d5942:	4601      	moveq	r1, r0
   d5944:	2000      	moveq	r0, #0
   d5946:	fab1 f381 	clz	r3, r1
   d594a:	bf08      	it	eq
   d594c:	3320      	addeq	r3, #32
   d594e:	f1a3 030b 	sub.w	r3, r3, #11
   d5952:	f1b3 0220 	subs.w	r2, r3, #32
   d5956:	da0c      	bge.n	d5972 <__adddf3+0x16e>
   d5958:	320c      	adds	r2, #12
   d595a:	dd08      	ble.n	d596e <__adddf3+0x16a>
   d595c:	f102 0c14 	add.w	ip, r2, #20
   d5960:	f1c2 020c 	rsb	r2, r2, #12
   d5964:	fa01 f00c 	lsl.w	r0, r1, ip
   d5968:	fa21 f102 	lsr.w	r1, r1, r2
   d596c:	e00c      	b.n	d5988 <__adddf3+0x184>
   d596e:	f102 0214 	add.w	r2, r2, #20
   d5972:	bfd8      	it	le
   d5974:	f1c2 0c20 	rsble	ip, r2, #32
   d5978:	fa01 f102 	lsl.w	r1, r1, r2
   d597c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5980:	bfdc      	itt	le
   d5982:	ea41 010c 	orrle.w	r1, r1, ip
   d5986:	4090      	lslle	r0, r2
   d5988:	1ae4      	subs	r4, r4, r3
   d598a:	bfa2      	ittt	ge
   d598c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5990:	4329      	orrge	r1, r5
   d5992:	bd30      	popge	{r4, r5, pc}
   d5994:	ea6f 0404 	mvn.w	r4, r4
   d5998:	3c1f      	subs	r4, #31
   d599a:	da1c      	bge.n	d59d6 <__adddf3+0x1d2>
   d599c:	340c      	adds	r4, #12
   d599e:	dc0e      	bgt.n	d59be <__adddf3+0x1ba>
   d59a0:	f104 0414 	add.w	r4, r4, #20
   d59a4:	f1c4 0220 	rsb	r2, r4, #32
   d59a8:	fa20 f004 	lsr.w	r0, r0, r4
   d59ac:	fa01 f302 	lsl.w	r3, r1, r2
   d59b0:	ea40 0003 	orr.w	r0, r0, r3
   d59b4:	fa21 f304 	lsr.w	r3, r1, r4
   d59b8:	ea45 0103 	orr.w	r1, r5, r3
   d59bc:	bd30      	pop	{r4, r5, pc}
   d59be:	f1c4 040c 	rsb	r4, r4, #12
   d59c2:	f1c4 0220 	rsb	r2, r4, #32
   d59c6:	fa20 f002 	lsr.w	r0, r0, r2
   d59ca:	fa01 f304 	lsl.w	r3, r1, r4
   d59ce:	ea40 0003 	orr.w	r0, r0, r3
   d59d2:	4629      	mov	r1, r5
   d59d4:	bd30      	pop	{r4, r5, pc}
   d59d6:	fa21 f004 	lsr.w	r0, r1, r4
   d59da:	4629      	mov	r1, r5
   d59dc:	bd30      	pop	{r4, r5, pc}
   d59de:	f094 0f00 	teq	r4, #0
   d59e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d59e6:	bf06      	itte	eq
   d59e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d59ec:	3401      	addeq	r4, #1
   d59ee:	3d01      	subne	r5, #1
   d59f0:	e74e      	b.n	d5890 <__adddf3+0x8c>
   d59f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d59f6:	bf18      	it	ne
   d59f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d59fc:	d029      	beq.n	d5a52 <__adddf3+0x24e>
   d59fe:	ea94 0f05 	teq	r4, r5
   d5a02:	bf08      	it	eq
   d5a04:	ea90 0f02 	teqeq	r0, r2
   d5a08:	d005      	beq.n	d5a16 <__adddf3+0x212>
   d5a0a:	ea54 0c00 	orrs.w	ip, r4, r0
   d5a0e:	bf04      	itt	eq
   d5a10:	4619      	moveq	r1, r3
   d5a12:	4610      	moveq	r0, r2
   d5a14:	bd30      	pop	{r4, r5, pc}
   d5a16:	ea91 0f03 	teq	r1, r3
   d5a1a:	bf1e      	ittt	ne
   d5a1c:	2100      	movne	r1, #0
   d5a1e:	2000      	movne	r0, #0
   d5a20:	bd30      	popne	{r4, r5, pc}
   d5a22:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5a26:	d105      	bne.n	d5a34 <__adddf3+0x230>
   d5a28:	0040      	lsls	r0, r0, #1
   d5a2a:	4149      	adcs	r1, r1
   d5a2c:	bf28      	it	cs
   d5a2e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5a32:	bd30      	pop	{r4, r5, pc}
   d5a34:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5a38:	bf3c      	itt	cc
   d5a3a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5a3e:	bd30      	popcc	{r4, r5, pc}
   d5a40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a44:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5a48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5a4c:	f04f 0000 	mov.w	r0, #0
   d5a50:	bd30      	pop	{r4, r5, pc}
   d5a52:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a56:	bf1a      	itte	ne
   d5a58:	4619      	movne	r1, r3
   d5a5a:	4610      	movne	r0, r2
   d5a5c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5a60:	bf1c      	itt	ne
   d5a62:	460b      	movne	r3, r1
   d5a64:	4602      	movne	r2, r0
   d5a66:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5a6a:	bf06      	itte	eq
   d5a6c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5a70:	ea91 0f03 	teqeq	r1, r3
   d5a74:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5a78:	bd30      	pop	{r4, r5, pc}
   d5a7a:	bf00      	nop

000d5a7c <__aeabi_ui2d>:
   d5a7c:	f090 0f00 	teq	r0, #0
   d5a80:	bf04      	itt	eq
   d5a82:	2100      	moveq	r1, #0
   d5a84:	4770      	bxeq	lr
   d5a86:	b530      	push	{r4, r5, lr}
   d5a88:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a90:	f04f 0500 	mov.w	r5, #0
   d5a94:	f04f 0100 	mov.w	r1, #0
   d5a98:	e750      	b.n	d593c <__adddf3+0x138>
   d5a9a:	bf00      	nop

000d5a9c <__aeabi_i2d>:
   d5a9c:	f090 0f00 	teq	r0, #0
   d5aa0:	bf04      	itt	eq
   d5aa2:	2100      	moveq	r1, #0
   d5aa4:	4770      	bxeq	lr
   d5aa6:	b530      	push	{r4, r5, lr}
   d5aa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5aac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ab0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5ab4:	bf48      	it	mi
   d5ab6:	4240      	negmi	r0, r0
   d5ab8:	f04f 0100 	mov.w	r1, #0
   d5abc:	e73e      	b.n	d593c <__adddf3+0x138>
   d5abe:	bf00      	nop

000d5ac0 <__aeabi_f2d>:
   d5ac0:	0042      	lsls	r2, r0, #1
   d5ac2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5ac6:	ea4f 0131 	mov.w	r1, r1, rrx
   d5aca:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5ace:	bf1f      	itttt	ne
   d5ad0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5ad4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5ad8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5adc:	4770      	bxne	lr
   d5ade:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5ae2:	bf08      	it	eq
   d5ae4:	4770      	bxeq	lr
   d5ae6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5aea:	bf04      	itt	eq
   d5aec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5af0:	4770      	bxeq	lr
   d5af2:	b530      	push	{r4, r5, lr}
   d5af4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5af8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5afc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5b00:	e71c      	b.n	d593c <__adddf3+0x138>
   d5b02:	bf00      	nop

000d5b04 <__aeabi_ul2d>:
   d5b04:	ea50 0201 	orrs.w	r2, r0, r1
   d5b08:	bf08      	it	eq
   d5b0a:	4770      	bxeq	lr
   d5b0c:	b530      	push	{r4, r5, lr}
   d5b0e:	f04f 0500 	mov.w	r5, #0
   d5b12:	e00a      	b.n	d5b2a <__aeabi_l2d+0x16>

000d5b14 <__aeabi_l2d>:
   d5b14:	ea50 0201 	orrs.w	r2, r0, r1
   d5b18:	bf08      	it	eq
   d5b1a:	4770      	bxeq	lr
   d5b1c:	b530      	push	{r4, r5, lr}
   d5b1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5b22:	d502      	bpl.n	d5b2a <__aeabi_l2d+0x16>
   d5b24:	4240      	negs	r0, r0
   d5b26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5b2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5b2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5b32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5b36:	f43f aed8 	beq.w	d58ea <__adddf3+0xe6>
   d5b3a:	f04f 0203 	mov.w	r2, #3
   d5b3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b42:	bf18      	it	ne
   d5b44:	3203      	addne	r2, #3
   d5b46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b4a:	bf18      	it	ne
   d5b4c:	3203      	addne	r2, #3
   d5b4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5b52:	f1c2 0320 	rsb	r3, r2, #32
   d5b56:	fa00 fc03 	lsl.w	ip, r0, r3
   d5b5a:	fa20 f002 	lsr.w	r0, r0, r2
   d5b5e:	fa01 fe03 	lsl.w	lr, r1, r3
   d5b62:	ea40 000e 	orr.w	r0, r0, lr
   d5b66:	fa21 f102 	lsr.w	r1, r1, r2
   d5b6a:	4414      	add	r4, r2
   d5b6c:	e6bd      	b.n	d58ea <__adddf3+0xe6>
   d5b6e:	bf00      	nop

000d5b70 <__aeabi_dmul>:
   d5b70:	b570      	push	{r4, r5, r6, lr}
   d5b72:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5b76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5b7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5b7e:	bf1d      	ittte	ne
   d5b80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5b84:	ea94 0f0c 	teqne	r4, ip
   d5b88:	ea95 0f0c 	teqne	r5, ip
   d5b8c:	f000 f8de 	bleq	d5d4c <__aeabi_dmul+0x1dc>
   d5b90:	442c      	add	r4, r5
   d5b92:	ea81 0603 	eor.w	r6, r1, r3
   d5b96:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5b9a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5b9e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5ba2:	bf18      	it	ne
   d5ba4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5ba8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5bac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5bb0:	d038      	beq.n	d5c24 <__aeabi_dmul+0xb4>
   d5bb2:	fba0 ce02 	umull	ip, lr, r0, r2
   d5bb6:	f04f 0500 	mov.w	r5, #0
   d5bba:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5bbe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5bc2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5bc6:	f04f 0600 	mov.w	r6, #0
   d5bca:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5bce:	f09c 0f00 	teq	ip, #0
   d5bd2:	bf18      	it	ne
   d5bd4:	f04e 0e01 	orrne.w	lr, lr, #1
   d5bd8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5bdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5be0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5be4:	d204      	bcs.n	d5bf0 <__aeabi_dmul+0x80>
   d5be6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5bea:	416d      	adcs	r5, r5
   d5bec:	eb46 0606 	adc.w	r6, r6, r6
   d5bf0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5bf4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5bf8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5bfc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5c00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5c04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5c08:	bf88      	it	hi
   d5c0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5c0e:	d81e      	bhi.n	d5c4e <__aeabi_dmul+0xde>
   d5c10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5c14:	bf08      	it	eq
   d5c16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5c1a:	f150 0000 	adcs.w	r0, r0, #0
   d5c1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5c22:	bd70      	pop	{r4, r5, r6, pc}
   d5c24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5c28:	ea46 0101 	orr.w	r1, r6, r1
   d5c2c:	ea40 0002 	orr.w	r0, r0, r2
   d5c30:	ea81 0103 	eor.w	r1, r1, r3
   d5c34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5c38:	bfc2      	ittt	gt
   d5c3a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5c3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5c42:	bd70      	popgt	{r4, r5, r6, pc}
   d5c44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5c48:	f04f 0e00 	mov.w	lr, #0
   d5c4c:	3c01      	subs	r4, #1
   d5c4e:	f300 80ab 	bgt.w	d5da8 <__aeabi_dmul+0x238>
   d5c52:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5c56:	bfde      	ittt	le
   d5c58:	2000      	movle	r0, #0
   d5c5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5c5e:	bd70      	pople	{r4, r5, r6, pc}
   d5c60:	f1c4 0400 	rsb	r4, r4, #0
   d5c64:	3c20      	subs	r4, #32
   d5c66:	da35      	bge.n	d5cd4 <__aeabi_dmul+0x164>
   d5c68:	340c      	adds	r4, #12
   d5c6a:	dc1b      	bgt.n	d5ca4 <__aeabi_dmul+0x134>
   d5c6c:	f104 0414 	add.w	r4, r4, #20
   d5c70:	f1c4 0520 	rsb	r5, r4, #32
   d5c74:	fa00 f305 	lsl.w	r3, r0, r5
   d5c78:	fa20 f004 	lsr.w	r0, r0, r4
   d5c7c:	fa01 f205 	lsl.w	r2, r1, r5
   d5c80:	ea40 0002 	orr.w	r0, r0, r2
   d5c84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5c88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5c8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5c90:	fa21 f604 	lsr.w	r6, r1, r4
   d5c94:	eb42 0106 	adc.w	r1, r2, r6
   d5c98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5c9c:	bf08      	it	eq
   d5c9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5ca2:	bd70      	pop	{r4, r5, r6, pc}
   d5ca4:	f1c4 040c 	rsb	r4, r4, #12
   d5ca8:	f1c4 0520 	rsb	r5, r4, #32
   d5cac:	fa00 f304 	lsl.w	r3, r0, r4
   d5cb0:	fa20 f005 	lsr.w	r0, r0, r5
   d5cb4:	fa01 f204 	lsl.w	r2, r1, r4
   d5cb8:	ea40 0002 	orr.w	r0, r0, r2
   d5cbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5cc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5cc4:	f141 0100 	adc.w	r1, r1, #0
   d5cc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5ccc:	bf08      	it	eq
   d5cce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5cd2:	bd70      	pop	{r4, r5, r6, pc}
   d5cd4:	f1c4 0520 	rsb	r5, r4, #32
   d5cd8:	fa00 f205 	lsl.w	r2, r0, r5
   d5cdc:	ea4e 0e02 	orr.w	lr, lr, r2
   d5ce0:	fa20 f304 	lsr.w	r3, r0, r4
   d5ce4:	fa01 f205 	lsl.w	r2, r1, r5
   d5ce8:	ea43 0302 	orr.w	r3, r3, r2
   d5cec:	fa21 f004 	lsr.w	r0, r1, r4
   d5cf0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5cf4:	fa21 f204 	lsr.w	r2, r1, r4
   d5cf8:	ea20 0002 	bic.w	r0, r0, r2
   d5cfc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5d00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5d04:	bf08      	it	eq
   d5d06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5d0a:	bd70      	pop	{r4, r5, r6, pc}
   d5d0c:	f094 0f00 	teq	r4, #0
   d5d10:	d10f      	bne.n	d5d32 <__aeabi_dmul+0x1c2>
   d5d12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5d16:	0040      	lsls	r0, r0, #1
   d5d18:	eb41 0101 	adc.w	r1, r1, r1
   d5d1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d20:	bf08      	it	eq
   d5d22:	3c01      	subeq	r4, #1
   d5d24:	d0f7      	beq.n	d5d16 <__aeabi_dmul+0x1a6>
   d5d26:	ea41 0106 	orr.w	r1, r1, r6
   d5d2a:	f095 0f00 	teq	r5, #0
   d5d2e:	bf18      	it	ne
   d5d30:	4770      	bxne	lr
   d5d32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5d36:	0052      	lsls	r2, r2, #1
   d5d38:	eb43 0303 	adc.w	r3, r3, r3
   d5d3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5d40:	bf08      	it	eq
   d5d42:	3d01      	subeq	r5, #1
   d5d44:	d0f7      	beq.n	d5d36 <__aeabi_dmul+0x1c6>
   d5d46:	ea43 0306 	orr.w	r3, r3, r6
   d5d4a:	4770      	bx	lr
   d5d4c:	ea94 0f0c 	teq	r4, ip
   d5d50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5d54:	bf18      	it	ne
   d5d56:	ea95 0f0c 	teqne	r5, ip
   d5d5a:	d00c      	beq.n	d5d76 <__aeabi_dmul+0x206>
   d5d5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d60:	bf18      	it	ne
   d5d62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d66:	d1d1      	bne.n	d5d0c <__aeabi_dmul+0x19c>
   d5d68:	ea81 0103 	eor.w	r1, r1, r3
   d5d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d70:	f04f 0000 	mov.w	r0, #0
   d5d74:	bd70      	pop	{r4, r5, r6, pc}
   d5d76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d7a:	bf06      	itte	eq
   d5d7c:	4610      	moveq	r0, r2
   d5d7e:	4619      	moveq	r1, r3
   d5d80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d84:	d019      	beq.n	d5dba <__aeabi_dmul+0x24a>
   d5d86:	ea94 0f0c 	teq	r4, ip
   d5d8a:	d102      	bne.n	d5d92 <__aeabi_dmul+0x222>
   d5d8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5d90:	d113      	bne.n	d5dba <__aeabi_dmul+0x24a>
   d5d92:	ea95 0f0c 	teq	r5, ip
   d5d96:	d105      	bne.n	d5da4 <__aeabi_dmul+0x234>
   d5d98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5d9c:	bf1c      	itt	ne
   d5d9e:	4610      	movne	r0, r2
   d5da0:	4619      	movne	r1, r3
   d5da2:	d10a      	bne.n	d5dba <__aeabi_dmul+0x24a>
   d5da4:	ea81 0103 	eor.w	r1, r1, r3
   d5da8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5dac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5db0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5db4:	f04f 0000 	mov.w	r0, #0
   d5db8:	bd70      	pop	{r4, r5, r6, pc}
   d5dba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5dbe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5dc2:	bd70      	pop	{r4, r5, r6, pc}

000d5dc4 <__aeabi_ddiv>:
   d5dc4:	b570      	push	{r4, r5, r6, lr}
   d5dc6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5dca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5dce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5dd2:	bf1d      	ittte	ne
   d5dd4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5dd8:	ea94 0f0c 	teqne	r4, ip
   d5ddc:	ea95 0f0c 	teqne	r5, ip
   d5de0:	f000 f8a7 	bleq	d5f32 <__aeabi_ddiv+0x16e>
   d5de4:	eba4 0405 	sub.w	r4, r4, r5
   d5de8:	ea81 0e03 	eor.w	lr, r1, r3
   d5dec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5df0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5df4:	f000 8088 	beq.w	d5f08 <__aeabi_ddiv+0x144>
   d5df8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5dfc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5e00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5e04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5e08:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5e0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5e10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5e14:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5e18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5e1c:	429d      	cmp	r5, r3
   d5e1e:	bf08      	it	eq
   d5e20:	4296      	cmpeq	r6, r2
   d5e22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5e26:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5e2a:	d202      	bcs.n	d5e32 <__aeabi_ddiv+0x6e>
   d5e2c:	085b      	lsrs	r3, r3, #1
   d5e2e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e32:	1ab6      	subs	r6, r6, r2
   d5e34:	eb65 0503 	sbc.w	r5, r5, r3
   d5e38:	085b      	lsrs	r3, r3, #1
   d5e3a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5e42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5e46:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e4a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e4e:	bf22      	ittt	cs
   d5e50:	1ab6      	subcs	r6, r6, r2
   d5e52:	4675      	movcs	r5, lr
   d5e54:	ea40 000c 	orrcs.w	r0, r0, ip
   d5e58:	085b      	lsrs	r3, r3, #1
   d5e5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e5e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e62:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e66:	bf22      	ittt	cs
   d5e68:	1ab6      	subcs	r6, r6, r2
   d5e6a:	4675      	movcs	r5, lr
   d5e6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5e70:	085b      	lsrs	r3, r3, #1
   d5e72:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e76:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e7e:	bf22      	ittt	cs
   d5e80:	1ab6      	subcs	r6, r6, r2
   d5e82:	4675      	movcs	r5, lr
   d5e84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5e88:	085b      	lsrs	r3, r3, #1
   d5e8a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e96:	bf22      	ittt	cs
   d5e98:	1ab6      	subcs	r6, r6, r2
   d5e9a:	4675      	movcs	r5, lr
   d5e9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5ea0:	ea55 0e06 	orrs.w	lr, r5, r6
   d5ea4:	d018      	beq.n	d5ed8 <__aeabi_ddiv+0x114>
   d5ea6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5eaa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5eae:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5eb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5eb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5eba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5ebe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5ec2:	d1c0      	bne.n	d5e46 <__aeabi_ddiv+0x82>
   d5ec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5ec8:	d10b      	bne.n	d5ee2 <__aeabi_ddiv+0x11e>
   d5eca:	ea41 0100 	orr.w	r1, r1, r0
   d5ece:	f04f 0000 	mov.w	r0, #0
   d5ed2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5ed6:	e7b6      	b.n	d5e46 <__aeabi_ddiv+0x82>
   d5ed8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5edc:	bf04      	itt	eq
   d5ede:	4301      	orreq	r1, r0
   d5ee0:	2000      	moveq	r0, #0
   d5ee2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5ee6:	bf88      	it	hi
   d5ee8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5eec:	f63f aeaf 	bhi.w	d5c4e <__aeabi_dmul+0xde>
   d5ef0:	ebb5 0c03 	subs.w	ip, r5, r3
   d5ef4:	bf04      	itt	eq
   d5ef6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5efa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5efe:	f150 0000 	adcs.w	r0, r0, #0
   d5f02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5f06:	bd70      	pop	{r4, r5, r6, pc}
   d5f08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5f0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5f10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5f14:	bfc2      	ittt	gt
   d5f16:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5f1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5f1e:	bd70      	popgt	{r4, r5, r6, pc}
   d5f20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f24:	f04f 0e00 	mov.w	lr, #0
   d5f28:	3c01      	subs	r4, #1
   d5f2a:	e690      	b.n	d5c4e <__aeabi_dmul+0xde>
   d5f2c:	ea45 0e06 	orr.w	lr, r5, r6
   d5f30:	e68d      	b.n	d5c4e <__aeabi_dmul+0xde>
   d5f32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5f36:	ea94 0f0c 	teq	r4, ip
   d5f3a:	bf08      	it	eq
   d5f3c:	ea95 0f0c 	teqeq	r5, ip
   d5f40:	f43f af3b 	beq.w	d5dba <__aeabi_dmul+0x24a>
   d5f44:	ea94 0f0c 	teq	r4, ip
   d5f48:	d10a      	bne.n	d5f60 <__aeabi_ddiv+0x19c>
   d5f4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5f4e:	f47f af34 	bne.w	d5dba <__aeabi_dmul+0x24a>
   d5f52:	ea95 0f0c 	teq	r5, ip
   d5f56:	f47f af25 	bne.w	d5da4 <__aeabi_dmul+0x234>
   d5f5a:	4610      	mov	r0, r2
   d5f5c:	4619      	mov	r1, r3
   d5f5e:	e72c      	b.n	d5dba <__aeabi_dmul+0x24a>
   d5f60:	ea95 0f0c 	teq	r5, ip
   d5f64:	d106      	bne.n	d5f74 <__aeabi_ddiv+0x1b0>
   d5f66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5f6a:	f43f aefd 	beq.w	d5d68 <__aeabi_dmul+0x1f8>
   d5f6e:	4610      	mov	r0, r2
   d5f70:	4619      	mov	r1, r3
   d5f72:	e722      	b.n	d5dba <__aeabi_dmul+0x24a>
   d5f74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5f78:	bf18      	it	ne
   d5f7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5f7e:	f47f aec5 	bne.w	d5d0c <__aeabi_dmul+0x19c>
   d5f82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5f86:	f47f af0d 	bne.w	d5da4 <__aeabi_dmul+0x234>
   d5f8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5f8e:	f47f aeeb 	bne.w	d5d68 <__aeabi_dmul+0x1f8>
   d5f92:	e712      	b.n	d5dba <__aeabi_dmul+0x24a>

000d5f94 <__gedf2>:
   d5f94:	f04f 3cff 	mov.w	ip, #4294967295
   d5f98:	e006      	b.n	d5fa8 <__cmpdf2+0x4>
   d5f9a:	bf00      	nop

000d5f9c <__ledf2>:
   d5f9c:	f04f 0c01 	mov.w	ip, #1
   d5fa0:	e002      	b.n	d5fa8 <__cmpdf2+0x4>
   d5fa2:	bf00      	nop

000d5fa4 <__cmpdf2>:
   d5fa4:	f04f 0c01 	mov.w	ip, #1
   d5fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5fac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5fb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5fb4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5fb8:	bf18      	it	ne
   d5fba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5fbe:	d01b      	beq.n	d5ff8 <__cmpdf2+0x54>
   d5fc0:	b001      	add	sp, #4
   d5fc2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5fc6:	bf0c      	ite	eq
   d5fc8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5fcc:	ea91 0f03 	teqne	r1, r3
   d5fd0:	bf02      	ittt	eq
   d5fd2:	ea90 0f02 	teqeq	r0, r2
   d5fd6:	2000      	moveq	r0, #0
   d5fd8:	4770      	bxeq	lr
   d5fda:	f110 0f00 	cmn.w	r0, #0
   d5fde:	ea91 0f03 	teq	r1, r3
   d5fe2:	bf58      	it	pl
   d5fe4:	4299      	cmppl	r1, r3
   d5fe6:	bf08      	it	eq
   d5fe8:	4290      	cmpeq	r0, r2
   d5fea:	bf2c      	ite	cs
   d5fec:	17d8      	asrcs	r0, r3, #31
   d5fee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d5ff2:	f040 0001 	orr.w	r0, r0, #1
   d5ff6:	4770      	bx	lr
   d5ff8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5ffc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6000:	d102      	bne.n	d6008 <__cmpdf2+0x64>
   d6002:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6006:	d107      	bne.n	d6018 <__cmpdf2+0x74>
   d6008:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d600c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d6010:	d1d6      	bne.n	d5fc0 <__cmpdf2+0x1c>
   d6012:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6016:	d0d3      	beq.n	d5fc0 <__cmpdf2+0x1c>
   d6018:	f85d 0b04 	ldr.w	r0, [sp], #4
   d601c:	4770      	bx	lr
   d601e:	bf00      	nop

000d6020 <__aeabi_cdrcmple>:
   d6020:	4684      	mov	ip, r0
   d6022:	4610      	mov	r0, r2
   d6024:	4662      	mov	r2, ip
   d6026:	468c      	mov	ip, r1
   d6028:	4619      	mov	r1, r3
   d602a:	4663      	mov	r3, ip
   d602c:	e000      	b.n	d6030 <__aeabi_cdcmpeq>
   d602e:	bf00      	nop

000d6030 <__aeabi_cdcmpeq>:
   d6030:	b501      	push	{r0, lr}
   d6032:	f7ff ffb7 	bl	d5fa4 <__cmpdf2>
   d6036:	2800      	cmp	r0, #0
   d6038:	bf48      	it	mi
   d603a:	f110 0f00 	cmnmi.w	r0, #0
   d603e:	bd01      	pop	{r0, pc}

000d6040 <__aeabi_dcmpeq>:
   d6040:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6044:	f7ff fff4 	bl	d6030 <__aeabi_cdcmpeq>
   d6048:	bf0c      	ite	eq
   d604a:	2001      	moveq	r0, #1
   d604c:	2000      	movne	r0, #0
   d604e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6052:	bf00      	nop

000d6054 <__aeabi_dcmplt>:
   d6054:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6058:	f7ff ffea 	bl	d6030 <__aeabi_cdcmpeq>
   d605c:	bf34      	ite	cc
   d605e:	2001      	movcc	r0, #1
   d6060:	2000      	movcs	r0, #0
   d6062:	f85d fb08 	ldr.w	pc, [sp], #8
   d6066:	bf00      	nop

000d6068 <__aeabi_dcmple>:
   d6068:	f84d ed08 	str.w	lr, [sp, #-8]!
   d606c:	f7ff ffe0 	bl	d6030 <__aeabi_cdcmpeq>
   d6070:	bf94      	ite	ls
   d6072:	2001      	movls	r0, #1
   d6074:	2000      	movhi	r0, #0
   d6076:	f85d fb08 	ldr.w	pc, [sp], #8
   d607a:	bf00      	nop

000d607c <__aeabi_dcmpge>:
   d607c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6080:	f7ff ffce 	bl	d6020 <__aeabi_cdrcmple>
   d6084:	bf94      	ite	ls
   d6086:	2001      	movls	r0, #1
   d6088:	2000      	movhi	r0, #0
   d608a:	f85d fb08 	ldr.w	pc, [sp], #8
   d608e:	bf00      	nop

000d6090 <__aeabi_dcmpgt>:
   d6090:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6094:	f7ff ffc4 	bl	d6020 <__aeabi_cdrcmple>
   d6098:	bf34      	ite	cc
   d609a:	2001      	movcc	r0, #1
   d609c:	2000      	movcs	r0, #0
   d609e:	f85d fb08 	ldr.w	pc, [sp], #8
   d60a2:	bf00      	nop

000d60a4 <__cxa_atexit>:
   d60a4:	b510      	push	{r4, lr}
   d60a6:	4c05      	ldr	r4, [pc, #20]	; (d60bc <__cxa_atexit+0x18>)
   d60a8:	4613      	mov	r3, r2
   d60aa:	b12c      	cbz	r4, d60b8 <__cxa_atexit+0x14>
   d60ac:	460a      	mov	r2, r1
   d60ae:	4601      	mov	r1, r0
   d60b0:	2002      	movs	r0, #2
   d60b2:	f3af 8000 	nop.w
   d60b6:	bd10      	pop	{r4, pc}
   d60b8:	4620      	mov	r0, r4
   d60ba:	e7fc      	b.n	d60b6 <__cxa_atexit+0x12>
   d60bc:	00000000 	.word	0x00000000

000d60c0 <memcpy>:
   d60c0:	440a      	add	r2, r1
   d60c2:	4291      	cmp	r1, r2
   d60c4:	f100 33ff 	add.w	r3, r0, #4294967295
   d60c8:	d100      	bne.n	d60cc <memcpy+0xc>
   d60ca:	4770      	bx	lr
   d60cc:	b510      	push	{r4, lr}
   d60ce:	f811 4b01 	ldrb.w	r4, [r1], #1
   d60d2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d60d6:	4291      	cmp	r1, r2
   d60d8:	d1f9      	bne.n	d60ce <memcpy+0xe>
   d60da:	bd10      	pop	{r4, pc}

000d60dc <memset>:
   d60dc:	4402      	add	r2, r0
   d60de:	4603      	mov	r3, r0
   d60e0:	4293      	cmp	r3, r2
   d60e2:	d100      	bne.n	d60e6 <memset+0xa>
   d60e4:	4770      	bx	lr
   d60e6:	f803 1b01 	strb.w	r1, [r3], #1
   d60ea:	e7f9      	b.n	d60e0 <memset+0x4>

000d60ec <srand>:
   d60ec:	b538      	push	{r3, r4, r5, lr}
   d60ee:	4b0d      	ldr	r3, [pc, #52]	; (d6124 <srand+0x38>)
   d60f0:	681d      	ldr	r5, [r3, #0]
   d60f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d60f4:	4604      	mov	r4, r0
   d60f6:	b97b      	cbnz	r3, d6118 <srand+0x2c>
   d60f8:	2018      	movs	r0, #24
   d60fa:	f7fe fe4b 	bl	d4d94 <malloc>
   d60fe:	4a0a      	ldr	r2, [pc, #40]	; (d6128 <srand+0x3c>)
   d6100:	4b0a      	ldr	r3, [pc, #40]	; (d612c <srand+0x40>)
   d6102:	63a8      	str	r0, [r5, #56]	; 0x38
   d6104:	e9c0 2300 	strd	r2, r3, [r0]
   d6108:	4b09      	ldr	r3, [pc, #36]	; (d6130 <srand+0x44>)
   d610a:	6083      	str	r3, [r0, #8]
   d610c:	230b      	movs	r3, #11
   d610e:	8183      	strh	r3, [r0, #12]
   d6110:	2201      	movs	r2, #1
   d6112:	2300      	movs	r3, #0
   d6114:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6118:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d611a:	2200      	movs	r2, #0
   d611c:	611c      	str	r4, [r3, #16]
   d611e:	615a      	str	r2, [r3, #20]
   d6120:	bd38      	pop	{r3, r4, r5, pc}
   d6122:	bf00      	nop
   d6124:	2003e494 	.word	0x2003e494
   d6128:	abcd330e 	.word	0xabcd330e
   d612c:	e66d1234 	.word	0xe66d1234
   d6130:	0005deec 	.word	0x0005deec

000d6134 <strlen>:
   d6134:	4603      	mov	r3, r0
   d6136:	f813 2b01 	ldrb.w	r2, [r3], #1
   d613a:	2a00      	cmp	r2, #0
   d613c:	d1fb      	bne.n	d6136 <strlen+0x2>
   d613e:	1a18      	subs	r0, r3, r0
   d6140:	3801      	subs	r0, #1
   d6142:	4770      	bx	lr

000d6144 <dynalib_user>:
   d6144:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6154:	0000 0000 6e55 6d20 7365 6173 6567 5500     ....Un message.U
   d6164:	206e 656d 7373 6761 3f65 7300 6e65 6964     n message?.sendi
   d6174:	676e 6854 6572 6461 0000 0000               ngThread....

000d6180 <_ZTVN5spark13EthernetClassE>:
	...
   d6188:	4e33 000d 4e29 000d 4e1f 000d 4e15 000d     3N..)N...N...N..
   d6198:	4e09 000d 4dfd 000d 559d 000d 55a5 000d     .N...M...U...U..
   d61a8:	4df1 000d 4de9 000d 4ddf 000d 4dd5 000d     .M...M...M...M..
   d61b8:	55d5 000d 7061 0070 5925 252d 2d6d 6425     .U..app.%Y-%m-%d
   d61c8:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d61d8:	6d69 0065                                   ime.

000d61dc <_ZTV9IPAddress>:
	...
   d61e4:	5131 000d 5121 000d 5123 000d               1Q..!Q..#Q..

000d61f0 <_ZTV9USBSerial>:
	...
   d61f8:	5207 000d 526f 000d 5245 000d 4ed9 000d     .R..oR..ER...N..
   d6208:	5237 000d 5209 000d 5219 000d 5269 000d     7R...R...R..iR..
   d6218:	5229 000d 5203 000d                         )R...R..

000d6220 <_ZTV11USARTSerial>:
	...
   d6228:	5369 000d 53d5 000d 53ad 000d 4ed9 000d     iS...S...S...N..
   d6238:	537d 000d 5399 000d 538b 000d 53a7 000d     }S...S...S...S..
   d6248:	536b 000d 536f 000d                         kS..oS..

000d6250 <_ZTV7TwoWire>:
	...
   d6258:	5465 000d 54af 000d 5487 000d 5467 000d     eT...T...T..gT..
   d6268:	548f 000d 5497 000d 549f 000d 54a7 000d     .T...T...T...T..

000d6278 <_ZTVN5spark9WiFiClassE>:
	...
   d6280:	553f 000d 5535 000d 552b 000d 54e1 000d     ?U..5U..+U...T..
   d6290:	551f 000d 5513 000d 559d 000d 55a5 000d     .U...U...U...U..
   d62a0:	5507 000d 54ff 000d 54f5 000d 54eb 000d     .U...T...T...T..
   d62b0:	55d5 000d                                   .U..

000d62b4 <_ZTVN5spark12NetworkClassE>:
	...
   d62bc:	555d 000d 5567 000d 5571 000d 557b 000d     ]U..gU..qU..{U..
   d62cc:	5585 000d 5591 000d 559d 000d 55a5 000d     .U...U...U...U..
   d62dc:	55ad 000d 55b9 000d 55c1 000d 55cb 000d     .U...U...U...U..
   d62ec:	55d5 000d                                   .U..

000d62f0 <_ZSt7nothrow>:
	...

000d62f1 <link_const_variable_data_end>:
   d62f1:	00          	.byte	0x00
	...

000d62f4 <link_constructors_location>:
   d62f4:	000d48e9 	.word	0x000d48e9
   d62f8:	000d4e3d 	.word	0x000d4e3d
   d62fc:	000d4e65 	.word	0x000d4e65
   d6300:	000d4eb1 	.word	0x000d4eb1
   d6304:	000d4f99 	.word	0x000d4f99
   d6308:	000d4fa9 	.word	0x000d4fa9
   d630c:	000d4fe1 	.word	0x000d4fe1
   d6310:	000d5549 	.word	0x000d5549
   d6314:	000d56a9 	.word	0x000d56a9

000d6318 <link_constructors_end>:
	...
