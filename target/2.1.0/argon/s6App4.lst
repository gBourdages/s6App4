
c:/Users/Gabriel/Desktop/s6App4/target/2.1.0/argon/s6App4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002834  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6850  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003e470  000d6854  0001e470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000030c  2003e4e4  2003e4e4  0002e4e4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d68c8  000d68c8  000268c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d68f0  000d68f0  000268f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001159bc  00000000  00000000  000268f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013481  00000000  00000000  0013c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00023595  00000000  00000000  0014f731  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002400  00000000  00000000  00172cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006948  00000000  00000000  001750c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035466  00000000  00000000  0017ba0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000301cd  00000000  00000000  001b0e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00103eaf  00000000  00000000  001e1041  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005ff4  00000000  00000000  002e4ef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fa5d 	bl	d64ec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fa65 	bl	d6508 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e470 	.word	0x2003e470
   d4048:	000d6854 	.word	0x000d6854
   d404c:	2003e4e4 	.word	0x2003e4e4
   d4050:	2003e4e4 	.word	0x2003e4e4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fa29 	bl	d54b4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d682c 	.word	0x000d682c
   d407c:	000d6850 	.word	0x000d6850

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b9fa 	b.w	d4478 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 fd63 	bl	d4b50 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 b9d3 	b.w	d5438 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 b843 	b.w	d511c <malloc>

000d4096 <_Znaj>:
   d4096:	f001 b841 	b.w	d511c <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 b847 	b.w	d512c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40b0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	2b2f      	cmp	r3, #47	; 0x2f
{
   d40b6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40b8:	d904      	bls.n	d40c4 <nrf_gpio_pin_port_decode+0x14>
   d40ba:	4a07      	ldr	r2, [pc, #28]	; (d40d8 <nrf_gpio_pin_port_decode+0x28>)
   d40bc:	2100      	movs	r1, #0
   d40be:	200a      	movs	r0, #10
   d40c0:	f000 ff88 	bl	d4fd4 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40c4:	6823      	ldr	r3, [r4, #0]
   d40c6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40c8:	bf83      	ittte	hi
   d40ca:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d40ce:	4803      	ldrhi	r0, [pc, #12]	; (d40dc <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40d0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d40d2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d40d6:	bd10      	pop	{r4, pc}
   d40d8:	000d4d65 	.word	0x000d4d65
   d40dc:	50000300 	.word	0x50000300

000d40e0 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40e0:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d40e2:	2301      	movs	r3, #1
   d40e4:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d40e6:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d40e8:	4604      	mov	r4, r0
        if (th->func) {
   d40ea:	b143      	cbz	r3, d40fe <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d40ec:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d40ee:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d40f0:	2301      	movs	r3, #1
   d40f2:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d40f4:	2000      	movs	r0, #0
    }
   d40f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d40fa:	f000 be9b 	b.w	d4e34 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d40fe:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d4100:	2800      	cmp	r0, #0
   d4102:	d0f5      	beq.n	d40f0 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d4104:	6883      	ldr	r3, [r0, #8]
   d4106:	b90b      	cbnz	r3, d410c <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d4108:	f001 fd89 	bl	d5c1e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d410c:	68c3      	ldr	r3, [r0, #12]
   d410e:	e7ee      	b.n	d40ee <_ZN6Thread3runEPv+0xe>

000d4110 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4110:	b510      	push	{r4, lr}
   d4112:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4114:	6800      	ldr	r0, [r0, #0]
   d4116:	b108      	cbz	r0, d411c <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4118:	f001 f808 	bl	d512c <free>
class SystemClass {
   d411c:	4620      	mov	r0, r4
   d411e:	bd10      	pop	{r4, pc}

000d4120 <_ZN9USBSerial6unlockEv.isra.0>:
#if PLATFORM_THREADING
		os_mutex_recursive_lock(get_mutex());
#endif
	}

	void unlock()
   d4120:	b508      	push	{r3, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   d4122:	2100      	movs	r1, #0
   d4124:	2002      	movs	r0, #2
   d4126:	f000 ff75 	bl	d5014 <system_internal>
	{
#if PLATFORM_THREADING
		os_mutex_recursive_unlock(get_mutex());
#endif
	}
   d412a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		os_mutex_recursive_unlock(get_mutex());
   d412e:	f000 be79 	b.w	d4e24 <os_mutex_recursive_unlock>

000d4132 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0>:
      operator()(_Tp* __ptr) const
   d4132:	b538      	push	{r3, r4, r5, lr}
	delete __ptr;
   d4134:	4604      	mov	r4, r0
   d4136:	b188      	cbz	r0, d415c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0+0x2a>
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d4138:	6805      	ldr	r5, [r0, #0]
   d413a:	b14d      	cbz	r5, d4150 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0+0x1e>
      if (_M_manager)
   d413c:	68ab      	ldr	r3, [r5, #8]
   d413e:	b11b      	cbz	r3, d4148 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4140:	2203      	movs	r2, #3
   d4142:	4629      	mov	r1, r5
   d4144:	4628      	mov	r0, r5
   d4146:	4798      	blx	r3
	delete __ptr;
   d4148:	2110      	movs	r1, #16
   d414a:	4628      	mov	r0, r5
   d414c:	f001 fd61 	bl	d5c12 <_ZdlPvj>
   d4150:	4620      	mov	r0, r4
   d4152:	2114      	movs	r1, #20
      }
   d4154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d4158:	f001 bd5b 	b.w	d5c12 <_ZdlPvj>
      }
   d415c:	bd38      	pop	{r3, r4, r5, pc}

000d415e <_ZN9USBSerial4lockEv.isra.0>:
	void lock()
   d415e:	b508      	push	{r3, lr}
		return os_mutex_recursive_t(system_internal(2, nullptr));
   d4160:	2100      	movs	r1, #0
   d4162:	2002      	movs	r0, #2
   d4164:	f000 ff56 	bl	d5014 <system_internal>
	}
   d4168:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		os_mutex_recursive_lock(get_mutex());
   d416c:	f000 be52 	b.w	d4e14 <os_mutex_recursive_lock>

000d4170 <_ZN6ThreadD1Ev>:
    ~Thread()
   d4170:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d4172:	6803      	ldr	r3, [r0, #0]
   d4174:	4604      	mov	r4, r0
        if (!isValid())
   d4176:	b19b      	cbz	r3, d41a0 <_ZN6ThreadD1Ev+0x30>
        return isValid() && os_thread_is_current(d_->handle);
   d4178:	6858      	ldr	r0, [r3, #4]
   d417a:	f000 fe0b 	bl	d4d94 <os_thread_is_current>
   d417e:	b978      	cbnz	r0, d41a0 <_ZN6ThreadD1Ev+0x30>
   d4180:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d4182:	7c5a      	ldrb	r2, [r3, #17]
   d4184:	b912      	cbnz	r2, d418c <_ZN6ThreadD1Ev+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d4186:	6858      	ldr	r0, [r3, #4]
   d4188:	f000 fe0c 	bl	d4da4 <os_thread_join>
        os_thread_cleanup(d_->handle);
   d418c:	6823      	ldr	r3, [r4, #0]
   d418e:	6858      	ldr	r0, [r3, #4]
   d4190:	f000 fe10 	bl	d4db4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4194:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4196:	2300      	movs	r3, #0
   d4198:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d419a:	b108      	cbz	r0, d41a0 <_ZN6ThreadD1Ev+0x30>
	  get_deleter()(std::move(__p));
   d419c:	f7ff ffc9 	bl	d4132 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0>
	if (__ptr != nullptr)
   d41a0:	6820      	ldr	r0, [r4, #0]
   d41a2:	b108      	cbz	r0, d41a8 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(std::move(__ptr));
   d41a4:	f7ff ffc5 	bl	d4132 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0>
    }
   d41a8:	4620      	mov	r0, r4
   d41aa:	bd10      	pop	{r4, pc}

000d41ac <_ZN5Print8printlnfEPKcz>:
        auto r = this->vprintf(false, format, args);
        va_end(args);
        return r;
    }

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41ac:	b40e      	push	{r1, r2, r3}
   d41ae:	b503      	push	{r0, r1, lr}
   d41b0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d41b2:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41b4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d41b8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d41ba:	f001 f8b8 	bl	d532e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d41be:	b002      	add	sp, #8
   d41c0:	f85d eb04 	ldr.w	lr, [sp], #4
   d41c4:	b003      	add	sp, #12
   d41c6:	4770      	bx	lr

000d41c8 <_ZN11SystemClass10ticksDelayEm>:
        return SYSTEM_US_TICKS;
    }

    static inline uint32_t ticks()
    {
        return SYSTEM_TICK_COUNTER;
   d41c8:	4b03      	ldr	r3, [pc, #12]	; (d41d8 <_ZN11SystemClass10ticksDelayEm+0x10>)
   d41ca:	6859      	ldr	r1, [r3, #4]
   d41cc:	685a      	ldr	r2, [r3, #4]
    }

    static inline void ticksDelay(uint32_t duration)
    {
        uint32_t start = ticks();
        while ((ticks()-start)<duration) {}
   d41ce:	1a52      	subs	r2, r2, r1
   d41d0:	4282      	cmp	r2, r0
   d41d2:	d3fb      	bcc.n	d41cc <_ZN11SystemClass10ticksDelayEm+0x4>
    }
   d41d4:	4770      	bx	lr
   d41d6:	bf00      	nop
   d41d8:	e0001000 	.word	0xe0001000

000d41dc <_Z17sendManchesterLOWv>:
  sendManchesterHIGH();
  sendManchesterLOW();
  sendManchesterHIGH();
}

void sendManchesterLOW() {
   d41dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d41de:	4d37      	ldr	r5, [pc, #220]	; (d42bc <_Z17sendManchesterLOWv+0xe0>)
   d41e0:	4c37      	ldr	r4, [pc, #220]	; (d42c0 <_Z17sendManchesterLOWv+0xe4>)
   d41e2:	782b      	ldrb	r3, [r5, #0]
   d41e4:	f3bf 8f5b 	dmb	ish
   d41e8:	f013 0f01 	tst.w	r3, #1
   d41ec:	d109      	bne.n	d4202 <_Z17sendManchesterLOWv+0x26>
   d41ee:	4628      	mov	r0, r5
   d41f0:	f7ff ff55 	bl	d409e <__cxa_guard_acquire>
   d41f4:	b128      	cbz	r0, d4202 <_Z17sendManchesterLOWv+0x26>
   d41f6:	f000 fd75 	bl	d4ce4 <HAL_Pin_Map>
   d41fa:	6020      	str	r0, [r4, #0]
   d41fc:	4628      	mov	r0, r5
   d41fe:	f7ff ff53 	bl	d40a8 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4202:	6823      	ldr	r3, [r4, #0]
   d4204:	f893 3020 	ldrb.w	r3, [r3, #32]
   d4208:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d420a:	782b      	ldrb	r3, [r5, #0]
   d420c:	f3bf 8f5b 	dmb	ish
   d4210:	07d9      	lsls	r1, r3, #31
   d4212:	d409      	bmi.n	d4228 <_Z17sendManchesterLOWv+0x4c>
   d4214:	4829      	ldr	r0, [pc, #164]	; (d42bc <_Z17sendManchesterLOWv+0xe0>)
   d4216:	f7ff ff42 	bl	d409e <__cxa_guard_acquire>
   d421a:	b128      	cbz	r0, d4228 <_Z17sendManchesterLOWv+0x4c>
   d421c:	f000 fd62 	bl	d4ce4 <HAL_Pin_Map>
   d4220:	6020      	str	r0, [r4, #0]
   d4222:	4826      	ldr	r0, [pc, #152]	; (d42bc <_Z17sendManchesterLOWv+0xe0>)
   d4224:	f7ff ff40 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4228:	6823      	ldr	r3, [r4, #0]
   d422a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d422e:	f003 031f 	and.w	r3, r3, #31
   d4232:	4333      	orrs	r3, r6
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4234:	a801      	add	r0, sp, #4
   d4236:	9301      	str	r3, [sp, #4]
   d4238:	f7ff ff3a 	bl	d40b0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d423c:	9a01      	ldr	r2, [sp, #4]
  //uint32_t ticks = System.ticks();
  pinResetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d423e:	4e21      	ldr	r6, [pc, #132]	; (d42c4 <_Z17sendManchesterLOWv+0xe8>)
   d4240:	2301      	movs	r3, #1
   d4242:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4244:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   d4248:	6830      	ldr	r0, [r6, #0]
   d424a:	f7ff ffbd 	bl	d41c8 <_ZN11SystemClass10ticksDelayEm>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d424e:	782b      	ldrb	r3, [r5, #0]
   d4250:	f3bf 8f5b 	dmb	ish
   d4254:	07da      	lsls	r2, r3, #31
   d4256:	d409      	bmi.n	d426c <_Z17sendManchesterLOWv+0x90>
   d4258:	4818      	ldr	r0, [pc, #96]	; (d42bc <_Z17sendManchesterLOWv+0xe0>)
   d425a:	f7ff ff20 	bl	d409e <__cxa_guard_acquire>
   d425e:	b128      	cbz	r0, d426c <_Z17sendManchesterLOWv+0x90>
   d4260:	f000 fd40 	bl	d4ce4 <HAL_Pin_Map>
   d4264:	6020      	str	r0, [r4, #0]
   d4266:	4815      	ldr	r0, [pc, #84]	; (d42bc <_Z17sendManchesterLOWv+0xe0>)
   d4268:	f7ff ff1e 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d426c:	6823      	ldr	r3, [r4, #0]
   d426e:	f893 3020 	ldrb.w	r3, [r3, #32]
   d4272:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4274:	782b      	ldrb	r3, [r5, #0]
   d4276:	f3bf 8f5b 	dmb	ish
   d427a:	07db      	lsls	r3, r3, #31
   d427c:	d409      	bmi.n	d4292 <_Z17sendManchesterLOWv+0xb6>
   d427e:	480f      	ldr	r0, [pc, #60]	; (d42bc <_Z17sendManchesterLOWv+0xe0>)
   d4280:	f7ff ff0d 	bl	d409e <__cxa_guard_acquire>
   d4284:	b128      	cbz	r0, d4292 <_Z17sendManchesterLOWv+0xb6>
   d4286:	f000 fd2d 	bl	d4ce4 <HAL_Pin_Map>
   d428a:	6020      	str	r0, [r4, #0]
   d428c:	480b      	ldr	r0, [pc, #44]	; (d42bc <_Z17sendManchesterLOWv+0xe0>)
   d428e:	f7ff ff0b 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4292:	6823      	ldr	r3, [r4, #0]
   d4294:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d4298:	f003 031f 	and.w	r3, r3, #31
   d429c:	433b      	orrs	r3, r7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d429e:	a801      	add	r0, sp, #4
   d42a0:	9301      	str	r3, [sp, #4]
   d42a2:	f7ff ff05 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d42a6:	9a01      	ldr	r2, [sp, #4]
   d42a8:	2301      	movs	r3, #1
   d42aa:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d42ac:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
  pinSetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d42b0:	6830      	ldr	r0, [r6, #0]
   d42b2:	f7ff ff89 	bl	d41c8 <_ZN11SystemClass10ticksDelayEm>
  /*ticks = System.ticks() - ticks;
  WITH_LOCK(Serial) {
    Serial.printlnf("Manchester Bit Time (ticks) : %d", ticks);
  }*/
}
   d42b6:	b003      	add	sp, #12
   d42b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42ba:	bf00      	nop
   d42bc:	2003e4e8 	.word	0x2003e4e8
   d42c0:	2003e4ec 	.word	0x2003e4ec
   d42c4:	2003e618 	.word	0x2003e618

000d42c8 <_Z18sendManchesterHIGHv>:

void sendManchesterHIGH() {
   d42c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42ca:	4d37      	ldr	r5, [pc, #220]	; (d43a8 <_Z18sendManchesterHIGHv+0xe0>)
   d42cc:	4c37      	ldr	r4, [pc, #220]	; (d43ac <_Z18sendManchesterHIGHv+0xe4>)
   d42ce:	782b      	ldrb	r3, [r5, #0]
   d42d0:	f3bf 8f5b 	dmb	ish
   d42d4:	f013 0f01 	tst.w	r3, #1
   d42d8:	d109      	bne.n	d42ee <_Z18sendManchesterHIGHv+0x26>
   d42da:	4628      	mov	r0, r5
   d42dc:	f7ff fedf 	bl	d409e <__cxa_guard_acquire>
   d42e0:	b128      	cbz	r0, d42ee <_Z18sendManchesterHIGHv+0x26>
   d42e2:	f000 fcff 	bl	d4ce4 <HAL_Pin_Map>
   d42e6:	6020      	str	r0, [r4, #0]
   d42e8:	4628      	mov	r0, r5
   d42ea:	f7ff fedd 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42ee:	6823      	ldr	r3, [r4, #0]
   d42f0:	f893 3020 	ldrb.w	r3, [r3, #32]
   d42f4:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42f6:	782b      	ldrb	r3, [r5, #0]
   d42f8:	f3bf 8f5b 	dmb	ish
   d42fc:	07d9      	lsls	r1, r3, #31
   d42fe:	d409      	bmi.n	d4314 <_Z18sendManchesterHIGHv+0x4c>
   d4300:	4829      	ldr	r0, [pc, #164]	; (d43a8 <_Z18sendManchesterHIGHv+0xe0>)
   d4302:	f7ff fecc 	bl	d409e <__cxa_guard_acquire>
   d4306:	b128      	cbz	r0, d4314 <_Z18sendManchesterHIGHv+0x4c>
   d4308:	f000 fcec 	bl	d4ce4 <HAL_Pin_Map>
   d430c:	6020      	str	r0, [r4, #0]
   d430e:	4826      	ldr	r0, [pc, #152]	; (d43a8 <_Z18sendManchesterHIGHv+0xe0>)
   d4310:	f7ff feca 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4314:	6823      	ldr	r3, [r4, #0]
   d4316:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d431a:	f003 031f 	and.w	r3, r3, #31
   d431e:	4333      	orrs	r3, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4320:	a801      	add	r0, sp, #4
   d4322:	9301      	str	r3, [sp, #4]
   d4324:	f7ff fec4 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4328:	9a01      	ldr	r2, [sp, #4]
  pinSetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d432a:	4e21      	ldr	r6, [pc, #132]	; (d43b0 <_Z18sendManchesterHIGHv+0xe8>)
   d432c:	2301      	movs	r3, #1
   d432e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   d4330:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
   d4334:	6830      	ldr	r0, [r6, #0]
   d4336:	f7ff ff47 	bl	d41c8 <_ZN11SystemClass10ticksDelayEm>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d433a:	782b      	ldrb	r3, [r5, #0]
   d433c:	f3bf 8f5b 	dmb	ish
   d4340:	07da      	lsls	r2, r3, #31
   d4342:	d409      	bmi.n	d4358 <_Z18sendManchesterHIGHv+0x90>
   d4344:	4818      	ldr	r0, [pc, #96]	; (d43a8 <_Z18sendManchesterHIGHv+0xe0>)
   d4346:	f7ff feaa 	bl	d409e <__cxa_guard_acquire>
   d434a:	b128      	cbz	r0, d4358 <_Z18sendManchesterHIGHv+0x90>
   d434c:	f000 fcca 	bl	d4ce4 <HAL_Pin_Map>
   d4350:	6020      	str	r0, [r4, #0]
   d4352:	4815      	ldr	r0, [pc, #84]	; (d43a8 <_Z18sendManchesterHIGHv+0xe0>)
   d4354:	f7ff fea8 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4358:	6823      	ldr	r3, [r4, #0]
   d435a:	f893 3020 	ldrb.w	r3, [r3, #32]
   d435e:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4360:	782b      	ldrb	r3, [r5, #0]
   d4362:	f3bf 8f5b 	dmb	ish
   d4366:	07db      	lsls	r3, r3, #31
   d4368:	d409      	bmi.n	d437e <_Z18sendManchesterHIGHv+0xb6>
   d436a:	480f      	ldr	r0, [pc, #60]	; (d43a8 <_Z18sendManchesterHIGHv+0xe0>)
   d436c:	f7ff fe97 	bl	d409e <__cxa_guard_acquire>
   d4370:	b128      	cbz	r0, d437e <_Z18sendManchesterHIGHv+0xb6>
   d4372:	f000 fcb7 	bl	d4ce4 <HAL_Pin_Map>
   d4376:	6020      	str	r0, [r4, #0]
   d4378:	480b      	ldr	r0, [pc, #44]	; (d43a8 <_Z18sendManchesterHIGHv+0xe0>)
   d437a:	f7ff fe95 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d437e:	6823      	ldr	r3, [r4, #0]
   d4380:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d4384:	f003 031f 	and.w	r3, r3, #31
   d4388:	433b      	orrs	r3, r7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d438a:	a801      	add	r0, sp, #4
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	f7ff fe8f 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4392:	9a01      	ldr	r2, [sp, #4]
   d4394:	2301      	movs	r3, #1
   d4396:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   d4398:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d439c:	6830      	ldr	r0, [r6, #0]
   d439e:	f7ff ff13 	bl	d41c8 <_ZN11SystemClass10ticksDelayEm>
}
   d43a2:	b003      	add	sp, #12
   d43a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d43a6:	bf00      	nop
   d43a8:	2003e4e8 	.word	0x2003e4e8
   d43ac:	2003e4ec 	.word	0x2003e4ec
   d43b0:	2003e618 	.word	0x2003e618

000d43b4 <_Z9preambulev>:
void preambule() {
   d43b4:	b508      	push	{r3, lr}
  sendManchesterLOW();
   d43b6:	f7ff ff11 	bl	d41dc <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d43ba:	f7ff ff85 	bl	d42c8 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d43be:	f7ff ff0d 	bl	d41dc <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d43c2:	f7ff ff81 	bl	d42c8 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d43c6:	f7ff ff09 	bl	d41dc <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d43ca:	f7ff ff7d 	bl	d42c8 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d43ce:	f7ff ff05 	bl	d41dc <_Z17sendManchesterLOWv>
}
   d43d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendManchesterHIGH();
   d43d6:	f7ff bf77 	b.w	d42c8 <_Z18sendManchesterHIGHv>

000d43da <_Z17sendManchesterBitb>:

void sendManchesterBit(bool value) {
  if (value) {
   d43da:	b108      	cbz	r0, d43e0 <_Z17sendManchesterBitb+0x6>
    sendManchesterHIGH();
   d43dc:	f7ff bf74 	b.w	d42c8 <_Z18sendManchesterHIGHv>
    return;
  }
  sendManchesterLOW();
   d43e0:	f7ff befc 	b.w	d41dc <_Z17sendManchesterLOWv>

000d43e4 <_Z9sendBytesPhh>:
void sendBytes(uint8_t* bytes, uint8_t length) {
   d43e4:	b570      	push	{r4, r5, r6, lr}
   d43e6:	4604      	mov	r4, r0
   d43e8:	1846      	adds	r6, r0, r1
  for (int i = 0; i < length; ++i) {
   d43ea:	42b4      	cmp	r4, r6
   d43ec:	d00b      	beq.n	d4406 <_Z9sendBytesPhh+0x22>
    for (int j = 0; j < 8; ++j) {
   d43ee:	2500      	movs	r5, #0
      sendManchesterBit(bytes[i] & (0b00000001 << j));
   d43f0:	7820      	ldrb	r0, [r4, #0]
   d43f2:	4128      	asrs	r0, r5
   d43f4:	f000 0001 	and.w	r0, r0, #1
    for (int j = 0; j < 8; ++j) {
   d43f8:	3501      	adds	r5, #1
      sendManchesterBit(bytes[i] & (0b00000001 << j));
   d43fa:	f7ff ffee 	bl	d43da <_Z17sendManchesterBitb>
    for (int j = 0; j < 8; ++j) {
   d43fe:	2d08      	cmp	r5, #8
   d4400:	d1f6      	bne.n	d43f0 <_Z9sendBytesPhh+0xc>
  for (int i = 0; i < length; ++i) {
   d4402:	3401      	adds	r4, #1
   d4404:	e7f1      	b.n	d43ea <_Z9sendBytesPhh+0x6>
}
   d4406:	bd70      	pop	{r4, r5, r6, pc}

000d4408 <_Z8sendByteh>:
void sendByte(uint8_t byte) {
   d4408:	b538      	push	{r3, r4, r5, lr}
   d440a:	4605      	mov	r5, r0
  for (int j = 0; j < 8; ++j) {
   d440c:	2400      	movs	r4, #0
      sendManchesterBit(byte & (0b00000001 << j));
   d440e:	fa45 f004 	asr.w	r0, r5, r4
   d4412:	f000 0001 	and.w	r0, r0, #1
  for (int j = 0; j < 8; ++j) {
   d4416:	3401      	adds	r4, #1
      sendManchesterBit(byte & (0b00000001 << j));
   d4418:	f7ff ffdf 	bl	d43da <_Z17sendManchesterBitb>
  for (int j = 0; j < 8; ++j) {
   d441c:	2c08      	cmp	r4, #8
   d441e:	d1f6      	bne.n	d440e <_Z8sendByteh+0x6>
}
   d4420:	bd38      	pop	{r3, r4, r5, pc}

000d4422 <_Z12sendDualBytet>:
void sendDualByte(uint16_t byte) {
   d4422:	b538      	push	{r3, r4, r5, lr}
   d4424:	4605      	mov	r5, r0
  for (int j = 0; j < 16; ++j) {
   d4426:	2400      	movs	r4, #0
      sendManchesterBit(byte & (0b0000000000000001 << j));
   d4428:	fa45 f004 	asr.w	r0, r5, r4
   d442c:	f000 0001 	and.w	r0, r0, #1
  for (int j = 0; j < 16; ++j) {
   d4430:	3401      	adds	r4, #1
      sendManchesterBit(byte & (0b0000000000000001 << j));
   d4432:	f7ff ffd2 	bl	d43da <_Z17sendManchesterBitb>
  for (int j = 0; j < 16; ++j) {
   d4436:	2c10      	cmp	r4, #16
   d4438:	d1f6      	bne.n	d4428 <_Z12sendDualBytet+0x6>
}
   d443a:	bd38      	pop	{r3, r4, r5, pc}

000d443c <_Z7sendAckt>:
void sendAck(uint16_t crc) {
   d443c:	b538      	push	{r3, r4, r5, lr}
  os_mutex_lock(transmitMutex);
   d443e:	4d0d      	ldr	r5, [pc, #52]	; (d4474 <_Z7sendAckt+0x38>)
void sendAck(uint16_t crc) {
   d4440:	4604      	mov	r4, r0
  os_mutex_lock(transmitMutex);
   d4442:	6828      	ldr	r0, [r5, #0]
   d4444:	f000 fcc6 	bl	d4dd4 <os_mutex_lock>
  preambule();
   d4448:	f7ff ffb4 	bl	d43b4 <_Z9preambulev>
  sendByte(0b01111110);
   d444c:	207e      	movs	r0, #126	; 0x7e
   d444e:	f7ff ffdb 	bl	d4408 <_Z8sendByteh>
  sendByte(0b00000001); //flags
   d4452:	2001      	movs	r0, #1
   d4454:	f7ff ffd8 	bl	d4408 <_Z8sendByteh>
  sendByte(0);          //length
   d4458:	2000      	movs	r0, #0
   d445a:	f7ff ffd5 	bl	d4408 <_Z8sendByteh>
  sendDualByte(crc);
   d445e:	4620      	mov	r0, r4
   d4460:	f7ff ffdf 	bl	d4422 <_Z12sendDualBytet>
  sendByte(0b01111110);
   d4464:	207e      	movs	r0, #126	; 0x7e
   d4466:	f7ff ffcf 	bl	d4408 <_Z8sendByteh>
  os_mutex_unlock(transmitMutex);
   d446a:	6828      	ldr	r0, [r5, #0]
}
   d446c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  os_mutex_unlock(transmitMutex);
   d4470:	f000 bcb8 	b.w	d4de4 <os_mutex_unlock>
   d4474:	2003e640 	.word	0x2003e640

000d4478 <setup>:

//Variables pour la gestion d'erreur
volatile uint32_t lastWaitingTick = 0;
volatile bool error = false;

void setup() {
   d4478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	Serial.begin(9600);
   d447a:	f001 f91b 	bl	d56b4 <_Z16_fetch_usbserialv>
   d447e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4482:	f001 f90b 	bl	d569c <_ZN9USBSerial5beginEl>
  pinMode(OUTPUT_PIN, OUTPUT_OPEN_DRAIN);
   d4486:	2105      	movs	r1, #5
   d4488:	2002      	movs	r0, #2
   d448a:	f001 fb6b 	bl	d5b64 <pinMode>
  pinMode(INPUT_PIN, INPUT_PULLUP);
  attachInterrupt(INPUT_PIN, interrupt, CHANGE);
   d448e:	2400      	movs	r4, #0
  pinMode(INPUT_PIN, INPUT_PULLUP);
   d4490:	2102      	movs	r1, #2
   d4492:	2004      	movs	r0, #4
   d4494:	f001 fb66 	bl	d5b64 <pinMode>
  attachInterrupt(INPUT_PIN, interrupt, CHANGE);
   d4498:	4920      	ldr	r1, [pc, #128]	; (d451c <setup+0xa4>)
   d449a:	9400      	str	r4, [sp, #0]
   d449c:	f04f 33ff 	mov.w	r3, #4294967295
   d44a0:	4622      	mov	r2, r4
   d44a2:	2004      	movs	r0, #4
   d44a4:	f001 f932 	bl	d570c <_Z15attachInterrupttPFvvE13InterruptModeah>
  os_mutex_create(&transmitMutex);
   d44a8:	481d      	ldr	r0, [pc, #116]	; (d4520 <setup+0xa8>)
   d44aa:	f000 fc8b 	bl	d4dc4 <os_mutex_create>
        : d_(new(std::nothrow) Data)
   d44ae:	491d      	ldr	r1, [pc, #116]	; (d4524 <setup+0xac>)
   d44b0:	2014      	movs	r0, #20
   d44b2:	f001 fbb0 	bl	d5c16 <_ZnwjRKSt9nothrow_t>
   d44b6:	b128      	cbz	r0, d44c4 <setup+0x4c>
            exited(false) {
   d44b8:	e9c0 4400 	strd	r4, r4, [r0]
   d44bc:	e9c0 4402 	strd	r4, r4, [r0, #8]
   d44c0:	7404      	strb	r4, [r0, #16]
   d44c2:	7444      	strb	r4, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d44c4:	9003      	str	r0, [sp, #12]
        if (!d_) {
   d44c6:	b1a8      	cbz	r0, d44f4 <setup+0x7c>
        d_->func = function;
   d44c8:	4b17      	ldr	r3, [pc, #92]	; (d4528 <setup+0xb0>)
   d44ca:	6083      	str	r3, [r0, #8]
        d_->func_param = function_param;
   d44cc:	2300      	movs	r3, #0
   d44ce:	60c3      	str	r3, [r0, #12]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d44d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d44d4:	e9cd 0300 	strd	r0, r3, [sp]
   d44d8:	4914      	ldr	r1, [pc, #80]	; (d452c <setup+0xb4>)
   d44da:	4b15      	ldr	r3, [pc, #84]	; (d4530 <setup+0xb8>)
   d44dc:	2202      	movs	r2, #2
   d44de:	3004      	adds	r0, #4
   d44e0:	f000 fc50 	bl	d4d84 <os_thread_create>
   d44e4:	b930      	cbnz	r0, d44f4 <setup+0x7c>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d44e6:	9b03      	ldr	r3, [sp, #12]
        while (!d_->started) {
   d44e8:	7c1b      	ldrb	r3, [r3, #16]
   d44ea:	b94b      	cbnz	r3, d4500 <setup+0x88>
            HAL_Delay_Milliseconds(1);
   d44ec:	2001      	movs	r0, #1
   d44ee:	f000 fc31 	bl	d4d54 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d44f2:	e7f8      	b.n	d44e6 <setup+0x6e>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d44f4:	9803      	ldr	r0, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d44f6:	2300      	movs	r3, #0
   d44f8:	9303      	str	r3, [sp, #12]
	if (__p != pointer())
   d44fa:	b108      	cbz	r0, d4500 <setup+0x88>
	  get_deleter()(std::move(__p));
   d44fc:	f7ff fe19 	bl	d4132 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0>
	_M_t._M_ptr() = pointer();
   d4500:	2300      	movs	r3, #0
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d4502:	9a03      	ldr	r2, [sp, #12]
	_M_t._M_ptr() = pointer();
   d4504:	9303      	str	r3, [sp, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4506:	4b0b      	ldr	r3, [pc, #44]	; (d4534 <setup+0xbc>)
   d4508:	6818      	ldr	r0, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
   d450a:	601a      	str	r2, [r3, #0]
	if (__p != pointer())
   d450c:	b108      	cbz	r0, d4512 <setup+0x9a>
	  get_deleter()(std::move(__p));
   d450e:	f7ff fe10 	bl	d4132 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0>
  sendingThread = Thread("sendingThread", sendingThreadFunction);
   d4512:	a803      	add	r0, sp, #12
   d4514:	f7ff fe2c 	bl	d4170 <_ZN6ThreadD1Ev>
}
   d4518:	b004      	add	sp, #16
   d451a:	bd10      	pop	{r4, pc}
   d451c:	000d4675 	.word	0x000d4675
   d4520:	2003e640 	.word	0x2003e640
   d4524:	000d6828 	.word	0x000d6828
   d4528:	000d4af5 	.word	0x000d4af5
   d452c:	000d65ec 	.word	0x000d65ec
   d4530:	000d40e1 	.word	0x000d40e1
   d4534:	2003e634 	.word	0x2003e634

000d4538 <_Z18registerHeaderDatab>:
  //uint32_t ticks = System.ticks() - interruptTick;
  //Serial.printlnf("Ticks : %d", ticks);
}

void registerHeaderData(bool data) {
  if (data)
   d4538:	4a06      	ldr	r2, [pc, #24]	; (d4554 <_Z18registerHeaderDatab+0x1c>)
   d453a:	b128      	cbz	r0, d4548 <_Z18registerHeaderDatab+0x10>
    header |= headerMask;
   d453c:	4906      	ldr	r1, [pc, #24]	; (d4558 <_Z18registerHeaderDatab+0x20>)
   d453e:	8810      	ldrh	r0, [r2, #0]
   d4540:	880b      	ldrh	r3, [r1, #0]
   d4542:	4303      	orrs	r3, r0
   d4544:	b29b      	uxth	r3, r3
   d4546:	800b      	strh	r3, [r1, #0]
  headerMask <<= 1;
   d4548:	8813      	ldrh	r3, [r2, #0]
   d454a:	b29b      	uxth	r3, r3
   d454c:	005b      	lsls	r3, r3, #1
   d454e:	b29b      	uxth	r3, r3
   d4550:	8013      	strh	r3, [r2, #0]
}
   d4552:	4770      	bx	lr
   d4554:	2003e474 	.word	0x2003e474
   d4558:	2003e602 	.word	0x2003e602

000d455c <_Z15registerMsgDatab>:

void registerMsgData(bool data) {
  if (data)
   d455c:	4a05      	ldr	r2, [pc, #20]	; (d4574 <_Z15registerMsgDatab+0x18>)
   d455e:	b120      	cbz	r0, d456a <_Z15registerMsgDatab+0xe>
    msgBuffer |= msgMask;
   d4560:	4905      	ldr	r1, [pc, #20]	; (d4578 <_Z15registerMsgDatab+0x1c>)
   d4562:	7810      	ldrb	r0, [r2, #0]
   d4564:	780b      	ldrb	r3, [r1, #0]
   d4566:	4303      	orrs	r3, r0
   d4568:	700b      	strb	r3, [r1, #0]
  msgMask <<= 1;
   d456a:	7813      	ldrb	r3, [r2, #0]
   d456c:	005b      	lsls	r3, r3, #1
   d456e:	b2db      	uxtb	r3, r3
   d4570:	7013      	strb	r3, [r2, #0]
}
   d4572:	4770      	bx	lr
   d4574:	2003e476 	.word	0x2003e476
   d4578:	2003e620 	.word	0x2003e620

000d457c <_Z15registerCRCDatab>:

void registerCRCData(bool data) {
  if (data)
   d457c:	4a06      	ldr	r2, [pc, #24]	; (d4598 <_Z15registerCRCDatab+0x1c>)
   d457e:	b128      	cbz	r0, d458c <_Z15registerCRCDatab+0x10>
    crcBuffer |= crcMask;
   d4580:	4906      	ldr	r1, [pc, #24]	; (d459c <_Z15registerCRCDatab+0x20>)
   d4582:	8810      	ldrh	r0, [r2, #0]
   d4584:	880b      	ldrh	r3, [r1, #0]
   d4586:	4303      	orrs	r3, r0
   d4588:	b29b      	uxth	r3, r3
   d458a:	800b      	strh	r3, [r1, #0]
  crcMask <<= 1;
   d458c:	8813      	ldrh	r3, [r2, #0]
   d458e:	b29b      	uxth	r3, r3
   d4590:	005b      	lsls	r3, r3, #1
   d4592:	b29b      	uxth	r3, r3
   d4594:	8013      	strh	r3, [r2, #0]
}
   d4596:	4770      	bx	lr
   d4598:	2003e470 	.word	0x2003e470
   d459c:	2003e5fe 	.word	0x2003e5fe

000d45a0 <_Z19registerEndByteDatab>:

void registerEndByteData(bool data) {
  if (data)
   d45a0:	4a05      	ldr	r2, [pc, #20]	; (d45b8 <_Z19registerEndByteDatab+0x18>)
   d45a2:	b120      	cbz	r0, d45ae <_Z19registerEndByteDatab+0xe>
    endByteBuffer |= endByteMask;
   d45a4:	4905      	ldr	r1, [pc, #20]	; (d45bc <_Z19registerEndByteDatab+0x1c>)
   d45a6:	7810      	ldrb	r0, [r2, #0]
   d45a8:	780b      	ldrb	r3, [r1, #0]
   d45aa:	4303      	orrs	r3, r0
   d45ac:	700b      	strb	r3, [r1, #0]
  endByteMask <<= 1;
   d45ae:	7813      	ldrb	r3, [r2, #0]
   d45b0:	005b      	lsls	r3, r3, #1
   d45b2:	b2db      	uxtb	r3, r3
   d45b4:	7013      	strb	r3, [r2, #0]
}
   d45b6:	4770      	bx	lr
   d45b8:	2003e472 	.word	0x2003e472
   d45bc:	2003e600 	.word	0x2003e600

000d45c0 <_Z21registerStartByteDatab>:

void registerStartByteData(bool data) {
  if (data)
   d45c0:	4a05      	ldr	r2, [pc, #20]	; (d45d8 <_Z21registerStartByteDatab+0x18>)
   d45c2:	b120      	cbz	r0, d45ce <_Z21registerStartByteDatab+0xe>
    startByteBuffer |= startByteMask;
   d45c4:	4905      	ldr	r1, [pc, #20]	; (d45dc <_Z21registerStartByteDatab+0x1c>)
   d45c6:	7810      	ldrb	r0, [r2, #0]
   d45c8:	780b      	ldrb	r3, [r1, #0]
   d45ca:	4303      	orrs	r3, r0
   d45cc:	700b      	strb	r3, [r1, #0]
  startByteMask <<= 1;
   d45ce:	7813      	ldrb	r3, [r2, #0]
   d45d0:	005b      	lsls	r3, r3, #1
   d45d2:	b2db      	uxtb	r3, r3
   d45d4:	7013      	strb	r3, [r2, #0]
}
   d45d6:	4770      	bx	lr
   d45d8:	2003e477 	.word	0x2003e477
   d45dc:	2003e638 	.word	0x2003e638

000d45e0 <_Z10triggErrorv>:
    ackBuffer |= ackMask;
  ackMask <<= 1;
}


void triggError() {
   d45e0:	b508      	push	{r3, lr}
  noInterrupts();
   d45e2:	f001 f8bd 	bl	d5760 <_Z12noInterruptsv>
  error = true;
   d45e6:	4b05      	ldr	r3, [pc, #20]	; (d45fc <_Z10triggErrorv+0x1c>)
   d45e8:	2201      	movs	r2, #1
   d45ea:	701a      	strb	r2, [r3, #0]
  Serial.println("ERROR TRIGGED");
   d45ec:	f001 f862 	bl	d56b4 <_Z16_fetch_usbserialv>
}
   d45f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("ERROR TRIGGED");
   d45f4:	4902      	ldr	r1, [pc, #8]	; (d4600 <_Z10triggErrorv+0x20>)
   d45f6:	f000 be72 	b.w	d52de <_ZN5Print7printlnEPKc>
   d45fa:	bf00      	nop
   d45fc:	2003e601 	.word	0x2003e601
   d4600:	000d65fa 	.word	0x000d65fa

000d4604 <_Z8resetMEFv>:

void resetMEF() {
  state = WAITING;
   d4604:	4a0e      	ldr	r2, [pc, #56]	; (d4640 <_Z8resetMEFv+0x3c>)
  byteCount = 0;
  preambuleStateTimes = 0;

  headerMask = 0b0000000000000001;
   d4606:	490f      	ldr	r1, [pc, #60]	; (d4644 <_Z8resetMEFv+0x40>)
  state = WAITING;
   d4608:	2300      	movs	r3, #0
   d460a:	6013      	str	r3, [r2, #0]
  byteCount = 0;
   d460c:	4a0e      	ldr	r2, [pc, #56]	; (d4648 <_Z8resetMEFv+0x44>)
   d460e:	7013      	strb	r3, [r2, #0]
  preambuleStateTimes = 0;
   d4610:	4a0e      	ldr	r2, [pc, #56]	; (d464c <_Z8resetMEFv+0x48>)
   d4612:	6013      	str	r3, [r2, #0]
  headerMask = 0b0000000000000001;
   d4614:	2201      	movs	r2, #1
   d4616:	800a      	strh	r2, [r1, #0]
  header = 0b0000000000000000;
   d4618:	490d      	ldr	r1, [pc, #52]	; (d4650 <_Z8resetMEFv+0x4c>)
   d461a:	800b      	strh	r3, [r1, #0]

  msgMask = 0b00000001;
   d461c:	490d      	ldr	r1, [pc, #52]	; (d4654 <_Z8resetMEFv+0x50>)
   d461e:	700a      	strb	r2, [r1, #0]
  msgBuffer = 0b00000000;
   d4620:	490d      	ldr	r1, [pc, #52]	; (d4658 <_Z8resetMEFv+0x54>)
   d4622:	700b      	strb	r3, [r1, #0]

  crcMask = 0b0000000000000001;
   d4624:	490d      	ldr	r1, [pc, #52]	; (d465c <_Z8resetMEFv+0x58>)
   d4626:	800a      	strh	r2, [r1, #0]
  crcBuffer = 0b0000000000000000;
   d4628:	490d      	ldr	r1, [pc, #52]	; (d4660 <_Z8resetMEFv+0x5c>)
   d462a:	800b      	strh	r3, [r1, #0]

  endByteMask = 0b00000001;
   d462c:	490d      	ldr	r1, [pc, #52]	; (d4664 <_Z8resetMEFv+0x60>)
   d462e:	700a      	strb	r2, [r1, #0]
  endByteBuffer = 0b00000000;
   d4630:	490d      	ldr	r1, [pc, #52]	; (d4668 <_Z8resetMEFv+0x64>)
   d4632:	700b      	strb	r3, [r1, #0]

  startByteMask = 0b00000001;
   d4634:	490d      	ldr	r1, [pc, #52]	; (d466c <_Z8resetMEFv+0x68>)
   d4636:	700a      	strb	r2, [r1, #0]
  startByteBuffer = 0b00000000;
   d4638:	4a0d      	ldr	r2, [pc, #52]	; (d4670 <_Z8resetMEFv+0x6c>)
   d463a:	7013      	strb	r3, [r2, #0]
}
   d463c:	4770      	bx	lr
   d463e:	bf00      	nop
   d4640:	2003e63c 	.word	0x2003e63c
   d4644:	2003e474 	.word	0x2003e474
   d4648:	2003e5fb 	.word	0x2003e5fb
   d464c:	2003e62c 	.word	0x2003e62c
   d4650:	2003e602 	.word	0x2003e602
   d4654:	2003e476 	.word	0x2003e476
   d4658:	2003e620 	.word	0x2003e620
   d465c:	2003e470 	.word	0x2003e470
   d4660:	2003e5fe 	.word	0x2003e5fe
   d4664:	2003e472 	.word	0x2003e472
   d4668:	2003e600 	.word	0x2003e600
   d466c:	2003e477 	.word	0x2003e477
   d4670:	2003e638 	.word	0x2003e638

000d4674 <_Z9interruptv>:
void interrupt() {
   d4674:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
        return SYSTEM_TICK_COUNTER;
   d4678:	4b8d      	ldr	r3, [pc, #564]	; (d48b0 <_Z9interruptv+0x23c>)
  interruptTick = System.ticks();
   d467a:	4c8e      	ldr	r4, [pc, #568]	; (d48b4 <_Z9interruptv+0x240>)
   d467c:	685b      	ldr	r3, [r3, #4]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d467e:	4e8e      	ldr	r6, [pc, #568]	; (d48b8 <_Z9interruptv+0x244>)
   d4680:	6023      	str	r3, [r4, #0]
   d4682:	7833      	ldrb	r3, [r6, #0]
   d4684:	4f8d      	ldr	r7, [pc, #564]	; (d48bc <_Z9interruptv+0x248>)
   d4686:	f3bf 8f5b 	dmb	ish
   d468a:	f013 0f01 	tst.w	r3, #1
   d468e:	d109      	bne.n	d46a4 <_Z9interruptv+0x30>
   d4690:	4630      	mov	r0, r6
   d4692:	f7ff fd04 	bl	d409e <__cxa_guard_acquire>
   d4696:	b128      	cbz	r0, d46a4 <_Z9interruptv+0x30>
   d4698:	f000 fb24 	bl	d4ce4 <HAL_Pin_Map>
   d469c:	6038      	str	r0, [r7, #0]
   d469e:	4630      	mov	r0, r6
   d46a0:	f7ff fd02 	bl	d40a8 <__cxa_guard_release>
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46a4:	683b      	ldr	r3, [r7, #0]
   d46a6:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46aa:	7833      	ldrb	r3, [r6, #0]
   d46ac:	f3bf 8f5b 	dmb	ish
   d46b0:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46b2:	ea4f 1845 	mov.w	r8, r5, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d46b6:	d409      	bmi.n	d46cc <_Z9interruptv+0x58>
   d46b8:	487f      	ldr	r0, [pc, #508]	; (d48b8 <_Z9interruptv+0x244>)
   d46ba:	f7ff fcf0 	bl	d409e <__cxa_guard_acquire>
   d46be:	b128      	cbz	r0, d46cc <_Z9interruptv+0x58>
   d46c0:	f000 fb10 	bl	d4ce4 <HAL_Pin_Map>
   d46c4:	6038      	str	r0, [r7, #0]
   d46c6:	487c      	ldr	r0, [pc, #496]	; (d48b8 <_Z9interruptv+0x244>)
   d46c8:	f7ff fcee 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d46cc:	683b      	ldr	r3, [r7, #0]
  inputPinValue = pinReadFast(INPUT_PIN);
   d46ce:	4e7c      	ldr	r6, [pc, #496]	; (d48c0 <_Z9interruptv+0x24c>)
   d46d0:	f893 5041 	ldrb.w	r5, [r3, #65]	; 0x41
   d46d4:	f005 051f 	and.w	r5, r5, #31
   d46d8:	ea45 0508 	orr.w	r5, r5, r8
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d46dc:	a801      	add	r0, sp, #4
   d46de:	9501      	str	r5, [sp, #4]
   d46e0:	f7ff fce6 	bl	d40b0 <nrf_gpio_pin_port_decode>
    return p_reg->IN;
   d46e4:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
    return nrf_gpio_pin_read(nrf_pin);
   d46e8:	9501      	str	r5, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d46ea:	a801      	add	r0, sp, #4
   d46ec:	f7ff fce0 	bl	d40b0 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d46f0:	9a01      	ldr	r2, [sp, #4]
    return p_reg->IN;
   d46f2:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510
  switch (state) {
   d46f6:	4d73      	ldr	r5, [pc, #460]	; (d48c4 <_Z9interruptv+0x250>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d46f8:	40d3      	lsrs	r3, r2
  inputPinValue = pinReadFast(INPUT_PIN);
   d46fa:	f003 0301 	and.w	r3, r3, #1
   d46fe:	7033      	strb	r3, [r6, #0]
  switch (state) {
   d4700:	682b      	ldr	r3, [r5, #0]
   d4702:	2b06      	cmp	r3, #6
   d4704:	d82a      	bhi.n	d475c <_Z9interruptv+0xe8>
   d4706:	e8df f013 	tbh	[pc, r3, lsl #1]
   d470a:	0007      	.short	0x0007
   d470c:	002c000f 	.word	0x002c000f
   d4710:	0093005a 	.word	0x0093005a
   d4714:	01370101 	.word	0x01370101
    lastWaitingTick = interruptTick;
   d4718:	4b6b      	ldr	r3, [pc, #428]	; (d48c8 <_Z9interruptv+0x254>)
   d471a:	6822      	ldr	r2, [r4, #0]
   d471c:	601a      	str	r2, [r3, #0]
    if(inputPinValue)
   d471e:	7833      	ldrb	r3, [r6, #0]
   d4720:	b9e3      	cbnz	r3, d475c <_Z9interruptv+0xe8>
    state = PREAMBULE;
   d4722:	2301      	movs	r3, #1
        state = HEADER;
   d4724:	602b      	str	r3, [r5, #0]
   d4726:	e019      	b.n	d475c <_Z9interruptv+0xe8>
    if(!inputPinValue) {
   d4728:	7833      	ldrb	r3, [r6, #0]
   d472a:	b93b      	cbnz	r3, d473c <_Z9interruptv+0xc8>
      period = interruptTick - periodStart;
   d472c:	4a67      	ldr	r2, [pc, #412]	; (d48cc <_Z9interruptv+0x258>)
   d472e:	6823      	ldr	r3, [r4, #0]
   d4730:	6811      	ldr	r1, [r2, #0]
   d4732:	1a5b      	subs	r3, r3, r1
   d4734:	4966      	ldr	r1, [pc, #408]	; (d48d0 <_Z9interruptv+0x25c>)
   d4736:	600b      	str	r3, [r1, #0]
      periodStart = interruptTick;
   d4738:	6823      	ldr	r3, [r4, #0]
   d473a:	6013      	str	r3, [r2, #0]
    if (++preambuleStateTimes >= 8) {
   d473c:	4a65      	ldr	r2, [pc, #404]	; (d48d4 <_Z9interruptv+0x260>)
   d473e:	6813      	ldr	r3, [r2, #0]
   d4740:	3301      	adds	r3, #1
   d4742:	2b07      	cmp	r3, #7
   d4744:	6013      	str	r3, [r2, #0]
   d4746:	d909      	bls.n	d475c <_Z9interruptv+0xe8>
      state = START;
   d4748:	2302      	movs	r3, #2
   d474a:	602b      	str	r3, [r5, #0]
      manchesterTicksReceiver = period / 4;
   d474c:	4b60      	ldr	r3, [pc, #384]	; (d48d0 <_Z9interruptv+0x25c>)
   d474e:	4a62      	ldr	r2, [pc, #392]	; (d48d8 <_Z9interruptv+0x264>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	089b      	lsrs	r3, r3, #2
   d4754:	6013      	str	r3, [r2, #0]
      lastStateChange = interruptTick;
   d4756:	4b61      	ldr	r3, [pc, #388]	; (d48dc <_Z9interruptv+0x268>)
   d4758:	6822      	ldr	r2, [r4, #0]
   d475a:	601a      	str	r2, [r3, #0]
}
   d475c:	b002      	add	sp, #8
   d475e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d4762:	4f5e      	ldr	r7, [pc, #376]	; (d48dc <_Z9interruptv+0x268>)
   d4764:	6820      	ldr	r0, [r4, #0]
   d4766:	683b      	ldr	r3, [r7, #0]
   d4768:	4a5b      	ldr	r2, [pc, #364]	; (d48d8 <_Z9interruptv+0x264>)
   d476a:	1ac0      	subs	r0, r0, r3
   d476c:	f8d2 a000 	ldr.w	sl, [r2]
   d4770:	f001 fb9a 	bl	d5ea8 <__aeabi_ui2d>
   d4774:	4680      	mov	r8, r0
   d4776:	4650      	mov	r0, sl
   d4778:	4689      	mov	r9, r1
   d477a:	f001 fb95 	bl	d5ea8 <__aeabi_ui2d>
   d477e:	4b58      	ldr	r3, [pc, #352]	; (d48e0 <_Z9interruptv+0x26c>)
   d4780:	2200      	movs	r2, #0
   d4782:	f001 fc0b 	bl	d5f9c <__aeabi_dmul>
   d4786:	4602      	mov	r2, r0
   d4788:	460b      	mov	r3, r1
   d478a:	4640      	mov	r0, r8
   d478c:	4649      	mov	r1, r9
   d478e:	f001 fe77 	bl	d6480 <__aeabi_dcmplt>
   d4792:	2800      	cmp	r0, #0
   d4794:	d1e2      	bne.n	d475c <_Z9interruptv+0xe8>
      lastStateChange = interruptTick;
   d4796:	6823      	ldr	r3, [r4, #0]
   d4798:	603b      	str	r3, [r7, #0]
      registerStartByteData(!inputPinValue);
   d479a:	7830      	ldrb	r0, [r6, #0]
   d479c:	f080 0001 	eor.w	r0, r0, #1
   d47a0:	f7ff ff0e 	bl	d45c0 <_Z21registerStartByteDatab>
      if (!startByteMask) {
   d47a4:	4b4f      	ldr	r3, [pc, #316]	; (d48e4 <_Z9interruptv+0x270>)
   d47a6:	781b      	ldrb	r3, [r3, #0]
   d47a8:	2b00      	cmp	r3, #0
   d47aa:	d1d7      	bne.n	d475c <_Z9interruptv+0xe8>
        if(startByteBuffer != 0b01111110) {
   d47ac:	4b4e      	ldr	r3, [pc, #312]	; (d48e8 <_Z9interruptv+0x274>)
   d47ae:	781b      	ldrb	r3, [r3, #0]
   d47b0:	2b7e      	cmp	r3, #126	; 0x7e
   d47b2:	d002      	beq.n	d47ba <_Z9interruptv+0x146>
          triggError();
   d47b4:	f7ff ff14 	bl	d45e0 <_Z10triggErrorv>
          break;
   d47b8:	e7d0      	b.n	d475c <_Z9interruptv+0xe8>
        state = HEADER;
   d47ba:	2303      	movs	r3, #3
   d47bc:	e7b2      	b.n	d4724 <_Z9interruptv+0xb0>
    if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d47be:	4f47      	ldr	r7, [pc, #284]	; (d48dc <_Z9interruptv+0x268>)
   d47c0:	6820      	ldr	r0, [r4, #0]
   d47c2:	683b      	ldr	r3, [r7, #0]
   d47c4:	4a44      	ldr	r2, [pc, #272]	; (d48d8 <_Z9interruptv+0x264>)
   d47c6:	1ac0      	subs	r0, r0, r3
   d47c8:	f8d2 a000 	ldr.w	sl, [r2]
   d47cc:	f001 fb6c 	bl	d5ea8 <__aeabi_ui2d>
   d47d0:	4680      	mov	r8, r0
   d47d2:	4650      	mov	r0, sl
   d47d4:	4689      	mov	r9, r1
   d47d6:	f001 fb67 	bl	d5ea8 <__aeabi_ui2d>
   d47da:	4b41      	ldr	r3, [pc, #260]	; (d48e0 <_Z9interruptv+0x26c>)
   d47dc:	2200      	movs	r2, #0
   d47de:	f001 fbdd 	bl	d5f9c <__aeabi_dmul>
   d47e2:	4602      	mov	r2, r0
   d47e4:	460b      	mov	r3, r1
   d47e6:	4640      	mov	r0, r8
   d47e8:	4649      	mov	r1, r9
   d47ea:	f001 fe49 	bl	d6480 <__aeabi_dcmplt>
   d47ee:	2800      	cmp	r0, #0
   d47f0:	d1b4      	bne.n	d475c <_Z9interruptv+0xe8>
    lastStateChange = interruptTick;
   d47f2:	6823      	ldr	r3, [r4, #0]
   d47f4:	603b      	str	r3, [r7, #0]
    registerHeaderData(!inputPinValue);
   d47f6:	7830      	ldrb	r0, [r6, #0]
   d47f8:	f080 0001 	eor.w	r0, r0, #1
   d47fc:	f7ff fe9c 	bl	d4538 <_Z18registerHeaderDatab>
    if (!headerMask) {
   d4800:	4b3a      	ldr	r3, [pc, #232]	; (d48ec <_Z9interruptv+0x278>)
   d4802:	881b      	ldrh	r3, [r3, #0]
   d4804:	b29b      	uxth	r3, r3
   d4806:	2b00      	cmp	r3, #0
   d4808:	d1a8      	bne.n	d475c <_Z9interruptv+0xe8>
      if (header & 0b0000000000000001) {
   d480a:	4b39      	ldr	r3, [pc, #228]	; (d48f0 <_Z9interruptv+0x27c>)
   d480c:	4939      	ldr	r1, [pc, #228]	; (d48f4 <_Z9interruptv+0x280>)
   d480e:	881a      	ldrh	r2, [r3, #0]
   d4810:	f012 0201 	ands.w	r2, r2, #1
        isAck = true;
   d4814:	bf1b      	ittet	ne
   d4816:	2201      	movne	r2, #1
   d4818:	700a      	strbne	r2, [r1, #0]
        isAck = false;
   d481a:	700a      	strbeq	r2, [r1, #0]
        state = CRC;
   d481c:	2205      	movne	r2, #5
        state = MESSAGE;
   d481e:	bf08      	it	eq
   d4820:	2204      	moveq	r2, #4
   d4822:	602a      	str	r2, [r5, #0]
      msgLength = (header & 0b1111111100000000) >> 8;
   d4824:	881b      	ldrh	r3, [r3, #0]
   d4826:	4a34      	ldr	r2, [pc, #208]	; (d48f8 <_Z9interruptv+0x284>)
   d4828:	f3c3 2307 	ubfx	r3, r3, #8, #8
   d482c:	7013      	strb	r3, [r2, #0]
   d482e:	e795      	b.n	d475c <_Z9interruptv+0xe8>
    if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d4830:	4f2a      	ldr	r7, [pc, #168]	; (d48dc <_Z9interruptv+0x268>)
   d4832:	6820      	ldr	r0, [r4, #0]
   d4834:	683b      	ldr	r3, [r7, #0]
   d4836:	4a28      	ldr	r2, [pc, #160]	; (d48d8 <_Z9interruptv+0x264>)
   d4838:	1ac0      	subs	r0, r0, r3
   d483a:	f8d2 a000 	ldr.w	sl, [r2]
   d483e:	f001 fb33 	bl	d5ea8 <__aeabi_ui2d>
   d4842:	4680      	mov	r8, r0
   d4844:	4650      	mov	r0, sl
   d4846:	4689      	mov	r9, r1
   d4848:	f001 fb2e 	bl	d5ea8 <__aeabi_ui2d>
   d484c:	4b24      	ldr	r3, [pc, #144]	; (d48e0 <_Z9interruptv+0x26c>)
   d484e:	2200      	movs	r2, #0
   d4850:	f001 fba4 	bl	d5f9c <__aeabi_dmul>
   d4854:	4602      	mov	r2, r0
   d4856:	460b      	mov	r3, r1
   d4858:	4640      	mov	r0, r8
   d485a:	4649      	mov	r1, r9
   d485c:	f001 fe10 	bl	d6480 <__aeabi_dcmplt>
   d4860:	2800      	cmp	r0, #0
   d4862:	f47f af7b 	bne.w	d475c <_Z9interruptv+0xe8>
    lastStateChange = interruptTick;
   d4866:	6823      	ldr	r3, [r4, #0]
   d4868:	603b      	str	r3, [r7, #0]
    registerMsgData(!inputPinValue);
   d486a:	7830      	ldrb	r0, [r6, #0]
   d486c:	f080 0001 	eor.w	r0, r0, #1
   d4870:	f7ff fe74 	bl	d455c <_Z15registerMsgDatab>
    if (!msgMask) {
   d4874:	4921      	ldr	r1, [pc, #132]	; (d48fc <_Z9interruptv+0x288>)
   d4876:	780b      	ldrb	r3, [r1, #0]
   d4878:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   d487c:	2b00      	cmp	r3, #0
   d487e:	f47f af6d 	bne.w	d475c <_Z9interruptv+0xe8>
      byteBuffer[byteCount++] = msgBuffer;
   d4882:	4a1f      	ldr	r2, [pc, #124]	; (d4900 <_Z9interruptv+0x28c>)
   d4884:	481f      	ldr	r0, [pc, #124]	; (d4904 <_Z9interruptv+0x290>)
   d4886:	7813      	ldrb	r3, [r2, #0]
   d4888:	4f1f      	ldr	r7, [pc, #124]	; (d4908 <_Z9interruptv+0x294>)
   d488a:	b2de      	uxtb	r6, r3
   d488c:	3301      	adds	r3, #1
   d488e:	b2db      	uxtb	r3, r3
   d4890:	7013      	strb	r3, [r2, #0]
   d4892:	7803      	ldrb	r3, [r0, #0]
   d4894:	b2db      	uxtb	r3, r3
   d4896:	55bb      	strb	r3, [r7, r6]
      msgMask = 0b00000001;
   d4898:	2301      	movs	r3, #1
      msgBuffer = 0b00000000;
   d489a:	7004      	strb	r4, [r0, #0]
      msgMask = 0b00000001;
   d489c:	700b      	strb	r3, [r1, #0]
      if (byteCount == msgLength) {
   d489e:	4b16      	ldr	r3, [pc, #88]	; (d48f8 <_Z9interruptv+0x284>)
   d48a0:	7812      	ldrb	r2, [r2, #0]
   d48a2:	781b      	ldrb	r3, [r3, #0]
   d48a4:	429a      	cmp	r2, r3
   d48a6:	f47f af59 	bne.w	d475c <_Z9interruptv+0xe8>
        state = CRC;
   d48aa:	2305      	movs	r3, #5
   d48ac:	e73a      	b.n	d4724 <_Z9interruptv+0xb0>
   d48ae:	bf00      	nop
   d48b0:	e0001000 	.word	0xe0001000
   d48b4:	2003e608 	.word	0x2003e608
   d48b8:	2003e4e8 	.word	0x2003e4e8
   d48bc:	2003e4ec 	.word	0x2003e4ec
   d48c0:	2003e604 	.word	0x2003e604
   d48c4:	2003e63c 	.word	0x2003e63c
   d48c8:	2003e614 	.word	0x2003e614
   d48cc:	2003e628 	.word	0x2003e628
   d48d0:	2003e624 	.word	0x2003e624
   d48d4:	2003e62c 	.word	0x2003e62c
   d48d8:	2003e61c 	.word	0x2003e61c
   d48dc:	2003e610 	.word	0x2003e610
   d48e0:	3ff80000 	.word	0x3ff80000
   d48e4:	2003e477 	.word	0x2003e477
   d48e8:	2003e638 	.word	0x2003e638
   d48ec:	2003e474 	.word	0x2003e474
   d48f0:	2003e602 	.word	0x2003e602
   d48f4:	2003e60c 	.word	0x2003e60c
   d48f8:	2003e621 	.word	0x2003e621
   d48fc:	2003e476 	.word	0x2003e476
   d4900:	2003e5fb 	.word	0x2003e5fb
   d4904:	2003e620 	.word	0x2003e620
   d4908:	2003e4fc 	.word	0x2003e4fc
      if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d490c:	4f36      	ldr	r7, [pc, #216]	; (d49e8 <_Z9interruptv+0x374>)
   d490e:	6820      	ldr	r0, [r4, #0]
   d4910:	683b      	ldr	r3, [r7, #0]
   d4912:	4a36      	ldr	r2, [pc, #216]	; (d49ec <_Z9interruptv+0x378>)
   d4914:	1ac0      	subs	r0, r0, r3
   d4916:	f8d2 a000 	ldr.w	sl, [r2]
   d491a:	f001 fac5 	bl	d5ea8 <__aeabi_ui2d>
   d491e:	4680      	mov	r8, r0
   d4920:	4650      	mov	r0, sl
   d4922:	4689      	mov	r9, r1
   d4924:	f001 fac0 	bl	d5ea8 <__aeabi_ui2d>
   d4928:	4b31      	ldr	r3, [pc, #196]	; (d49f0 <_Z9interruptv+0x37c>)
   d492a:	2200      	movs	r2, #0
   d492c:	f001 fb36 	bl	d5f9c <__aeabi_dmul>
   d4930:	4602      	mov	r2, r0
   d4932:	460b      	mov	r3, r1
   d4934:	4640      	mov	r0, r8
   d4936:	4649      	mov	r1, r9
   d4938:	f001 fda2 	bl	d6480 <__aeabi_dcmplt>
   d493c:	2800      	cmp	r0, #0
   d493e:	f47f af0d 	bne.w	d475c <_Z9interruptv+0xe8>
      lastStateChange = interruptTick;
   d4942:	6823      	ldr	r3, [r4, #0]
   d4944:	603b      	str	r3, [r7, #0]
      registerCRCData(!inputPinValue);
   d4946:	7830      	ldrb	r0, [r6, #0]
   d4948:	f080 0001 	eor.w	r0, r0, #1
   d494c:	f7ff fe16 	bl	d457c <_Z15registerCRCDatab>
      if (!crcMask) {
   d4950:	4b28      	ldr	r3, [pc, #160]	; (d49f4 <_Z9interruptv+0x380>)
   d4952:	881b      	ldrh	r3, [r3, #0]
   d4954:	b29b      	uxth	r3, r3
   d4956:	2b00      	cmp	r3, #0
   d4958:	f47f af00 	bne.w	d475c <_Z9interruptv+0xe8>
        if(isAck)
   d495c:	4b26      	ldr	r3, [pc, #152]	; (d49f8 <_Z9interruptv+0x384>)
   d495e:	4a27      	ldr	r2, [pc, #156]	; (d49fc <_Z9interruptv+0x388>)
   d4960:	781b      	ldrb	r3, [r3, #0]
   d4962:	b11b      	cbz	r3, d496c <_Z9interruptv+0x2f8>
          crcAck = crcBuffer;
   d4964:	8813      	ldrh	r3, [r2, #0]
   d4966:	4926      	ldr	r1, [pc, #152]	; (d4a00 <_Z9interruptv+0x38c>)
   d4968:	b29b      	uxth	r3, r3
   d496a:	800b      	strh	r3, [r1, #0]
        receivedCrc = crcBuffer;
   d496c:	8813      	ldrh	r3, [r2, #0]
   d496e:	4a25      	ldr	r2, [pc, #148]	; (d4a04 <_Z9interruptv+0x390>)
   d4970:	b29b      	uxth	r3, r3
   d4972:	8013      	strh	r3, [r2, #0]
        state = END;
   d4974:	2306      	movs	r3, #6
   d4976:	e6d5      	b.n	d4724 <_Z9interruptv+0xb0>
      if ((interruptTick - lastStateChange) < (manchesterTicksReceiver * 1.5))
   d4978:	4f1b      	ldr	r7, [pc, #108]	; (d49e8 <_Z9interruptv+0x374>)
   d497a:	6820      	ldr	r0, [r4, #0]
   d497c:	683b      	ldr	r3, [r7, #0]
   d497e:	4a1b      	ldr	r2, [pc, #108]	; (d49ec <_Z9interruptv+0x378>)
   d4980:	1ac0      	subs	r0, r0, r3
   d4982:	f8d2 a000 	ldr.w	sl, [r2]
   d4986:	f001 fa8f 	bl	d5ea8 <__aeabi_ui2d>
   d498a:	4680      	mov	r8, r0
   d498c:	4650      	mov	r0, sl
   d498e:	4689      	mov	r9, r1
   d4990:	f001 fa8a 	bl	d5ea8 <__aeabi_ui2d>
   d4994:	4b16      	ldr	r3, [pc, #88]	; (d49f0 <_Z9interruptv+0x37c>)
   d4996:	2200      	movs	r2, #0
   d4998:	f001 fb00 	bl	d5f9c <__aeabi_dmul>
   d499c:	4602      	mov	r2, r0
   d499e:	460b      	mov	r3, r1
   d49a0:	4640      	mov	r0, r8
   d49a2:	4649      	mov	r1, r9
   d49a4:	f001 fd6c 	bl	d6480 <__aeabi_dcmplt>
   d49a8:	2800      	cmp	r0, #0
   d49aa:	f47f aed7 	bne.w	d475c <_Z9interruptv+0xe8>
      lastStateChange = interruptTick;
   d49ae:	6823      	ldr	r3, [r4, #0]
   d49b0:	603b      	str	r3, [r7, #0]
      registerEndByteData(!inputPinValue);
   d49b2:	7830      	ldrb	r0, [r6, #0]
   d49b4:	f080 0001 	eor.w	r0, r0, #1
   d49b8:	f7ff fdf2 	bl	d45a0 <_Z19registerEndByteDatab>
      if (!endByteMask) {
   d49bc:	4b12      	ldr	r3, [pc, #72]	; (d4a08 <_Z9interruptv+0x394>)
   d49be:	781b      	ldrb	r3, [r3, #0]
   d49c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d49c4:	2b00      	cmp	r3, #0
   d49c6:	f47f aec9 	bne.w	d475c <_Z9interruptv+0xe8>
        if(endByteBuffer != 0b01111110) {
   d49ca:	4b10      	ldr	r3, [pc, #64]	; (d4a0c <_Z9interruptv+0x398>)
   d49cc:	781b      	ldrb	r3, [r3, #0]
   d49ce:	2b7e      	cmp	r3, #126	; 0x7e
   d49d0:	f47f aef0 	bne.w	d47b4 <_Z9interruptv+0x140>
        newMessage = !isAck;
   d49d4:	4b08      	ldr	r3, [pc, #32]	; (d49f8 <_Z9interruptv+0x384>)
   d49d6:	490e      	ldr	r1, [pc, #56]	; (d4a10 <_Z9interruptv+0x39c>)
   d49d8:	781b      	ldrb	r3, [r3, #0]
   d49da:	f083 0301 	eor.w	r3, r3, #1
   d49de:	700b      	strb	r3, [r1, #0]
        state = WAITING;
   d49e0:	602a      	str	r2, [r5, #0]
        resetMEF();
   d49e2:	f7ff fe0f 	bl	d4604 <_Z8resetMEFv>
}
   d49e6:	e6b9      	b.n	d475c <_Z9interruptv+0xe8>
   d49e8:	2003e610 	.word	0x2003e610
   d49ec:	2003e61c 	.word	0x2003e61c
   d49f0:	3ff80000 	.word	0x3ff80000
   d49f4:	2003e470 	.word	0x2003e470
   d49f8:	2003e60c 	.word	0x2003e60c
   d49fc:	2003e5fe 	.word	0x2003e5fe
   d4a00:	2003e5fc 	.word	0x2003e5fc
   d4a04:	2003e630 	.word	0x2003e630
   d4a08:	2003e472 	.word	0x2003e472
   d4a0c:	2003e600 	.word	0x2003e600
   d4a10:	2003e622 	.word	0x2003e622

000d4a14 <_Z5crc16Phh>:

uint16_t crc16(uint8_t *input_str, uint8_t length ) {
   d4a14:	b510      	push	{r4, lr}
   d4a16:	4401      	add	r1, r0
   d4a18:	4604      	mov	r4, r0
	uint8_t x;
    uint16_t crc = 0xFFFF;
   d4a1a:	f64f 70ff 	movw	r0, #65535	; 0xffff

    while (length--){
   d4a1e:	428c      	cmp	r4, r1
   d4a20:	d00c      	beq.n	d4a3c <_Z5crc16Phh+0x28>
        x = crc >> 8 ^ *input_str++;
   d4a22:	f814 3b01 	ldrb.w	r3, [r4], #1
   d4a26:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
        x ^= x>>4;
   d4a2a:	ea83 1313 	eor.w	r3, r3, r3, lsr #4
        crc = (crc << 8) ^ ((uint8_t)(x << 12)) ^ ((uint8_t)(x <<5)) ^ ((uint8_t)x);
   d4a2e:	ea43 2200 	orr.w	r2, r3, r0, lsl #8
   d4a32:	015b      	lsls	r3, r3, #5
   d4a34:	b2db      	uxtb	r3, r3
   d4a36:	4053      	eors	r3, r2
   d4a38:	b298      	uxth	r0, r3
    while (length--){
   d4a3a:	e7f0      	b.n	d4a1e <_Z5crc16Phh+0xa>
    }
    return crc;
   d4a3c:	bd10      	pop	{r4, pc}
	...

000d4a40 <_Z11sendMessagePhhhmb>:
void sendMessage(uint8_t* message, uint8_t length, uint8_t flags, uint32_t ackDelay, bool induceError) {
   d4a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a44:	4606      	mov	r6, r0
   d4a46:	460d      	mov	r5, r1
   d4a48:	4617      	mov	r7, r2
   d4a4a:	4698      	mov	r8, r3
  uint16_t msgCrc = crc16(message, length);
   d4a4c:	f7ff ffe2 	bl	d4a14 <_Z5crc16Phh>
void sendMessage(uint8_t* message, uint8_t length, uint8_t flags, uint32_t ackDelay, bool induceError) {
   d4a50:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
  uint16_t msgCrc = crc16(message, length);
   d4a54:	4604      	mov	r4, r0
  if (induceError)
   d4a56:	f1b9 0f00 	cmp.w	r9, #0
   d4a5a:	d001      	beq.n	d4a60 <_Z11sendMessagePhhhmb+0x20>
    msgCrc++;
   d4a5c:	3401      	adds	r4, #1
   d4a5e:	b2a4      	uxth	r4, r4
      for(uint32_t counter = 0; (crcAck != msgCrc) && (counter < ackDelay); ++counter)
   d4a60:	f8df a088 	ldr.w	sl, [pc, #136]	; d4aec <_Z11sendMessagePhhhmb+0xac>
    os_mutex_lock(transmitMutex);
   d4a64:	f8df 9088 	ldr.w	r9, [pc, #136]	; d4af0 <_Z11sendMessagePhhhmb+0xb0>
   d4a68:	46d3      	mov	fp, sl
   d4a6a:	f8d9 0000 	ldr.w	r0, [r9]
   d4a6e:	f000 f9b1 	bl	d4dd4 <os_mutex_lock>
    preambule();
   d4a72:	f7ff fc9f 	bl	d43b4 <_Z9preambulev>
    sendByte(0b01111110);
   d4a76:	207e      	movs	r0, #126	; 0x7e
   d4a78:	f7ff fcc6 	bl	d4408 <_Z8sendByteh>
    sendByte(flags);
   d4a7c:	4638      	mov	r0, r7
   d4a7e:	f7ff fcc3 	bl	d4408 <_Z8sendByteh>
    sendByte(length);
   d4a82:	4628      	mov	r0, r5
   d4a84:	f7ff fcc0 	bl	d4408 <_Z8sendByteh>
    sendBytes(message, length);
   d4a88:	4629      	mov	r1, r5
   d4a8a:	4630      	mov	r0, r6
   d4a8c:	f7ff fcaa 	bl	d43e4 <_Z9sendBytesPhh>
    sendDualByte(msgCrc);
   d4a90:	4620      	mov	r0, r4
   d4a92:	f7ff fcc6 	bl	d4422 <_Z12sendDualBytet>
    sendByte(0b01111110);
   d4a96:	207e      	movs	r0, #126	; 0x7e
   d4a98:	f7ff fcb6 	bl	d4408 <_Z8sendByteh>
    os_mutex_unlock(transmitMutex);
   d4a9c:	f8d9 0000 	ldr.w	r0, [r9]
   d4aa0:	f000 f9a0 	bl	d4de4 <os_mutex_unlock>
      for(uint32_t counter = 0; (crcAck != msgCrc) && (counter < ackDelay); ++counter)
   d4aa4:	2300      	movs	r3, #0
   d4aa6:	f8ba 2000 	ldrh.w	r2, [sl]
   d4aaa:	b292      	uxth	r2, r2
   d4aac:	42a2      	cmp	r2, r4
   d4aae:	d008      	beq.n	d4ac2 <_Z11sendMessagePhhhmb+0x82>
   d4ab0:	4543      	cmp	r3, r8
   d4ab2:	9301      	str	r3, [sp, #4]
   d4ab4:	d005      	beq.n	d4ac2 <_Z11sendMessagePhhhmb+0x82>
        delay(1);
   d4ab6:	2001      	movs	r0, #1
   d4ab8:	f000 fc7c 	bl	d53b4 <delay>
      for(uint32_t counter = 0; (crcAck != msgCrc) && (counter < ackDelay); ++counter)
   d4abc:	9b01      	ldr	r3, [sp, #4]
   d4abe:	3301      	adds	r3, #1
   d4ac0:	e7f1      	b.n	d4aa6 <_Z11sendMessagePhhhmb+0x66>
  } while (ACK_ON && (crcAck != msgCrc));
   d4ac2:	f8bb 3000 	ldrh.w	r3, [fp]
   d4ac6:	b29b      	uxth	r3, r3
   d4ac8:	42a3      	cmp	r3, r4
   d4aca:	d1ce      	bne.n	d4a6a <_Z11sendMessagePhhhmb+0x2a>
  WITH_LOCK(Serial) {
   d4acc:	f000 fdf2 	bl	d56b4 <_Z16_fetch_usbserialv>
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d4ad0:	f7ff fb45 	bl	d415e <_ZN9USBSerial4lockEv.isra.0>
    Serial.println("ACK IN !");
   d4ad4:	f000 fdee 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4ad8:	4903      	ldr	r1, [pc, #12]	; (d4ae8 <_Z11sendMessagePhhhmb+0xa8>)
   d4ada:	f000 fc00 	bl	d52de <_ZN5Print7printlnEPKc>
}
   d4ade:	b003      	add	sp, #12
   d4ae0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
   d4ae4:	f7ff bb1c 	b.w	d4120 <_ZN9USBSerial6unlockEv.isra.0>
   d4ae8:	000d6608 	.word	0x000d6608
   d4aec:	2003e5fc 	.word	0x2003e5fc
   d4af0:	2003e640 	.word	0x2003e640

000d4af4 <_Z21sendingThreadFunctionPv>:
void sendingThreadFunction(void *param) {
   d4af4:	b507      	push	{r0, r1, r2, lr}
    sendMessage((uint8_t*)"Message Gab 1", 14, 0b00000000, 1000, false);
   d4af6:	2400      	movs	r4, #0
   d4af8:	4622      	mov	r2, r4
   d4afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4afe:	210e      	movs	r1, #14
   d4b00:	4810      	ldr	r0, [pc, #64]	; (d4b44 <_Z21sendingThreadFunctionPv+0x50>)
   d4b02:	9400      	str	r4, [sp, #0]
   d4b04:	f7ff ff9c 	bl	d4a40 <_Z11sendMessagePhhhmb>
    delay(10000);
   d4b08:	f242 7010 	movw	r0, #10000	; 0x2710
   d4b0c:	f000 fc52 	bl	d53b4 <delay>
    sendMessage((uint8_t*)"Message Gab 2", 14, 0b00000000, 1000, false);
   d4b10:	4622      	mov	r2, r4
   d4b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4b16:	210e      	movs	r1, #14
   d4b18:	480b      	ldr	r0, [pc, #44]	; (d4b48 <_Z21sendingThreadFunctionPv+0x54>)
   d4b1a:	9400      	str	r4, [sp, #0]
   d4b1c:	f7ff ff90 	bl	d4a40 <_Z11sendMessagePhhhmb>
    delay(10000);
   d4b20:	f242 7010 	movw	r0, #10000	; 0x2710
   d4b24:	f000 fc46 	bl	d53b4 <delay>
    sendMessage((uint8_t*)"Domingo n'est pas a l'examen du samedi, il regarde le baseball!!!!!!!!!!!!!!!!!", 80, 0b00000000, 1000, false);
   d4b28:	4808      	ldr	r0, [pc, #32]	; (d4b4c <_Z21sendingThreadFunctionPv+0x58>)
   d4b2a:	9400      	str	r4, [sp, #0]
   d4b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4b30:	4622      	mov	r2, r4
   d4b32:	2150      	movs	r1, #80	; 0x50
   d4b34:	f7ff ff84 	bl	d4a40 <_Z11sendMessagePhhhmb>
    delay(10000);
   d4b38:	f242 7010 	movw	r0, #10000	; 0x2710
   d4b3c:	f000 fc3a 	bl	d53b4 <delay>
	while(true) {
   d4b40:	e7d9      	b.n	d4af6 <_Z21sendingThreadFunctionPv+0x2>
   d4b42:	bf00      	nop
   d4b44:	000d6611 	.word	0x000d6611
   d4b48:	000d661f 	.word	0x000d661f
   d4b4c:	000d662d 	.word	0x000d662d

000d4b50 <loop>:
void loop() {
   d4b50:	b510      	push	{r4, lr}
  if (newMessage) {
   d4b52:	4b31      	ldr	r3, [pc, #196]	; (d4c18 <loop+0xc8>)
   d4b54:	781a      	ldrb	r2, [r3, #0]
   d4b56:	b312      	cbz	r2, d4b9e <loop+0x4e>
    newMessage = false;
   d4b58:	2200      	movs	r2, #0
   d4b5a:	701a      	strb	r2, [r3, #0]
    if(receivedCrc == crc16((uint8_t*)byteBuffer, msgLength)) {
   d4b5c:	4b2f      	ldr	r3, [pc, #188]	; (d4c1c <loop+0xcc>)
   d4b5e:	4c30      	ldr	r4, [pc, #192]	; (d4c20 <loop+0xd0>)
   d4b60:	7819      	ldrb	r1, [r3, #0]
   d4b62:	4830      	ldr	r0, [pc, #192]	; (d4c24 <loop+0xd4>)
   d4b64:	f7ff ff56 	bl	d4a14 <_Z5crc16Phh>
   d4b68:	8823      	ldrh	r3, [r4, #0]
   d4b6a:	b29b      	uxth	r3, r3
   d4b6c:	4298      	cmp	r0, r3
   d4b6e:	d147      	bne.n	d4c00 <loop+0xb0>
        sendAck(receivedCrc);
   d4b70:	8820      	ldrh	r0, [r4, #0]
   d4b72:	b280      	uxth	r0, r0
   d4b74:	f7ff fc62 	bl	d443c <_Z7sendAckt>
      WITH_LOCK(Serial) {
   d4b78:	f000 fd9c 	bl	d56b4 <_Z16_fetch_usbserialv>
      { _M_device.lock(); }
   d4b7c:	f7ff faef 	bl	d415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.printlnf("Message : %s", (char*)byteBuffer);
   d4b80:	f000 fd98 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4b84:	4a27      	ldr	r2, [pc, #156]	; (d4c24 <loop+0xd4>)
   d4b86:	4928      	ldr	r1, [pc, #160]	; (d4c28 <loop+0xd8>)
   d4b88:	f7ff fb10 	bl	d41ac <_ZN5Print8printlnfEPKcz>
        Serial.printlnf("Crc : %d", receivedCrc);
   d4b8c:	f000 fd92 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4b90:	8822      	ldrh	r2, [r4, #0]
   d4b92:	4926      	ldr	r1, [pc, #152]	; (d4c2c <loop+0xdc>)
   d4b94:	b292      	uxth	r2, r2
   d4b96:	f7ff fb09 	bl	d41ac <_ZN5Print8printlnfEPKcz>
      { _M_device.unlock(); }
   d4b9a:	f7ff fac1 	bl	d4120 <_ZN9USBSerial6unlockEv.isra.0>
  if((state != WAITING) && (((System.ticks() - lastWaitingTick) / System.ticksPerMicrosecond()) > 10000000)) {
   d4b9e:	4b24      	ldr	r3, [pc, #144]	; (d4c30 <loop+0xe0>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	b1db      	cbz	r3, d4bdc <loop+0x8c>
   d4ba4:	4b23      	ldr	r3, [pc, #140]	; (d4c34 <loop+0xe4>)
   d4ba6:	4a24      	ldr	r2, [pc, #144]	; (d4c38 <loop+0xe8>)
   d4ba8:	685b      	ldr	r3, [r3, #4]
   d4baa:	6812      	ldr	r2, [r2, #0]
        return SYSTEM_US_TICKS;
   d4bac:	4923      	ldr	r1, [pc, #140]	; (d4c3c <loop+0xec>)
   d4bae:	1a9b      	subs	r3, r3, r2
   d4bb0:	4a23      	ldr	r2, [pc, #140]	; (d4c40 <loop+0xf0>)
   d4bb2:	6812      	ldr	r2, [r2, #0]
   d4bb4:	fbb2 f2f1 	udiv	r2, r2, r1
   d4bb8:	fbb3 f3f2 	udiv	r3, r3, r2
   d4bbc:	4a21      	ldr	r2, [pc, #132]	; (d4c44 <loop+0xf4>)
   d4bbe:	4293      	cmp	r3, r2
   d4bc0:	d90c      	bls.n	d4bdc <loop+0x8c>
    resetMEF();
   d4bc2:	f7ff fd1f 	bl	d4604 <_Z8resetMEFv>
    WITH_LOCK(Serial) {
   d4bc6:	f000 fd75 	bl	d56b4 <_Z16_fetch_usbserialv>
      { _M_device.lock(); }
   d4bca:	f7ff fac8 	bl	d415e <_ZN9USBSerial4lockEv.isra.0>
      Serial.println("WAITING TIMEOUT");
   d4bce:	f000 fd71 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4bd2:	491d      	ldr	r1, [pc, #116]	; (d4c48 <loop+0xf8>)
   d4bd4:	f000 fb83 	bl	d52de <_ZN5Print7printlnEPKc>
      { _M_device.unlock(); }
   d4bd8:	f7ff faa2 	bl	d4120 <_ZN9USBSerial6unlockEv.isra.0>
  if (error) {
   d4bdc:	4b1b      	ldr	r3, [pc, #108]	; (d4c4c <loop+0xfc>)
   d4bde:	781a      	ldrb	r2, [r3, #0]
   d4be0:	b1c2      	cbz	r2, d4c14 <loop+0xc4>
    error = false;
   d4be2:	2200      	movs	r2, #0
    delay(random(1, 1000));
   d4be4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4be8:	2001      	movs	r0, #1
    error = false;
   d4bea:	701a      	strb	r2, [r3, #0]
    delay(random(1, 1000));
   d4bec:	f000 fe83 	bl	d58f6 <_Z6randomii>
   d4bf0:	f000 fbe0 	bl	d53b4 <delay>
    resetMEF();
   d4bf4:	f7ff fd06 	bl	d4604 <_Z8resetMEFv>
}
   d4bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    interrupts();
   d4bfc:	f000 bdb2 	b.w	d5764 <_Z10interruptsv>
      WITH_LOCK(Serial) {
   d4c00:	f000 fd58 	bl	d56b4 <_Z16_fetch_usbserialv>
      { _M_device.lock(); }
   d4c04:	f7ff faab 	bl	d415e <_ZN9USBSerial4lockEv.isra.0>
        Serial.println("BAD MESSAGE RECEIVED");
   d4c08:	f000 fd54 	bl	d56b4 <_Z16_fetch_usbserialv>
   d4c0c:	4910      	ldr	r1, [pc, #64]	; (d4c50 <loop+0x100>)
   d4c0e:	f000 fb66 	bl	d52de <_ZN5Print7printlnEPKc>
   d4c12:	e7c2      	b.n	d4b9a <loop+0x4a>
}
   d4c14:	bd10      	pop	{r4, pc}
   d4c16:	bf00      	nop
   d4c18:	2003e622 	.word	0x2003e622
   d4c1c:	2003e621 	.word	0x2003e621
   d4c20:	2003e630 	.word	0x2003e630
   d4c24:	2003e4fc 	.word	0x2003e4fc
   d4c28:	000d667d 	.word	0x000d667d
   d4c2c:	000d668a 	.word	0x000d668a
   d4c30:	2003e63c 	.word	0x2003e63c
   d4c34:	e0001000 	.word	0xe0001000
   d4c38:	2003e614 	.word	0x2003e614
   d4c3c:	000f4240 	.word	0x000f4240
   d4c40:	2003e47c 	.word	0x2003e47c
   d4c44:	00989680 	.word	0x00989680
   d4c48:	000d66a8 	.word	0x000d66a8
   d4c4c:	2003e601 	.word	0x2003e601
   d4c50:	000d6693 	.word	0x000d6693

000d4c54 <_GLOBAL__sub_I_SystemMode>:
   d4c54:	b538      	push	{r3, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d4c56:	4d12      	ldr	r5, [pc, #72]	; (d4ca0 <_GLOBAL__sub_I_SystemMode+0x4c>)
    SleepResult() {}
   d4c58:	4b12      	ldr	r3, [pc, #72]	; (d4ca4 <_GLOBAL__sub_I_SystemMode+0x50>)
   d4c5a:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4c5c:	2400      	movs	r4, #0
        set_system_mode(mode);
   d4c5e:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   d4c60:	602c      	str	r4, [r5, #0]
   d4c62:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4c64:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4c66:	f000 f9bd 	bl	d4fe4 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4c6a:	4a0f      	ldr	r2, [pc, #60]	; (d4ca8 <_GLOBAL__sub_I_SystemMode+0x54>)
   d4c6c:	490f      	ldr	r1, [pc, #60]	; (d4cac <_GLOBAL__sub_I_SystemMode+0x58>)
   d4c6e:	4628      	mov	r0, r5
   d4c70:	f000 ffca 	bl	d5c08 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d4c74:	4621      	mov	r1, r4
   d4c76:	2001      	movs	r0, #1
   d4c78:	f000 f9c4 	bl	d5004 <system_thread_set_state>
        return SYSTEM_US_TICKS;
   d4c7c:	4b0c      	ldr	r3, [pc, #48]	; (d4cb0 <_GLOBAL__sub_I_SystemMode+0x5c>)
   d4c7e:	490d      	ldr	r1, [pc, #52]	; (d4cb4 <_GLOBAL__sub_I_SystemMode+0x60>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	fbb3 f1f1 	udiv	r1, r3, r1
uint32_t manchesterTicks = System.ticksPerMicrosecond() * MANCHESTER_TIME;
   d4c86:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   d4c8a:	434b      	muls	r3, r1

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4c8c:	480a      	ldr	r0, [pc, #40]	; (d4cb8 <_GLOBAL__sub_I_SystemMode+0x64>)
   d4c8e:	490b      	ldr	r1, [pc, #44]	; (d4cbc <_GLOBAL__sub_I_SystemMode+0x68>)
   d4c90:	6004      	str	r4, [r0, #0]
   d4c92:	600b      	str	r3, [r1, #0]
   d4c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
Thread sendingThread;
   d4c98:	4a03      	ldr	r2, [pc, #12]	; (d4ca8 <_GLOBAL__sub_I_SystemMode+0x54>)
   d4c9a:	4909      	ldr	r1, [pc, #36]	; (d4cc0 <_GLOBAL__sub_I_SystemMode+0x6c>)
   d4c9c:	f000 bfb4 	b.w	d5c08 <__aeabi_atexit>
   d4ca0:	2003e4f0 	.word	0x2003e4f0
   d4ca4:	ffff0000 	.word	0xffff0000
   d4ca8:	2003e4e4 	.word	0x2003e4e4
   d4cac:	000d4111 	.word	0x000d4111
   d4cb0:	2003e47c 	.word	0x2003e47c
   d4cb4:	000f4240 	.word	0x000f4240
   d4cb8:	2003e634 	.word	0x2003e634
   d4cbc:	2003e618 	.word	0x2003e618
   d4cc0:	000d4171 	.word	0x000d4171

000d4cc4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4cc4:	b508      	push	{r3, lr}
   d4cc6:	4b02      	ldr	r3, [pc, #8]	; (d4cd0 <netdb_freeaddrinfo+0xc>)
   d4cc8:	681b      	ldr	r3, [r3, #0]
   d4cca:	689b      	ldr	r3, [r3, #8]
   d4ccc:	9301      	str	r3, [sp, #4]
   d4cce:	bd08      	pop	{r3, pc}
   d4cd0:	00030268 	.word	0x00030268

000d4cd4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4cd4:	b508      	push	{r3, lr}
   d4cd6:	4b02      	ldr	r3, [pc, #8]	; (d4ce0 <netdb_getaddrinfo+0xc>)
   d4cd8:	681b      	ldr	r3, [r3, #0]
   d4cda:	68db      	ldr	r3, [r3, #12]
   d4cdc:	9301      	str	r3, [sp, #4]
   d4cde:	bd08      	pop	{r3, pc}
   d4ce0:	00030268 	.word	0x00030268

000d4ce4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <HAL_Pin_Map+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	681b      	ldr	r3, [r3, #0]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	0003022c 	.word	0x0003022c

000d4cf4 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <HAL_Pin_Mode+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	689b      	ldr	r3, [r3, #8]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	0003022c 	.word	0x0003022c

000d4d04 <HAL_Interrupts_Attach>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <HAL_Interrupts_Attach+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	699b      	ldr	r3, [r3, #24]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	0003022c 	.word	0x0003022c

000d4d14 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <HAL_Interrupts_Detach+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	69db      	ldr	r3, [r3, #28]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	0003022c 	.word	0x0003022c

000d4d24 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <HAL_Interrupts_Enable_All+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	6a1b      	ldr	r3, [r3, #32]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	0003022c 	.word	0x0003022c

000d4d34 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <HAL_Interrupts_Disable_All+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	0003022c 	.word	0x0003022c

000d4d44 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <HAL_RNG_GetRandomNumber+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	685b      	ldr	r3, [r3, #4]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030218 	.word	0x00030218

000d4d54 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <HAL_Delay_Milliseconds+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	689b      	ldr	r3, [r3, #8]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030218 	.word	0x00030218

000d4d64 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <HAL_Delay_Microseconds+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	68db      	ldr	r3, [r3, #12]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030218 	.word	0x00030218

000d4d74 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	695b      	ldr	r3, [r3, #20]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030218 	.word	0x00030218

000d4d84 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <os_thread_create+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	685b      	ldr	r3, [r3, #4]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	00030248 	.word	0x00030248

000d4d94 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <os_thread_is_current+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	689b      	ldr	r3, [r3, #8]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	00030248 	.word	0x00030248

000d4da4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <os_thread_join+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	691b      	ldr	r3, [r3, #16]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030248 	.word	0x00030248

000d4db4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <os_thread_cleanup+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	695b      	ldr	r3, [r3, #20]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030248 	.word	0x00030248

000d4dc4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <os_mutex_create+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030248 	.word	0x00030248

000d4dd4 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <os_mutex_lock+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030248 	.word	0x00030248

000d4de4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <os_mutex_unlock+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	00030248 	.word	0x00030248

000d4df4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <os_mutex_recursive_create+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030248 	.word	0x00030248

000d4e04 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <os_mutex_recursive_destroy+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030248 	.word	0x00030248

000d4e14 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <os_mutex_recursive_lock+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030248 	.word	0x00030248

000d4e24 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <os_mutex_recursive_unlock+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030248 	.word	0x00030248

000d4e34 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <os_thread_exit+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	00030248 	.word	0x00030248

000d4e44 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <inet_inet_ntop+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	695b      	ldr	r3, [r3, #20]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030264 	.word	0x00030264

000d4e54 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <hal_usart_init+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	681b      	ldr	r3, [r3, #0]
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	0003023c 	.word	0x0003023c

000d4e64 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <hal_usart_write+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	68db      	ldr	r3, [r3, #12]
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	0003023c 	.word	0x0003023c

000d4e74 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <hal_usart_available+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	691b      	ldr	r3, [r3, #16]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	0003023c 	.word	0x0003023c

000d4e84 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <hal_usart_read+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	695b      	ldr	r3, [r3, #20]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	0003023c 	.word	0x0003023c

000d4e94 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <hal_usart_peek+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	699b      	ldr	r3, [r3, #24]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	0003023c 	.word	0x0003023c

000d4ea4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <hal_usart_flush+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	69db      	ldr	r3, [r3, #28]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	0003023c 	.word	0x0003023c

000d4eb4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <hal_usart_is_enabled+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	6a1b      	ldr	r3, [r3, #32]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	0003023c 	.word	0x0003023c

000d4ec4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <hal_usart_available_data_for_write+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	0003023c 	.word	0x0003023c

000d4ed4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <hal_i2c_write+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	6a1b      	ldr	r3, [r3, #32]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030228 	.word	0x00030228

000d4ee4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <hal_i2c_available+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030228 	.word	0x00030228

000d4ef4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <hal_i2c_read+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030228 	.word	0x00030228

000d4f04 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <hal_i2c_peek+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030228 	.word	0x00030228

000d4f14 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <hal_i2c_flush+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030228 	.word	0x00030228

000d4f24 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <hal_i2c_is_enabled+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030228 	.word	0x00030228

000d4f34 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <hal_i2c_init+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030228 	.word	0x00030228

000d4f44 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <hal_spi_init+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	69db      	ldr	r3, [r3, #28]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030230 	.word	0x00030230

000d4f54 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <hal_spi_is_enabled+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	6a1b      	ldr	r3, [r3, #32]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030230 	.word	0x00030230

000d4f64 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <HAL_USB_USART_Init+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	681b      	ldr	r3, [r3, #0]
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	0003024c 	.word	0x0003024c

000d4f74 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <HAL_USB_USART_Begin+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	685b      	ldr	r3, [r3, #4]
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	0003024c 	.word	0x0003024c

000d4f84 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <HAL_USB_USART_Available_Data+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	691b      	ldr	r3, [r3, #16]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	0003024c 	.word	0x0003024c

000d4f94 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	695b      	ldr	r3, [r3, #20]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	0003024c 	.word	0x0003024c

000d4fa4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <HAL_USB_USART_Receive_Data+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	699b      	ldr	r3, [r3, #24]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	0003024c 	.word	0x0003024c

000d4fb4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <HAL_USB_USART_Send_Data+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	69db      	ldr	r3, [r3, #28]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	0003024c 	.word	0x0003024c

000d4fc4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <HAL_USB_USART_Flush_Data+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	6a1b      	ldr	r3, [r3, #32]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	0003024c 	.word	0x0003024c

000d4fd4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <panic_+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030260 	.word	0x00030260

000d4fe4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <set_system_mode+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	685b      	ldr	r3, [r3, #4]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030220 	.word	0x00030220

000d4ff4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <system_delay_ms+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	695b      	ldr	r3, [r3, #20]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030220 	.word	0x00030220

000d5004 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <system_thread_set_state+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030220 	.word	0x00030220

000d5014 <system_internal>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
DYNALIB_FN(13, system, system_internal, void*(int item, void*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <system_internal+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030220 	.word	0x00030220

000d5024 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b03      	ldr	r3, [pc, #12]	; (d5034 <system_ctrl_set_app_request_handler+0x10>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d502e:	9301      	str	r3, [sp, #4]
   d5030:	bd08      	pop	{r3, pc}
   d5032:	0000      	.short	0x0000
   d5034:	00030220 	.word	0x00030220

000d5038 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5038:	b508      	push	{r3, lr}
   d503a:	4b03      	ldr	r3, [pc, #12]	; (d5048 <system_ctrl_set_result+0x10>)
   d503c:	681b      	ldr	r3, [r3, #0]
   d503e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5042:	9301      	str	r3, [sp, #4]
   d5044:	bd08      	pop	{r3, pc}
   d5046:	0000      	.short	0x0000
   d5048:	00030220 	.word	0x00030220

000d504c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <network_connect+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	685b      	ldr	r3, [r3, #4]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	00030240 	.word	0x00030240

000d505c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <network_connecting+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	689b      	ldr	r3, [r3, #8]
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	00030240 	.word	0x00030240

000d506c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <network_disconnect+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	68db      	ldr	r3, [r3, #12]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	00030240 	.word	0x00030240

000d507c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <network_ready+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	691b      	ldr	r3, [r3, #16]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	00030240 	.word	0x00030240

000d508c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <network_on+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	695b      	ldr	r3, [r3, #20]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	00030240 	.word	0x00030240

000d509c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <network_off+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	699b      	ldr	r3, [r3, #24]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	00030240 	.word	0x00030240

000d50ac <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <network_listen+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	69db      	ldr	r3, [r3, #28]
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	00030240 	.word	0x00030240

000d50bc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <network_listening+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	6a1b      	ldr	r3, [r3, #32]
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	00030240 	.word	0x00030240

000d50cc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <network_set_listen_timeout+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	00030240 	.word	0x00030240

000d50dc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <network_get_listen_timeout+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	00030240 	.word	0x00030240

000d50ec <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <network_is_on+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	00030240 	.word	0x00030240

000d50fc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <network_is_off+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	00030240 	.word	0x00030240

000d510c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	00030244 	.word	0x00030244

000d511c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <malloc+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	681b      	ldr	r3, [r3, #0]
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	0003021c 	.word	0x0003021c

000d512c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <free+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	685b      	ldr	r3, [r3, #4]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	0003021c 	.word	0x0003021c

000d513c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <vsnprintf+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	0003021c 	.word	0x0003021c

000d514c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <abort+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	0003021c 	.word	0x0003021c

000d515c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <newlib_impure_ptr_callback+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	0003021c 	.word	0x0003021c

000d516c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d516c:	2200      	movs	r2, #0
   d516e:	6840      	ldr	r0, [r0, #4]
   d5170:	4611      	mov	r1, r2
   d5172:	f7ff bfa3 	b.w	d50bc <network_listening>

000d5176 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5176:	2200      	movs	r2, #0
   d5178:	6840      	ldr	r0, [r0, #4]
   d517a:	4611      	mov	r1, r2
   d517c:	f7ff bfae 	b.w	d50dc <network_get_listen_timeout>

000d5180 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5180:	6840      	ldr	r0, [r0, #4]
   d5182:	2200      	movs	r2, #0
   d5184:	f7ff bfa2 	b.w	d50cc <network_set_listen_timeout>

000d5188 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5188:	6840      	ldr	r0, [r0, #4]
   d518a:	2200      	movs	r2, #0
   d518c:	f081 0101 	eor.w	r1, r1, #1
   d5190:	f7ff bf8c 	b.w	d50ac <network_listen>

000d5194 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5194:	2300      	movs	r3, #0
   d5196:	6840      	ldr	r0, [r0, #4]
   d5198:	461a      	mov	r2, r3
   d519a:	4619      	mov	r1, r3
   d519c:	f7ff bf7e 	b.w	d509c <network_off>

000d51a0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d51a0:	2300      	movs	r3, #0
   d51a2:	6840      	ldr	r0, [r0, #4]
   d51a4:	461a      	mov	r2, r3
   d51a6:	4619      	mov	r1, r3
   d51a8:	f7ff bf70 	b.w	d508c <network_on>

000d51ac <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d51ac:	2200      	movs	r2, #0
   d51ae:	6840      	ldr	r0, [r0, #4]
   d51b0:	4611      	mov	r1, r2
   d51b2:	f7ff bf63 	b.w	d507c <network_ready>

000d51b6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d51b6:	2200      	movs	r2, #0
   d51b8:	6840      	ldr	r0, [r0, #4]
   d51ba:	4611      	mov	r1, r2
   d51bc:	f7ff bf4e 	b.w	d505c <network_connecting>

000d51c0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d51c0:	6840      	ldr	r0, [r0, #4]
   d51c2:	2200      	movs	r2, #0
   d51c4:	2102      	movs	r1, #2
   d51c6:	f7ff bf51 	b.w	d506c <network_disconnect>

000d51ca <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d51ca:	2300      	movs	r3, #0
   d51cc:	6840      	ldr	r0, [r0, #4]
   d51ce:	461a      	mov	r2, r3
   d51d0:	f7ff bf3c 	b.w	d504c <network_connect>

000d51d4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d51d4:	4b02      	ldr	r3, [pc, #8]	; (d51e0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d51d6:	2203      	movs	r2, #3
   d51d8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d51da:	4a02      	ldr	r2, [pc, #8]	; (d51e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d51dc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d51de:	4770      	bx	lr
   d51e0:	2003e644 	.word	0x2003e644
   d51e4:	000d66c0 	.word	0x000d66c0

000d51e8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d51e8:	b510      	push	{r4, lr}
   d51ea:	4604      	mov	r4, r0
   d51ec:	4608      	mov	r0, r1
{
    _spi = spi;
   d51ee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d51f0:	f7ff fea8 	bl	d4f44 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d51f4:	2300      	movs	r3, #0
   d51f6:	6063      	str	r3, [r4, #4]
}
   d51f8:	4620      	mov	r0, r4
   d51fa:	bd10      	pop	{r4, pc}

000d51fc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d51fc:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d51fe:	4b09      	ldr	r3, [pc, #36]	; (d5224 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5200:	4c09      	ldr	r4, [pc, #36]	; (d5228 <_GLOBAL__sub_I_System+0x2c>)
   d5202:	2202      	movs	r2, #2
   d5204:	2000      	movs	r0, #0
   d5206:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5208:	4b08      	ldr	r3, [pc, #32]	; (d522c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d520a:	6020      	str	r0, [r4, #0]
   d520c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d520e:	71a0      	strb	r0, [r4, #6]
   d5210:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5212:	f7ff fee7 	bl	d4fe4 <set_system_mode>
SystemClass System;
   d5216:	4620      	mov	r0, r4
   d5218:	4a05      	ldr	r2, [pc, #20]	; (d5230 <_GLOBAL__sub_I_System+0x34>)
   d521a:	4906      	ldr	r1, [pc, #24]	; (d5234 <_GLOBAL__sub_I_System+0x38>)
   d521c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5220:	f000 bcf2 	b.w	d5c08 <__aeabi_atexit>
   d5224:	2003e658 	.word	0x2003e658
   d5228:	2003e64c 	.word	0x2003e64c
   d522c:	ffff0000 	.word	0xffff0000
   d5230:	2003e4e4 	.word	0x2003e4e4
   d5234:	000d4111 	.word	0x000d4111

000d5238 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5238:	b510      	push	{r4, lr}
   d523a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d523c:	6800      	ldr	r0, [r0, #0]
   d523e:	b108      	cbz	r0, d5244 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5240:	f7ff fde0 	bl	d4e04 <os_mutex_recursive_destroy>
    }
   d5244:	4620      	mov	r0, r4
   d5246:	bd10      	pop	{r4, pc}

000d5248 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5248:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d524a:	4c06      	ldr	r4, [pc, #24]	; (d5264 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d524c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d524e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5250:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5252:	f7ff fdcf 	bl	d4df4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5256:	4620      	mov	r0, r4
   d5258:	4a03      	ldr	r2, [pc, #12]	; (d5268 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d525a:	4904      	ldr	r1, [pc, #16]	; (d526c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5260:	f000 bcd2 	b.w	d5c08 <__aeabi_atexit>
   d5264:	2003e65c 	.word	0x2003e65c
   d5268:	2003e4e4 	.word	0x2003e4e4
   d526c:	000d5239 	.word	0x000d5239

000d5270 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5272:	4606      	mov	r6, r0
   d5274:	460d      	mov	r5, r1
  size_t n = 0;
   d5276:	188f      	adds	r7, r1, r2
   d5278:	2400      	movs	r4, #0
  while (size--) {
   d527a:	42bd      	cmp	r5, r7
   d527c:	d00c      	beq.n	d5298 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d527e:	6833      	ldr	r3, [r6, #0]
   d5280:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5284:	689b      	ldr	r3, [r3, #8]
   d5286:	4630      	mov	r0, r6
   d5288:	4798      	blx	r3
     if (chunk>=0)
   d528a:	1e03      	subs	r3, r0, #0
   d528c:	db01      	blt.n	d5292 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d528e:	441c      	add	r4, r3
  while (size--) {
   d5290:	e7f3      	b.n	d527a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5292:	2c00      	cmp	r4, #0
   d5294:	bf08      	it	eq
   d5296:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5298:	4620      	mov	r0, r4
   d529a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d529c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d529c:	b513      	push	{r0, r1, r4, lr}
   d529e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d52a0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d52a2:	b159      	cbz	r1, d52bc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d52a4:	9101      	str	r1, [sp, #4]
   d52a6:	f001 f98f 	bl	d65c8 <strlen>
   d52aa:	6823      	ldr	r3, [r4, #0]
   d52ac:	9901      	ldr	r1, [sp, #4]
   d52ae:	68db      	ldr	r3, [r3, #12]
   d52b0:	4602      	mov	r2, r0
   d52b2:	4620      	mov	r0, r4
    }
   d52b4:	b002      	add	sp, #8
   d52b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d52ba:	4718      	bx	r3
    }
   d52bc:	b002      	add	sp, #8
   d52be:	bd10      	pop	{r4, pc}

000d52c0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d52c0:	6803      	ldr	r3, [r0, #0]
   d52c2:	689b      	ldr	r3, [r3, #8]
   d52c4:	4718      	bx	r3

000d52c6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d52c6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d52c8:	210d      	movs	r1, #13
{
   d52ca:	4605      	mov	r5, r0
  size_t n = print('\r');
   d52cc:	f7ff fff8 	bl	d52c0 <_ZN5Print5printEc>
  n += print('\n');
   d52d0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d52d2:	4604      	mov	r4, r0
  n += print('\n');
   d52d4:	4628      	mov	r0, r5
   d52d6:	f7ff fff3 	bl	d52c0 <_ZN5Print5printEc>
  return n;
}
   d52da:	4420      	add	r0, r4
   d52dc:	bd38      	pop	{r3, r4, r5, pc}

000d52de <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d52de:	b538      	push	{r3, r4, r5, lr}
   d52e0:	4605      	mov	r5, r0
  return write(str);
   d52e2:	f7ff ffdb 	bl	d529c <_ZN5Print5writeEPKc>
   d52e6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d52e8:	4628      	mov	r0, r5
   d52ea:	f7ff ffec 	bl	d52c6 <_ZN5Print7printlnEv>
  return n;
}
   d52ee:	4420      	add	r0, r4
   d52f0:	bd38      	pop	{r3, r4, r5, pc}

000d52f2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d52f2:	b530      	push	{r4, r5, lr}
   d52f4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d52f6:	2300      	movs	r3, #0
   d52f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d52fc:	2a01      	cmp	r2, #1
   d52fe:	bf98      	it	ls
   d5300:	220a      	movls	r2, #10
   d5302:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5304:	460d      	mov	r5, r1
   d5306:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d530a:	fb01 5312 	mls	r3, r1, r2, r5
   d530e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5312:	2b09      	cmp	r3, #9
   d5314:	bf94      	ite	ls
   d5316:	3330      	addls	r3, #48	; 0x30
   d5318:	3337      	addhi	r3, #55	; 0x37
   d531a:	b2db      	uxtb	r3, r3
  } while(n);
   d531c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d531e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5322:	d9ef      	bls.n	d5304 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5324:	4621      	mov	r1, r4
   d5326:	f7ff ffb9 	bl	d529c <_ZN5Print5writeEPKc>
}
   d532a:	b00b      	add	sp, #44	; 0x2c
   d532c:	bd30      	pop	{r4, r5, pc}

000d532e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d532e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5332:	b086      	sub	sp, #24
   d5334:	af00      	add	r7, sp, #0
   d5336:	4605      	mov	r5, r0
   d5338:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d533a:	1d38      	adds	r0, r7, #4
   d533c:	2114      	movs	r1, #20
{
   d533e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5340:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5342:	f7ff fefb 	bl	d513c <vsnprintf>

    if (n<bufsize)
   d5346:	2813      	cmp	r0, #19
   d5348:	d80e      	bhi.n	d5368 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d534a:	1d39      	adds	r1, r7, #4
   d534c:	4628      	mov	r0, r5
   d534e:	f7ff ffa5 	bl	d529c <_ZN5Print5writeEPKc>
   d5352:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5354:	b11e      	cbz	r6, d535e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5356:	4628      	mov	r0, r5
   d5358:	f7ff ffb5 	bl	d52c6 <_ZN5Print7printlnEv>
   d535c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d535e:	4620      	mov	r0, r4
   d5360:	3718      	adds	r7, #24
   d5362:	46bd      	mov	sp, r7
   d5364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5368:	f100 0308 	add.w	r3, r0, #8
   d536c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5370:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5372:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5376:	4622      	mov	r2, r4
   d5378:	1c41      	adds	r1, r0, #1
   d537a:	683b      	ldr	r3, [r7, #0]
   d537c:	4668      	mov	r0, sp
   d537e:	f7ff fedd 	bl	d513c <vsnprintf>
  return write(str);
   d5382:	4669      	mov	r1, sp
   d5384:	4628      	mov	r0, r5
   d5386:	f7ff ff89 	bl	d529c <_ZN5Print5writeEPKc>
   d538a:	4604      	mov	r4, r0
   d538c:	46c5      	mov	sp, r8
   d538e:	e7e1      	b.n	d5354 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5390 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5390:	4b01      	ldr	r3, [pc, #4]	; (d5398 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5392:	4a02      	ldr	r2, [pc, #8]	; (d539c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5394:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5396:	4770      	bx	lr
   d5398:	2003e660 	.word	0x2003e660
   d539c:	000d66f4 	.word	0x000d66f4

000d53a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d53a0:	4b02      	ldr	r3, [pc, #8]	; (d53ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d53a2:	681a      	ldr	r2, [r3, #0]
   d53a4:	4b02      	ldr	r3, [pc, #8]	; (d53b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d53a6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d53a8:	4770      	bx	lr
   d53aa:	bf00      	nop
   d53ac:	2003e478 	.word	0x2003e478
   d53b0:	2003e664 	.word	0x2003e664

000d53b4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d53b4:	2100      	movs	r1, #0
   d53b6:	f7ff be1d 	b.w	d4ff4 <system_delay_ms>

000d53ba <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d53ba:	b510      	push	{r4, lr}
      if (_M_manager)
   d53bc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d53be:	4604      	mov	r4, r0
      if (_M_manager)
   d53c0:	b113      	cbz	r3, d53c8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d53c2:	2203      	movs	r2, #3
   d53c4:	4601      	mov	r1, r0
   d53c6:	4798      	blx	r3
    }
   d53c8:	4620      	mov	r0, r4
   d53ca:	bd10      	pop	{r4, pc}

000d53cc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d53cc:	b510      	push	{r4, lr}
   d53ce:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d53d0:	f7ff fff3 	bl	d53ba <_ZNSt14_Function_baseD1Ev>
   d53d4:	4620      	mov	r0, r4
   d53d6:	bd10      	pop	{r4, pc}

000d53d8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d53d8:	4803      	ldr	r0, [pc, #12]	; (d53e8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d53da:	4a04      	ldr	r2, [pc, #16]	; (d53ec <_GLOBAL__sub_I_RGB+0x14>)
   d53dc:	4904      	ldr	r1, [pc, #16]	; (d53f0 <_GLOBAL__sub_I_RGB+0x18>)
   d53de:	2300      	movs	r3, #0
   d53e0:	6083      	str	r3, [r0, #8]
   d53e2:	f000 bc11 	b.w	d5c08 <__aeabi_atexit>
   d53e6:	bf00      	nop
   d53e8:	2003e668 	.word	0x2003e668
   d53ec:	2003e4e4 	.word	0x2003e4e4
   d53f0:	000d53cd 	.word	0x000d53cd

000d53f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d53f4:	4b01      	ldr	r3, [pc, #4]	; (d53fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d53f6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d53f8:	4770      	bx	lr
   d53fa:	bf00      	nop
   d53fc:	2003e480 	.word	0x2003e480

000d5400 <serialEventRun>:
{
   d5400:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5402:	4b0b      	ldr	r3, [pc, #44]	; (d5430 <serialEventRun+0x30>)
   d5404:	b143      	cbz	r3, d5418 <serialEventRun+0x18>
   d5406:	f000 f955 	bl	d56b4 <_Z16_fetch_usbserialv>
   d540a:	6803      	ldr	r3, [r0, #0]
   d540c:	691b      	ldr	r3, [r3, #16]
   d540e:	4798      	blx	r3
   d5410:	2800      	cmp	r0, #0
   d5412:	dd01      	ble.n	d5418 <serialEventRun+0x18>
        serialEvent();
   d5414:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5418:	4b06      	ldr	r3, [pc, #24]	; (d5434 <serialEventRun+0x34>)
   d541a:	b143      	cbz	r3, d542e <serialEventRun+0x2e>
   d541c:	f000 f9f8 	bl	d5810 <_Z22__fetch_global_Serial1v>
   d5420:	6803      	ldr	r3, [r0, #0]
   d5422:	691b      	ldr	r3, [r3, #16]
   d5424:	4798      	blx	r3
   d5426:	2800      	cmp	r0, #0
   d5428:	dd01      	ble.n	d542e <serialEventRun+0x2e>
        serialEvent1();
   d542a:	f3af 8000 	nop.w
}
   d542e:	bd08      	pop	{r3, pc}
	...

000d5438 <_post_loop>:
{
   d5438:	b508      	push	{r3, lr}
	serialEventRun();
   d543a:	f7ff ffe1 	bl	d5400 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d543e:	f7ff fc99 	bl	d4d74 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5442:	4b01      	ldr	r3, [pc, #4]	; (d5448 <_post_loop+0x10>)
   d5444:	6018      	str	r0, [r3, #0]
}
   d5446:	bd08      	pop	{r3, pc}
   d5448:	2003e7d4 	.word	0x2003e7d4

000d544c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d544c:	4802      	ldr	r0, [pc, #8]	; (d5458 <_Z33system_initialize_user_backup_ramv+0xc>)
   d544e:	4a03      	ldr	r2, [pc, #12]	; (d545c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5450:	4903      	ldr	r1, [pc, #12]	; (d5460 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5452:	1a12      	subs	r2, r2, r0
   d5454:	f001 b84a 	b.w	d64ec <memcpy>
   d5458:	2003f400 	.word	0x2003f400
   d545c:	2003f404 	.word	0x2003f404
   d5460:	000d6850 	.word	0x000d6850

000d5464 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5464:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5466:	2300      	movs	r3, #0
   d5468:	9300      	str	r3, [sp, #0]
   d546a:	461a      	mov	r2, r3
   d546c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5470:	f7ff fde2 	bl	d5038 <system_ctrl_set_result>
}
   d5474:	b003      	add	sp, #12
   d5476:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d547c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d547c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d547e:	8843      	ldrh	r3, [r0, #2]
   d5480:	2b0a      	cmp	r3, #10
   d5482:	d008      	beq.n	d5496 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5484:	2b50      	cmp	r3, #80	; 0x50
   d5486:	d10b      	bne.n	d54a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5488:	4b09      	ldr	r3, [pc, #36]	; (d54b0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d548a:	681b      	ldr	r3, [r3, #0]
   d548c:	b14b      	cbz	r3, d54a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d548e:	b003      	add	sp, #12
   d5490:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5494:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5496:	f7ff ffe5 	bl	d5464 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d549a:	b003      	add	sp, #12
   d549c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d54a0:	2300      	movs	r3, #0
   d54a2:	9300      	str	r3, [sp, #0]
   d54a4:	461a      	mov	r2, r3
   d54a6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d54aa:	f7ff fdc5 	bl	d5038 <system_ctrl_set_result>
}
   d54ae:	e7f4      	b.n	d549a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d54b0:	2003e67c 	.word	0x2003e67c

000d54b4 <module_user_init_hook>:
{
   d54b4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d54b6:	4c12      	ldr	r4, [pc, #72]	; (d5500 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d54b8:	4812      	ldr	r0, [pc, #72]	; (d5504 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d54ba:	4d13      	ldr	r5, [pc, #76]	; (d5508 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d54bc:	2100      	movs	r1, #0
   d54be:	f7ff fe4d 	bl	d515c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d54c2:	6823      	ldr	r3, [r4, #0]
   d54c4:	42ab      	cmp	r3, r5
   d54c6:	4b11      	ldr	r3, [pc, #68]	; (d550c <module_user_init_hook+0x58>)
   d54c8:	bf0c      	ite	eq
   d54ca:	2201      	moveq	r2, #1
   d54cc:	2200      	movne	r2, #0
   d54ce:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d54d0:	d002      	beq.n	d54d8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d54d2:	f7ff ffbb 	bl	d544c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d54d6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d54d8:	f7ff fc34 	bl	d4d44 <HAL_RNG_GetRandomNumber>
   d54dc:	4604      	mov	r4, r0
    srand(seed);
   d54de:	f001 f81b 	bl	d6518 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d54e2:	4b0b      	ldr	r3, [pc, #44]	; (d5510 <module_user_init_hook+0x5c>)
   d54e4:	b113      	cbz	r3, d54ec <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d54e6:	4620      	mov	r0, r4
   d54e8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d54ec:	2100      	movs	r1, #0
   d54ee:	4808      	ldr	r0, [pc, #32]	; (d5510 <module_user_init_hook+0x5c>)
   d54f0:	f7ff fe0c 	bl	d510c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d54f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d54f8:	4806      	ldr	r0, [pc, #24]	; (d5514 <module_user_init_hook+0x60>)
   d54fa:	2100      	movs	r1, #0
   d54fc:	f7ff bd92 	b.w	d5024 <system_ctrl_set_app_request_handler>
   d5500:	2003f400 	.word	0x2003f400
   d5504:	000d53f5 	.word	0x000d53f5
   d5508:	9a271c1e 	.word	0x9a271c1e
   d550c:	2003e678 	.word	0x2003e678
   d5510:	00000000 	.word	0x00000000
   d5514:	000d547d 	.word	0x000d547d

000d5518 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5518:	4770      	bx	lr

000d551a <_ZN9IPAddressD0Ev>:
   d551a:	b510      	push	{r4, lr}
   d551c:	2118      	movs	r1, #24
   d551e:	4604      	mov	r4, r0
   d5520:	f000 fb77 	bl	d5c12 <_ZdlPvj>
   d5524:	4620      	mov	r0, r4
   d5526:	bd10      	pop	{r4, pc}

000d5528 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5528:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d552a:	7d03      	ldrb	r3, [r0, #20]
   d552c:	2b06      	cmp	r3, #6
{
   d552e:	b08d      	sub	sp, #52	; 0x34
   d5530:	460e      	mov	r6, r1
   d5532:	f100 0704 	add.w	r7, r0, #4
   d5536:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d553a:	d012      	beq.n	d5562 <_ZNK9IPAddress7printToER5Print+0x3a>
   d553c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5540:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5544:	220a      	movs	r2, #10
   d5546:	4630      	mov	r0, r6
   d5548:	f7ff fed3 	bl	d52f2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d554c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d554e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5550:	d019      	beq.n	d5586 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5552:	2c00      	cmp	r4, #0
   d5554:	d0f4      	beq.n	d5540 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5556:	212e      	movs	r1, #46	; 0x2e
   d5558:	4630      	mov	r0, r6
   d555a:	f7ff feb1 	bl	d52c0 <_ZN5Print5printEc>
   d555e:	4404      	add	r4, r0
   d5560:	e7ee      	b.n	d5540 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5562:	232f      	movs	r3, #47	; 0x2f
   d5564:	466a      	mov	r2, sp
   d5566:	4639      	mov	r1, r7
   d5568:	200a      	movs	r0, #10
		buf[0] = 0;
   d556a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d556e:	f7ff fc69 	bl	d4e44 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5572:	4668      	mov	r0, sp
   d5574:	f001 f828 	bl	d65c8 <strlen>
   d5578:	6833      	ldr	r3, [r6, #0]
   d557a:	4602      	mov	r2, r0
   d557c:	68db      	ldr	r3, [r3, #12]
   d557e:	4669      	mov	r1, sp
   d5580:	4630      	mov	r0, r6
   d5582:	4798      	blx	r3
   d5584:	4604      	mov	r4, r0
    }
    return n;
}
   d5586:	4620      	mov	r0, r4
   d5588:	b00d      	add	sp, #52	; 0x34
   d558a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d558c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d558c:	b510      	push	{r4, lr}
   d558e:	4b05      	ldr	r3, [pc, #20]	; (d55a4 <_ZN9IPAddressC1Ev+0x18>)
   d5590:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5592:	2211      	movs	r2, #17
   d5594:	f840 3b04 	str.w	r3, [r0], #4
   d5598:	2100      	movs	r1, #0
   d559a:	f000 ffb5 	bl	d6508 <memset>
}
   d559e:	4620      	mov	r0, r4
   d55a0:	bd10      	pop	{r4, pc}
   d55a2:	bf00      	nop
   d55a4:	000d671c 	.word	0x000d671c

000d55a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d55a8:	4603      	mov	r3, r0
   d55aa:	4a07      	ldr	r2, [pc, #28]	; (d55c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d55ac:	b510      	push	{r4, lr}
   d55ae:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d55b2:	f101 0210 	add.w	r2, r1, #16
   d55b6:	f851 4b04 	ldr.w	r4, [r1], #4
   d55ba:	f843 4b04 	str.w	r4, [r3], #4
   d55be:	4291      	cmp	r1, r2
   d55c0:	d1f9      	bne.n	d55b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d55c2:	780a      	ldrb	r2, [r1, #0]
   d55c4:	701a      	strb	r2, [r3, #0]
}
   d55c6:	bd10      	pop	{r4, pc}
   d55c8:	000d671c 	.word	0x000d671c

000d55cc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d55cc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d55ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d55d2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d55d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d55da:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d55de:	2304      	movs	r3, #4
   d55e0:	6041      	str	r1, [r0, #4]
   d55e2:	7503      	strb	r3, [r0, #20]
}
   d55e4:	bd10      	pop	{r4, pc}

000d55e6 <_ZN9IPAddressaSEPKh>:
{
   d55e6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d55e8:	78cb      	ldrb	r3, [r1, #3]
   d55ea:	9300      	str	r3, [sp, #0]
   d55ec:	788b      	ldrb	r3, [r1, #2]
   d55ee:	784a      	ldrb	r2, [r1, #1]
   d55f0:	7809      	ldrb	r1, [r1, #0]
   d55f2:	f7ff ffeb 	bl	d55cc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d55f6:	b002      	add	sp, #8
   d55f8:	bd10      	pop	{r4, pc}

000d55fa <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d55fa:	7441      	strb	r1, [r0, #17]
}
   d55fc:	4770      	bx	lr

000d55fe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d55fe:	4770      	bx	lr

000d5600 <_ZN9USBSerial4readEv>:
{
   d5600:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5602:	2100      	movs	r1, #0
   d5604:	7c00      	ldrb	r0, [r0, #16]
   d5606:	f7ff fccd 	bl	d4fa4 <HAL_USB_USART_Receive_Data>
}
   d560a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d560e:	bd08      	pop	{r3, pc}

000d5610 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5610:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5612:	2101      	movs	r1, #1
   d5614:	7c00      	ldrb	r0, [r0, #16]
   d5616:	f7ff fcc5 	bl	d4fa4 <HAL_USB_USART_Receive_Data>
}
   d561a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d561e:	bd08      	pop	{r3, pc}

000d5620 <_ZN9USBSerial17availableForWriteEv>:
{
   d5620:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5622:	7c00      	ldrb	r0, [r0, #16]
   d5624:	f7ff fcb6 	bl	d4f94 <HAL_USB_USART_Available_Data_For_Write>
}
   d5628:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d562c:	bd08      	pop	{r3, pc}

000d562e <_ZN9USBSerial9availableEv>:
{
   d562e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5630:	7c00      	ldrb	r0, [r0, #16]
   d5632:	f7ff fca7 	bl	d4f84 <HAL_USB_USART_Available_Data>
}
   d5636:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d563a:	bd08      	pop	{r3, pc}

000d563c <_ZN9USBSerial5writeEh>:
{
   d563c:	b513      	push	{r0, r1, r4, lr}
   d563e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5640:	7c00      	ldrb	r0, [r0, #16]
{
   d5642:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5644:	f7ff fca6 	bl	d4f94 <HAL_USB_USART_Available_Data_For_Write>
   d5648:	2800      	cmp	r0, #0
   d564a:	9901      	ldr	r1, [sp, #4]
   d564c:	dc01      	bgt.n	d5652 <_ZN9USBSerial5writeEh+0x16>
   d564e:	7c60      	ldrb	r0, [r4, #17]
   d5650:	b120      	cbz	r0, d565c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5652:	7c20      	ldrb	r0, [r4, #16]
   d5654:	f7ff fcae 	bl	d4fb4 <HAL_USB_USART_Send_Data>
   d5658:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d565c:	b002      	add	sp, #8
   d565e:	bd10      	pop	{r4, pc}

000d5660 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5660:	7c00      	ldrb	r0, [r0, #16]
   d5662:	f7ff bcaf 	b.w	d4fc4 <HAL_USB_USART_Flush_Data>

000d5666 <_ZN9USBSerialD0Ev>:
   d5666:	b510      	push	{r4, lr}
   d5668:	2114      	movs	r1, #20
   d566a:	4604      	mov	r4, r0
   d566c:	f000 fad1 	bl	d5c12 <_ZdlPvj>
   d5670:	4620      	mov	r0, r4
   d5672:	bd10      	pop	{r4, pc}

000d5674 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5674:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d567a:	4604      	mov	r4, r0
   d567c:	4608      	mov	r0, r1
   d567e:	2100      	movs	r1, #0
   d5680:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5684:	4b04      	ldr	r3, [pc, #16]	; (d5698 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5686:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5688:	2301      	movs	r3, #1
  _serial = serial;
   d568a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d568c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d568e:	4611      	mov	r1, r2
   d5690:	f7ff fc68 	bl	d4f64 <HAL_USB_USART_Init>
}
   d5694:	4620      	mov	r0, r4
   d5696:	bd10      	pop	{r4, pc}
   d5698:	000d6730 	.word	0x000d6730

000d569c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d569c:	7c00      	ldrb	r0, [r0, #16]
   d569e:	2200      	movs	r2, #0
   d56a0:	f7ff bc68 	b.w	d4f74 <HAL_USB_USART_Begin>

000d56a4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d56a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d56a6:	2214      	movs	r2, #20
{
   d56a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d56aa:	2100      	movs	r1, #0
   d56ac:	f000 ff2c 	bl	d6508 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d56b0:	4620      	mov	r0, r4
   d56b2:	bd10      	pop	{r4, pc}

000d56b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d56b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56b6:	4c10      	ldr	r4, [pc, #64]	; (d56f8 <_Z16_fetch_usbserialv+0x44>)
{
   d56b8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d56ba:	a803      	add	r0, sp, #12
   d56bc:	f7ff fff2 	bl	d56a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d56c0:	7821      	ldrb	r1, [r4, #0]
   d56c2:	f3bf 8f5b 	dmb	ish
   d56c6:	f011 0101 	ands.w	r1, r1, #1
   d56ca:	d111      	bne.n	d56f0 <_Z16_fetch_usbserialv+0x3c>
   d56cc:	4620      	mov	r0, r4
   d56ce:	9101      	str	r1, [sp, #4]
   d56d0:	f7fe fce5 	bl	d409e <__cxa_guard_acquire>
   d56d4:	9901      	ldr	r1, [sp, #4]
   d56d6:	b158      	cbz	r0, d56f0 <_Z16_fetch_usbserialv+0x3c>
   d56d8:	aa03      	add	r2, sp, #12
   d56da:	4808      	ldr	r0, [pc, #32]	; (d56fc <_Z16_fetch_usbserialv+0x48>)
   d56dc:	f7ff ffca 	bl	d5674 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d56e0:	4620      	mov	r0, r4
   d56e2:	f7fe fce1 	bl	d40a8 <__cxa_guard_release>
   d56e6:	4a06      	ldr	r2, [pc, #24]	; (d5700 <_Z16_fetch_usbserialv+0x4c>)
   d56e8:	4906      	ldr	r1, [pc, #24]	; (d5704 <_Z16_fetch_usbserialv+0x50>)
   d56ea:	4804      	ldr	r0, [pc, #16]	; (d56fc <_Z16_fetch_usbserialv+0x48>)
   d56ec:	f000 fa8c 	bl	d5c08 <__aeabi_atexit>
	return _usbserial;
}
   d56f0:	4802      	ldr	r0, [pc, #8]	; (d56fc <_Z16_fetch_usbserialv+0x48>)
   d56f2:	b008      	add	sp, #32
   d56f4:	bd10      	pop	{r4, pc}
   d56f6:	bf00      	nop
   d56f8:	2003e680 	.word	0x2003e680
   d56fc:	2003e684 	.word	0x2003e684
   d5700:	2003e4e4 	.word	0x2003e4e4
   d5704:	000d55ff 	.word	0x000d55ff

000d5708 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d5708:	4700      	bx	r0
	...

000d570c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d570c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d5710:	2400      	movs	r4, #0
{
   d5712:	461d      	mov	r5, r3
   d5714:	460f      	mov	r7, r1
   d5716:	4690      	mov	r8, r2
   d5718:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d571a:	f7ff fafb 	bl	d4d14 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d571e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5720:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d5724:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d5728:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d572c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d5730:	bfa2      	ittt	ge
   d5732:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d5736:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d573a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d573c:	4907      	ldr	r1, [pc, #28]	; (d575c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d573e:	9400      	str	r4, [sp, #0]
   d5740:	4643      	mov	r3, r8
   d5742:	463a      	mov	r2, r7
   d5744:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d5746:	bfa8      	it	ge
   d5748:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d574c:	f7ff fada 	bl	d4d04 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d5750:	fab0 f080 	clz	r0, r0
   d5754:	0940      	lsrs	r0, r0, #5
   d5756:	b004      	add	sp, #16
   d5758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d575c:	000d5709 	.word	0x000d5709

000d5760 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d5760:	f7ff bae8 	b.w	d4d34 <HAL_Interrupts_Disable_All>

000d5764 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d5764:	f7ff bade 	b.w	d4d24 <HAL_Interrupts_Enable_All>

000d5768 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5768:	4770      	bx	lr

000d576a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d576a:	7441      	strb	r1, [r0, #17]
}
   d576c:	4770      	bx	lr

000d576e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d576e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5770:	7c00      	ldrb	r0, [r0, #16]
   d5772:	f7ff fba7 	bl	d4ec4 <hal_usart_available_data_for_write>
}
   d5776:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d577a:	bd08      	pop	{r3, pc}

000d577c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d577c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d577e:	7c00      	ldrb	r0, [r0, #16]
   d5780:	f7ff fb78 	bl	d4e74 <hal_usart_available>
}
   d5784:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5788:	bd08      	pop	{r3, pc}

000d578a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d578a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d578c:	7c00      	ldrb	r0, [r0, #16]
   d578e:	f7ff fb81 	bl	d4e94 <hal_usart_peek>
}
   d5792:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5796:	bd08      	pop	{r3, pc}

000d5798 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5798:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d579a:	7c00      	ldrb	r0, [r0, #16]
   d579c:	f7ff fb72 	bl	d4e84 <hal_usart_read>
}
   d57a0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d57a4:	bd08      	pop	{r3, pc}

000d57a6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d57a6:	7c00      	ldrb	r0, [r0, #16]
   d57a8:	f7ff bb7c 	b.w	d4ea4 <hal_usart_flush>

000d57ac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d57ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d57ae:	7c45      	ldrb	r5, [r0, #17]
{
   d57b0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d57b2:	b12d      	cbz	r5, d57c0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d57b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d57b6:	b003      	add	sp, #12
   d57b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d57bc:	f7ff bb52 	b.w	d4e64 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d57c0:	7c00      	ldrb	r0, [r0, #16]
   d57c2:	9101      	str	r1, [sp, #4]
   d57c4:	f7ff fb7e 	bl	d4ec4 <hal_usart_available_data_for_write>
   d57c8:	2800      	cmp	r0, #0
   d57ca:	9901      	ldr	r1, [sp, #4]
   d57cc:	dcf2      	bgt.n	d57b4 <_ZN11USARTSerial5writeEh+0x8>
}
   d57ce:	4628      	mov	r0, r5
   d57d0:	b003      	add	sp, #12
   d57d2:	bd30      	pop	{r4, r5, pc}

000d57d4 <_ZN11USARTSerialD0Ev>:
   d57d4:	b510      	push	{r4, lr}
   d57d6:	2114      	movs	r1, #20
   d57d8:	4604      	mov	r4, r0
   d57da:	f000 fa1a 	bl	d5c12 <_ZdlPvj>
   d57de:	4620      	mov	r0, r4
   d57e0:	bd10      	pop	{r4, pc}
	...

000d57e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d57e4:	b510      	push	{r4, lr}
   d57e6:	f04f 0c00 	mov.w	ip, #0
   d57ea:	4604      	mov	r4, r0
   d57ec:	4608      	mov	r0, r1
   d57ee:	4611      	mov	r1, r2
   d57f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d57f4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d57f8:	4a04      	ldr	r2, [pc, #16]	; (d580c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d57fa:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d57fc:	2201      	movs	r2, #1
  _serial = serial;
   d57fe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5800:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5802:	461a      	mov	r2, r3
   d5804:	f7ff fb26 	bl	d4e54 <hal_usart_init>
}
   d5808:	4620      	mov	r0, r4
   d580a:	bd10      	pop	{r4, pc}
   d580c:	000d6760 	.word	0x000d6760

000d5810 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5810:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5812:	4c0e      	ldr	r4, [pc, #56]	; (d584c <_Z22__fetch_global_Serial1v+0x3c>)
   d5814:	7821      	ldrb	r1, [r4, #0]
   d5816:	f3bf 8f5b 	dmb	ish
   d581a:	f011 0101 	ands.w	r1, r1, #1
   d581e:	d112      	bne.n	d5846 <_Z22__fetch_global_Serial1v+0x36>
   d5820:	4620      	mov	r0, r4
   d5822:	9101      	str	r1, [sp, #4]
   d5824:	f7fe fc3b 	bl	d409e <__cxa_guard_acquire>
   d5828:	9901      	ldr	r1, [sp, #4]
   d582a:	b160      	cbz	r0, d5846 <_Z22__fetch_global_Serial1v+0x36>
   d582c:	4a08      	ldr	r2, [pc, #32]	; (d5850 <_Z22__fetch_global_Serial1v+0x40>)
   d582e:	4b09      	ldr	r3, [pc, #36]	; (d5854 <_Z22__fetch_global_Serial1v+0x44>)
   d5830:	4809      	ldr	r0, [pc, #36]	; (d5858 <_Z22__fetch_global_Serial1v+0x48>)
   d5832:	f7ff ffd7 	bl	d57e4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5836:	4620      	mov	r0, r4
   d5838:	f7fe fc36 	bl	d40a8 <__cxa_guard_release>
   d583c:	4a07      	ldr	r2, [pc, #28]	; (d585c <_Z22__fetch_global_Serial1v+0x4c>)
   d583e:	4908      	ldr	r1, [pc, #32]	; (d5860 <_Z22__fetch_global_Serial1v+0x50>)
   d5840:	4805      	ldr	r0, [pc, #20]	; (d5858 <_Z22__fetch_global_Serial1v+0x48>)
   d5842:	f000 f9e1 	bl	d5c08 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5846:	4804      	ldr	r0, [pc, #16]	; (d5858 <_Z22__fetch_global_Serial1v+0x48>)
   d5848:	b002      	add	sp, #8
   d584a:	bd10      	pop	{r4, pc}
   d584c:	2003e698 	.word	0x2003e698
   d5850:	2003e69c 	.word	0x2003e69c
   d5854:	2003e720 	.word	0x2003e720
   d5858:	2003e7a4 	.word	0x2003e7a4
   d585c:	2003e4e4 	.word	0x2003e4e4
   d5860:	000d5769 	.word	0x000d5769

000d5864 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5864:	4770      	bx	lr

000d5866 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5868:	4606      	mov	r6, r0
   d586a:	4615      	mov	r5, r2
   d586c:	460c      	mov	r4, r1
   d586e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5870:	42bc      	cmp	r4, r7
   d5872:	d006      	beq.n	d5882 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5874:	6833      	ldr	r3, [r6, #0]
   d5876:	f814 1b01 	ldrb.w	r1, [r4], #1
   d587a:	689b      	ldr	r3, [r3, #8]
   d587c:	4630      	mov	r0, r6
   d587e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5880:	e7f6      	b.n	d5870 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5882:	4628      	mov	r0, r5
   d5884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5886 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5886:	7c00      	ldrb	r0, [r0, #16]
   d5888:	2200      	movs	r2, #0
   d588a:	f7ff bb23 	b.w	d4ed4 <hal_i2c_write>

000d588e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d588e:	7c00      	ldrb	r0, [r0, #16]
   d5890:	2100      	movs	r1, #0
   d5892:	f7ff bb27 	b.w	d4ee4 <hal_i2c_available>

000d5896 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5896:	7c00      	ldrb	r0, [r0, #16]
   d5898:	2100      	movs	r1, #0
   d589a:	f7ff bb2b 	b.w	d4ef4 <hal_i2c_read>

000d589e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d589e:	7c00      	ldrb	r0, [r0, #16]
   d58a0:	2100      	movs	r1, #0
   d58a2:	f7ff bb2f 	b.w	d4f04 <hal_i2c_peek>

000d58a6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d58a6:	7c00      	ldrb	r0, [r0, #16]
   d58a8:	2100      	movs	r1, #0
   d58aa:	f7ff bb33 	b.w	d4f14 <hal_i2c_flush>

000d58ae <_ZN7TwoWireD0Ev>:
   d58ae:	b510      	push	{r4, lr}
   d58b0:	2114      	movs	r1, #20
   d58b2:	4604      	mov	r4, r0
   d58b4:	f000 f9ad 	bl	d5c12 <_ZdlPvj>
   d58b8:	4620      	mov	r0, r4
   d58ba:	bd10      	pop	{r4, pc}

000d58bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d58bc:	b510      	push	{r4, lr}
   d58be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d58c2:	4604      	mov	r4, r0
   d58c4:	4608      	mov	r0, r1
   d58c6:	2100      	movs	r1, #0
   d58c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d58cc:	4b03      	ldr	r3, [pc, #12]	; (d58dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d58ce:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d58d0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d58d2:	4611      	mov	r1, r2
   d58d4:	f7ff fb2e 	bl	d4f34 <hal_i2c_init>
}
   d58d8:	4620      	mov	r0, r4
   d58da:	bd10      	pop	{r4, pc}
   d58dc:	000d6790 	.word	0x000d6790

000d58e0 <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   d58e0:	b510      	push	{r4, lr}
  if (0 == max) {
   d58e2:	4604      	mov	r4, r0
   d58e4:	b128      	cbz	r0, d58f2 <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   d58e6:	f000 fe3b 	bl	d6560 <rand>
   d58ea:	fb90 f3f4 	sdiv	r3, r0, r4
   d58ee:	fb03 0414 	mls	r4, r3, r4, r0
}
   d58f2:	4620      	mov	r0, r4
   d58f4:	bd10      	pop	{r4, pc}

000d58f6 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   d58f6:	4288      	cmp	r0, r1
{
   d58f8:	b510      	push	{r4, lr}
   d58fa:	4604      	mov	r4, r0
  if (min >= max) {
   d58fc:	da03      	bge.n	d5906 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   d58fe:	1a08      	subs	r0, r1, r0
   d5900:	f7ff ffee 	bl	d58e0 <_Z6randomi>
   d5904:	4404      	add	r4, r0
}
   d5906:	4620      	mov	r0, r4
   d5908:	bd10      	pop	{r4, pc}

000d590a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d590a:	2200      	movs	r2, #0
   d590c:	6840      	ldr	r0, [r0, #4]
   d590e:	4611      	mov	r1, r2
   d5910:	f7ff bbb4 	b.w	d507c <network_ready>

000d5914 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5914:	2200      	movs	r2, #0
   d5916:	6840      	ldr	r0, [r0, #4]
   d5918:	4611      	mov	r1, r2
   d591a:	f7ff bbcf 	b.w	d50bc <network_listening>

000d591e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d591e:	2200      	movs	r2, #0
   d5920:	6840      	ldr	r0, [r0, #4]
   d5922:	4611      	mov	r1, r2
   d5924:	f7ff bbda 	b.w	d50dc <network_get_listen_timeout>

000d5928 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5928:	6840      	ldr	r0, [r0, #4]
   d592a:	2200      	movs	r2, #0
   d592c:	f7ff bbce 	b.w	d50cc <network_set_listen_timeout>

000d5930 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5930:	6840      	ldr	r0, [r0, #4]
   d5932:	2200      	movs	r2, #0
   d5934:	f081 0101 	eor.w	r1, r1, #1
   d5938:	f7ff bbb8 	b.w	d50ac <network_listen>

000d593c <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d593c:	2300      	movs	r3, #0
   d593e:	6840      	ldr	r0, [r0, #4]
   d5940:	461a      	mov	r2, r3
   d5942:	4619      	mov	r1, r3
   d5944:	f7ff bbaa 	b.w	d509c <network_off>

000d5948 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5948:	2300      	movs	r3, #0
   d594a:	6840      	ldr	r0, [r0, #4]
   d594c:	461a      	mov	r2, r3
   d594e:	4619      	mov	r1, r3
   d5950:	f7ff bb9c 	b.w	d508c <network_on>

000d5954 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5954:	2200      	movs	r2, #0
   d5956:	6840      	ldr	r0, [r0, #4]
   d5958:	4611      	mov	r1, r2
   d595a:	f7ff bb7f 	b.w	d505c <network_connecting>

000d595e <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d595e:	6840      	ldr	r0, [r0, #4]
   d5960:	2200      	movs	r2, #0
   d5962:	2102      	movs	r1, #2
   d5964:	f7ff bb82 	b.w	d506c <network_disconnect>

000d5968 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5968:	2300      	movs	r3, #0
   d596a:	6840      	ldr	r0, [r0, #4]
   d596c:	461a      	mov	r2, r3
   d596e:	f7ff bb6d 	b.w	d504c <network_connect>
	...

000d5974 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5974:	4b02      	ldr	r3, [pc, #8]	; (d5980 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5976:	2204      	movs	r2, #4
   d5978:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d597a:	4a02      	ldr	r2, [pc, #8]	; (d5984 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d597c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d597e:	4770      	bx	lr
   d5980:	2003e7b8 	.word	0x2003e7b8
   d5984:	000d67b8 	.word	0x000d67b8

000d5988 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5988:	2300      	movs	r3, #0
   d598a:	6840      	ldr	r0, [r0, #4]
   d598c:	461a      	mov	r2, r3
   d598e:	f7ff bb5d 	b.w	d504c <network_connect>

000d5992 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5992:	6840      	ldr	r0, [r0, #4]
   d5994:	2200      	movs	r2, #0
   d5996:	2102      	movs	r1, #2
   d5998:	f7ff bb68 	b.w	d506c <network_disconnect>

000d599c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d599c:	2200      	movs	r2, #0
   d599e:	6840      	ldr	r0, [r0, #4]
   d59a0:	4611      	mov	r1, r2
   d59a2:	f7ff bb5b 	b.w	d505c <network_connecting>

000d59a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d59a6:	2200      	movs	r2, #0
   d59a8:	6840      	ldr	r0, [r0, #4]
   d59aa:	4611      	mov	r1, r2
   d59ac:	f7ff bb66 	b.w	d507c <network_ready>

000d59b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d59b0:	2300      	movs	r3, #0
   d59b2:	6840      	ldr	r0, [r0, #4]
   d59b4:	461a      	mov	r2, r3
   d59b6:	4619      	mov	r1, r3
   d59b8:	f7ff bb68 	b.w	d508c <network_on>

000d59bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d59bc:	2300      	movs	r3, #0
   d59be:	6840      	ldr	r0, [r0, #4]
   d59c0:	461a      	mov	r2, r3
   d59c2:	4619      	mov	r1, r3
   d59c4:	f7ff bb6a 	b.w	d509c <network_off>

000d59c8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d59c8:	6840      	ldr	r0, [r0, #4]
   d59ca:	2100      	movs	r1, #0
   d59cc:	f7ff bb8e 	b.w	d50ec <network_is_on>

000d59d0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d59d0:	6840      	ldr	r0, [r0, #4]
   d59d2:	2100      	movs	r1, #0
   d59d4:	f7ff bb92 	b.w	d50fc <network_is_off>

000d59d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d59d8:	6840      	ldr	r0, [r0, #4]
   d59da:	2200      	movs	r2, #0
   d59dc:	f081 0101 	eor.w	r1, r1, #1
   d59e0:	f7ff bb64 	b.w	d50ac <network_listen>

000d59e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d59e4:	6840      	ldr	r0, [r0, #4]
   d59e6:	2200      	movs	r2, #0
   d59e8:	f7ff bb70 	b.w	d50cc <network_set_listen_timeout>

000d59ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d59ec:	2200      	movs	r2, #0
   d59ee:	6840      	ldr	r0, [r0, #4]
   d59f0:	4611      	mov	r1, r2
   d59f2:	f7ff bb73 	b.w	d50dc <network_get_listen_timeout>

000d59f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d59f6:	2200      	movs	r2, #0
   d59f8:	6840      	ldr	r0, [r0, #4]
   d59fa:	4611      	mov	r1, r2
   d59fc:	f7ff bb5e 	b.w	d50bc <network_listening>

000d5a00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a04:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5a06:	b095      	sub	sp, #84	; 0x54
   d5a08:	4616      	mov	r6, r2
   d5a0a:	460d      	mov	r5, r1
   d5a0c:	4607      	mov	r7, r0
    IPAddress addr;
   d5a0e:	f7ff fdbd 	bl	d558c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5a12:	4621      	mov	r1, r4
   d5a14:	2218      	movs	r2, #24
   d5a16:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5a18:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5a1a:	f000 fd75 	bl	d6508 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5a1e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5a20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5a24:	4621      	mov	r1, r4
   d5a26:	466b      	mov	r3, sp
   d5a28:	aa0c      	add	r2, sp, #48	; 0x30
   d5a2a:	4630      	mov	r0, r6
   d5a2c:	f7ff f952 	bl	d4cd4 <netdb_getaddrinfo>
    if (!r) {
   d5a30:	4604      	mov	r4, r0
   d5a32:	2800      	cmp	r0, #0
   d5a34:	d146      	bne.n	d5ac4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a36:	4602      	mov	r2, r0
   d5a38:	2101      	movs	r1, #1
   d5a3a:	6868      	ldr	r0, [r5, #4]
   d5a3c:	f7ff fb1e 	bl	d507c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a40:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5a42:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a44:	4622      	mov	r2, r4
   d5a46:	6868      	ldr	r0, [r5, #4]
   d5a48:	f7ff fb18 	bl	d507c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a4c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5a4e:	4681      	mov	r9, r0
        bool ok = false;
   d5a50:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a52:	2e00      	cmp	r6, #0
   d5a54:	d036      	beq.n	d5ac4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5a56:	2900      	cmp	r1, #0
   d5a58:	d134      	bne.n	d5ac4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5a5a:	6873      	ldr	r3, [r6, #4]
   d5a5c:	2b02      	cmp	r3, #2
   d5a5e:	d003      	beq.n	d5a68 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5a60:	2b0a      	cmp	r3, #10
   d5a62:	d00b      	beq.n	d5a7c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5a64:	69f6      	ldr	r6, [r6, #28]
   d5a66:	e7f4      	b.n	d5a52 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5a68:	f1b8 0f00 	cmp.w	r8, #0
   d5a6c:	d004      	beq.n	d5a78 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5a6e:	6971      	ldr	r1, [r6, #20]
   d5a70:	4638      	mov	r0, r7
   d5a72:	3104      	adds	r1, #4
   d5a74:	f7ff fdb7 	bl	d55e6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5a78:	4641      	mov	r1, r8
   d5a7a:	e7f3      	b.n	d5a64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5a7c:	f1b9 0f00 	cmp.w	r9, #0
   d5a80:	d101      	bne.n	d5a86 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5a82:	4649      	mov	r1, r9
   d5a84:	e7ee      	b.n	d5a64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5a86:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5a88:	2210      	movs	r2, #16
   d5a8a:	a801      	add	r0, sp, #4
   d5a8c:	f000 fd3c 	bl	d6508 <memset>
                    a.v = 6;
   d5a90:	2306      	movs	r3, #6
   d5a92:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5a96:	ad01      	add	r5, sp, #4
   d5a98:	f104 0308 	add.w	r3, r4, #8
   d5a9c:	3418      	adds	r4, #24
   d5a9e:	6818      	ldr	r0, [r3, #0]
   d5aa0:	6859      	ldr	r1, [r3, #4]
   d5aa2:	462a      	mov	r2, r5
   d5aa4:	c203      	stmia	r2!, {r0, r1}
   d5aa6:	3308      	adds	r3, #8
   d5aa8:	42a3      	cmp	r3, r4
   d5aaa:	4615      	mov	r5, r2
   d5aac:	d1f7      	bne.n	d5a9e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5aae:	a901      	add	r1, sp, #4
   d5ab0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5ab2:	ad07      	add	r5, sp, #28
   d5ab4:	f7ff fd78 	bl	d55a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5aba:	1d3c      	adds	r4, r7, #4
   d5abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5abe:	682b      	ldr	r3, [r5, #0]
   d5ac0:	7023      	strb	r3, [r4, #0]
   d5ac2:	e7de      	b.n	d5a82 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5ac4:	9800      	ldr	r0, [sp, #0]
   d5ac6:	f7ff f8fd 	bl	d4cc4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5aca:	4638      	mov	r0, r7
   d5acc:	b015      	add	sp, #84	; 0x54
   d5ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5ad4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5ad4:	4b02      	ldr	r3, [pc, #8]	; (d5ae0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5ad6:	4a03      	ldr	r2, [pc, #12]	; (d5ae4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5ad8:	601a      	str	r2, [r3, #0]
   d5ada:	2200      	movs	r2, #0
   d5adc:	605a      	str	r2, [r3, #4]

} // spark
   d5ade:	4770      	bx	lr
   d5ae0:	2003e7c0 	.word	0x2003e7c0
   d5ae4:	000d67f4 	.word	0x000d67f4

000d5ae8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5ae8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5aea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5aec:	d902      	bls.n	d5af4 <pinAvailable+0xc>
    return false;
   d5aee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5af0:	b002      	add	sp, #8
   d5af2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5af4:	f1a0 030b 	sub.w	r3, r0, #11
   d5af8:	2b02      	cmp	r3, #2
   d5afa:	d81a      	bhi.n	d5b32 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5afc:	4c17      	ldr	r4, [pc, #92]	; (d5b5c <pinAvailable+0x74>)
   d5afe:	7821      	ldrb	r1, [r4, #0]
   d5b00:	f3bf 8f5b 	dmb	ish
   d5b04:	f011 0101 	ands.w	r1, r1, #1
   d5b08:	d10b      	bne.n	d5b22 <pinAvailable+0x3a>
   d5b0a:	4620      	mov	r0, r4
   d5b0c:	9101      	str	r1, [sp, #4]
   d5b0e:	f7fe fac6 	bl	d409e <__cxa_guard_acquire>
   d5b12:	9901      	ldr	r1, [sp, #4]
   d5b14:	b128      	cbz	r0, d5b22 <pinAvailable+0x3a>
   d5b16:	4812      	ldr	r0, [pc, #72]	; (d5b60 <pinAvailable+0x78>)
   d5b18:	f7ff fb66 	bl	d51e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5b1c:	4620      	mov	r0, r4
   d5b1e:	f7fe fac3 	bl	d40a8 <__cxa_guard_release>
   d5b22:	4b0f      	ldr	r3, [pc, #60]	; (d5b60 <pinAvailable+0x78>)
   d5b24:	7818      	ldrb	r0, [r3, #0]
   d5b26:	f7ff fa15 	bl	d4f54 <hal_spi_is_enabled>
   d5b2a:	2800      	cmp	r0, #0
   d5b2c:	d1df      	bne.n	d5aee <pinAvailable+0x6>
  return true; // 'pin' is available
   d5b2e:	2001      	movs	r0, #1
   d5b30:	e7de      	b.n	d5af0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5b32:	2801      	cmp	r0, #1
   d5b34:	d809      	bhi.n	d5b4a <pinAvailable+0x62>
   d5b36:	f000 f83f 	bl	d5bb8 <_Z19__fetch_global_Wirev>
   d5b3a:	2100      	movs	r1, #0
   d5b3c:	7c00      	ldrb	r0, [r0, #16]
   d5b3e:	f7ff f9f1 	bl	d4f24 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5b42:	f080 0001 	eor.w	r0, r0, #1
   d5b46:	b2c0      	uxtb	r0, r0
   d5b48:	e7d2      	b.n	d5af0 <pinAvailable+0x8>
   d5b4a:	3809      	subs	r0, #9
   d5b4c:	2801      	cmp	r0, #1
   d5b4e:	d8ee      	bhi.n	d5b2e <pinAvailable+0x46>
   d5b50:	f7ff fe5e 	bl	d5810 <_Z22__fetch_global_Serial1v>
   d5b54:	7c00      	ldrb	r0, [r0, #16]
   d5b56:	f7ff f9ad 	bl	d4eb4 <hal_usart_is_enabled>
   d5b5a:	e7f2      	b.n	d5b42 <pinAvailable+0x5a>
   d5b5c:	2003e7c8 	.word	0x2003e7c8
   d5b60:	2003e7cc 	.word	0x2003e7cc

000d5b64 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5b64:	2823      	cmp	r0, #35	; 0x23
{
   d5b66:	b538      	push	{r3, r4, r5, lr}
   d5b68:	4604      	mov	r4, r0
   d5b6a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5b6c:	d80a      	bhi.n	d5b84 <pinMode+0x20>
   d5b6e:	29ff      	cmp	r1, #255	; 0xff
   d5b70:	d008      	beq.n	d5b84 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5b72:	f7ff ffb9 	bl	d5ae8 <pinAvailable>
   d5b76:	b128      	cbz	r0, d5b84 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5b78:	4629      	mov	r1, r5
   d5b7a:	4620      	mov	r0, r4
}
   d5b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5b80:	f7ff b8b8 	b.w	d4cf4 <HAL_Pin_Mode>
}
   d5b84:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5b88 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5b88:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5b8a:	2300      	movs	r3, #0
   d5b8c:	2520      	movs	r5, #32
   d5b8e:	8043      	strh	r3, [r0, #2]
   d5b90:	2314      	movs	r3, #20
{
   d5b92:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5b94:	8003      	strh	r3, [r0, #0]
   d5b96:	6085      	str	r5, [r0, #8]
   d5b98:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5b9a:	4906      	ldr	r1, [pc, #24]	; (d5bb4 <_Z17acquireWireBufferv+0x2c>)
   d5b9c:	4628      	mov	r0, r5
   d5b9e:	f000 f83c 	bl	d5c1a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5ba2:	4904      	ldr	r1, [pc, #16]	; (d5bb4 <_Z17acquireWireBufferv+0x2c>)
	};
   d5ba4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5ba6:	4628      	mov	r0, r5
   d5ba8:	f000 f837 	bl	d5c1a <_ZnajRKSt9nothrow_t>
	};
   d5bac:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5bae:	4620      	mov	r0, r4
   d5bb0:	bd38      	pop	{r3, r4, r5, pc}
   d5bb2:	bf00      	nop
   d5bb4:	000d6828 	.word	0x000d6828

000d5bb8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5bb8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5bba:	4d0f      	ldr	r5, [pc, #60]	; (d5bf8 <_Z19__fetch_global_Wirev+0x40>)
   d5bbc:	7829      	ldrb	r1, [r5, #0]
   d5bbe:	f3bf 8f5b 	dmb	ish
   d5bc2:	f011 0401 	ands.w	r4, r1, #1
{
   d5bc6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5bc8:	d113      	bne.n	d5bf2 <_Z19__fetch_global_Wirev+0x3a>
   d5bca:	4628      	mov	r0, r5
   d5bcc:	f7fe fa67 	bl	d409e <__cxa_guard_acquire>
   d5bd0:	b178      	cbz	r0, d5bf2 <_Z19__fetch_global_Wirev+0x3a>
   d5bd2:	a801      	add	r0, sp, #4
   d5bd4:	f7ff ffd8 	bl	d5b88 <_Z17acquireWireBufferv>
   d5bd8:	aa01      	add	r2, sp, #4
   d5bda:	4621      	mov	r1, r4
   d5bdc:	4807      	ldr	r0, [pc, #28]	; (d5bfc <_Z19__fetch_global_Wirev+0x44>)
   d5bde:	f7ff fe6d 	bl	d58bc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5be2:	4628      	mov	r0, r5
   d5be4:	f7fe fa60 	bl	d40a8 <__cxa_guard_release>
   d5be8:	4a05      	ldr	r2, [pc, #20]	; (d5c00 <_Z19__fetch_global_Wirev+0x48>)
   d5bea:	4906      	ldr	r1, [pc, #24]	; (d5c04 <_Z19__fetch_global_Wirev+0x4c>)
   d5bec:	4803      	ldr	r0, [pc, #12]	; (d5bfc <_Z19__fetch_global_Wirev+0x44>)
   d5bee:	f000 f80b 	bl	d5c08 <__aeabi_atexit>
	return wire;
}
   d5bf2:	4802      	ldr	r0, [pc, #8]	; (d5bfc <_Z19__fetch_global_Wirev+0x44>)
   d5bf4:	b007      	add	sp, #28
   d5bf6:	bd30      	pop	{r4, r5, pc}
   d5bf8:	2003e7d8 	.word	0x2003e7d8
   d5bfc:	2003e7dc 	.word	0x2003e7dc
   d5c00:	2003e4e4 	.word	0x2003e4e4
   d5c04:	000d5865 	.word	0x000d5865

000d5c08 <__aeabi_atexit>:
   d5c08:	460b      	mov	r3, r1
   d5c0a:	4601      	mov	r1, r0
   d5c0c:	4618      	mov	r0, r3
   d5c0e:	f000 bc5f 	b.w	d64d0 <__cxa_atexit>

000d5c12 <_ZdlPvj>:
   d5c12:	f7fe ba42 	b.w	d409a <_ZdlPv>

000d5c16 <_ZnwjRKSt9nothrow_t>:
   d5c16:	f7fe ba3c 	b.w	d4092 <_Znwj>

000d5c1a <_ZnajRKSt9nothrow_t>:
   d5c1a:	f7fe ba3c 	b.w	d4096 <_Znaj>

000d5c1e <_ZSt25__throw_bad_function_callv>:
   d5c1e:	b508      	push	{r3, lr}
   d5c20:	f7ff fa94 	bl	d514c <abort>

000d5c24 <__aeabi_drsub>:
   d5c24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5c28:	e002      	b.n	d5c30 <__adddf3>
   d5c2a:	bf00      	nop

000d5c2c <__aeabi_dsub>:
   d5c2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5c30 <__adddf3>:
   d5c30:	b530      	push	{r4, r5, lr}
   d5c32:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5c36:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5c3a:	ea94 0f05 	teq	r4, r5
   d5c3e:	bf08      	it	eq
   d5c40:	ea90 0f02 	teqeq	r0, r2
   d5c44:	bf1f      	itttt	ne
   d5c46:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5c4a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5c4e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5c52:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5c56:	f000 80e2 	beq.w	d5e1e <__adddf3+0x1ee>
   d5c5a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5c5e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5c62:	bfb8      	it	lt
   d5c64:	426d      	neglt	r5, r5
   d5c66:	dd0c      	ble.n	d5c82 <__adddf3+0x52>
   d5c68:	442c      	add	r4, r5
   d5c6a:	ea80 0202 	eor.w	r2, r0, r2
   d5c6e:	ea81 0303 	eor.w	r3, r1, r3
   d5c72:	ea82 0000 	eor.w	r0, r2, r0
   d5c76:	ea83 0101 	eor.w	r1, r3, r1
   d5c7a:	ea80 0202 	eor.w	r2, r0, r2
   d5c7e:	ea81 0303 	eor.w	r3, r1, r3
   d5c82:	2d36      	cmp	r5, #54	; 0x36
   d5c84:	bf88      	it	hi
   d5c86:	bd30      	pophi	{r4, r5, pc}
   d5c88:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5c8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5c90:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5c94:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5c98:	d002      	beq.n	d5ca0 <__adddf3+0x70>
   d5c9a:	4240      	negs	r0, r0
   d5c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5ca0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5ca4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5ca8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5cac:	d002      	beq.n	d5cb4 <__adddf3+0x84>
   d5cae:	4252      	negs	r2, r2
   d5cb0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5cb4:	ea94 0f05 	teq	r4, r5
   d5cb8:	f000 80a7 	beq.w	d5e0a <__adddf3+0x1da>
   d5cbc:	f1a4 0401 	sub.w	r4, r4, #1
   d5cc0:	f1d5 0e20 	rsbs	lr, r5, #32
   d5cc4:	db0d      	blt.n	d5ce2 <__adddf3+0xb2>
   d5cc6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5cca:	fa22 f205 	lsr.w	r2, r2, r5
   d5cce:	1880      	adds	r0, r0, r2
   d5cd0:	f141 0100 	adc.w	r1, r1, #0
   d5cd4:	fa03 f20e 	lsl.w	r2, r3, lr
   d5cd8:	1880      	adds	r0, r0, r2
   d5cda:	fa43 f305 	asr.w	r3, r3, r5
   d5cde:	4159      	adcs	r1, r3
   d5ce0:	e00e      	b.n	d5d00 <__adddf3+0xd0>
   d5ce2:	f1a5 0520 	sub.w	r5, r5, #32
   d5ce6:	f10e 0e20 	add.w	lr, lr, #32
   d5cea:	2a01      	cmp	r2, #1
   d5cec:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5cf0:	bf28      	it	cs
   d5cf2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5cf6:	fa43 f305 	asr.w	r3, r3, r5
   d5cfa:	18c0      	adds	r0, r0, r3
   d5cfc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5d00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5d04:	d507      	bpl.n	d5d16 <__adddf3+0xe6>
   d5d06:	f04f 0e00 	mov.w	lr, #0
   d5d0a:	f1dc 0c00 	rsbs	ip, ip, #0
   d5d0e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5d12:	eb6e 0101 	sbc.w	r1, lr, r1
   d5d16:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5d1a:	d31b      	bcc.n	d5d54 <__adddf3+0x124>
   d5d1c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5d20:	d30c      	bcc.n	d5d3c <__adddf3+0x10c>
   d5d22:	0849      	lsrs	r1, r1, #1
   d5d24:	ea5f 0030 	movs.w	r0, r0, rrx
   d5d28:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5d2c:	f104 0401 	add.w	r4, r4, #1
   d5d30:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5d34:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5d38:	f080 809a 	bcs.w	d5e70 <__adddf3+0x240>
   d5d3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5d40:	bf08      	it	eq
   d5d42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5d46:	f150 0000 	adcs.w	r0, r0, #0
   d5d4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5d4e:	ea41 0105 	orr.w	r1, r1, r5
   d5d52:	bd30      	pop	{r4, r5, pc}
   d5d54:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5d58:	4140      	adcs	r0, r0
   d5d5a:	eb41 0101 	adc.w	r1, r1, r1
   d5d5e:	3c01      	subs	r4, #1
   d5d60:	bf28      	it	cs
   d5d62:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5d66:	d2e9      	bcs.n	d5d3c <__adddf3+0x10c>
   d5d68:	f091 0f00 	teq	r1, #0
   d5d6c:	bf04      	itt	eq
   d5d6e:	4601      	moveq	r1, r0
   d5d70:	2000      	moveq	r0, #0
   d5d72:	fab1 f381 	clz	r3, r1
   d5d76:	bf08      	it	eq
   d5d78:	3320      	addeq	r3, #32
   d5d7a:	f1a3 030b 	sub.w	r3, r3, #11
   d5d7e:	f1b3 0220 	subs.w	r2, r3, #32
   d5d82:	da0c      	bge.n	d5d9e <__adddf3+0x16e>
   d5d84:	320c      	adds	r2, #12
   d5d86:	dd08      	ble.n	d5d9a <__adddf3+0x16a>
   d5d88:	f102 0c14 	add.w	ip, r2, #20
   d5d8c:	f1c2 020c 	rsb	r2, r2, #12
   d5d90:	fa01 f00c 	lsl.w	r0, r1, ip
   d5d94:	fa21 f102 	lsr.w	r1, r1, r2
   d5d98:	e00c      	b.n	d5db4 <__adddf3+0x184>
   d5d9a:	f102 0214 	add.w	r2, r2, #20
   d5d9e:	bfd8      	it	le
   d5da0:	f1c2 0c20 	rsble	ip, r2, #32
   d5da4:	fa01 f102 	lsl.w	r1, r1, r2
   d5da8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5dac:	bfdc      	itt	le
   d5dae:	ea41 010c 	orrle.w	r1, r1, ip
   d5db2:	4090      	lslle	r0, r2
   d5db4:	1ae4      	subs	r4, r4, r3
   d5db6:	bfa2      	ittt	ge
   d5db8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5dbc:	4329      	orrge	r1, r5
   d5dbe:	bd30      	popge	{r4, r5, pc}
   d5dc0:	ea6f 0404 	mvn.w	r4, r4
   d5dc4:	3c1f      	subs	r4, #31
   d5dc6:	da1c      	bge.n	d5e02 <__adddf3+0x1d2>
   d5dc8:	340c      	adds	r4, #12
   d5dca:	dc0e      	bgt.n	d5dea <__adddf3+0x1ba>
   d5dcc:	f104 0414 	add.w	r4, r4, #20
   d5dd0:	f1c4 0220 	rsb	r2, r4, #32
   d5dd4:	fa20 f004 	lsr.w	r0, r0, r4
   d5dd8:	fa01 f302 	lsl.w	r3, r1, r2
   d5ddc:	ea40 0003 	orr.w	r0, r0, r3
   d5de0:	fa21 f304 	lsr.w	r3, r1, r4
   d5de4:	ea45 0103 	orr.w	r1, r5, r3
   d5de8:	bd30      	pop	{r4, r5, pc}
   d5dea:	f1c4 040c 	rsb	r4, r4, #12
   d5dee:	f1c4 0220 	rsb	r2, r4, #32
   d5df2:	fa20 f002 	lsr.w	r0, r0, r2
   d5df6:	fa01 f304 	lsl.w	r3, r1, r4
   d5dfa:	ea40 0003 	orr.w	r0, r0, r3
   d5dfe:	4629      	mov	r1, r5
   d5e00:	bd30      	pop	{r4, r5, pc}
   d5e02:	fa21 f004 	lsr.w	r0, r1, r4
   d5e06:	4629      	mov	r1, r5
   d5e08:	bd30      	pop	{r4, r5, pc}
   d5e0a:	f094 0f00 	teq	r4, #0
   d5e0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5e12:	bf06      	itte	eq
   d5e14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5e18:	3401      	addeq	r4, #1
   d5e1a:	3d01      	subne	r5, #1
   d5e1c:	e74e      	b.n	d5cbc <__adddf3+0x8c>
   d5e1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5e22:	bf18      	it	ne
   d5e24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5e28:	d029      	beq.n	d5e7e <__adddf3+0x24e>
   d5e2a:	ea94 0f05 	teq	r4, r5
   d5e2e:	bf08      	it	eq
   d5e30:	ea90 0f02 	teqeq	r0, r2
   d5e34:	d005      	beq.n	d5e42 <__adddf3+0x212>
   d5e36:	ea54 0c00 	orrs.w	ip, r4, r0
   d5e3a:	bf04      	itt	eq
   d5e3c:	4619      	moveq	r1, r3
   d5e3e:	4610      	moveq	r0, r2
   d5e40:	bd30      	pop	{r4, r5, pc}
   d5e42:	ea91 0f03 	teq	r1, r3
   d5e46:	bf1e      	ittt	ne
   d5e48:	2100      	movne	r1, #0
   d5e4a:	2000      	movne	r0, #0
   d5e4c:	bd30      	popne	{r4, r5, pc}
   d5e4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5e52:	d105      	bne.n	d5e60 <__adddf3+0x230>
   d5e54:	0040      	lsls	r0, r0, #1
   d5e56:	4149      	adcs	r1, r1
   d5e58:	bf28      	it	cs
   d5e5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5e5e:	bd30      	pop	{r4, r5, pc}
   d5e60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5e64:	bf3c      	itt	cc
   d5e66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5e6a:	bd30      	popcc	{r4, r5, pc}
   d5e6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5e74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5e78:	f04f 0000 	mov.w	r0, #0
   d5e7c:	bd30      	pop	{r4, r5, pc}
   d5e7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5e82:	bf1a      	itte	ne
   d5e84:	4619      	movne	r1, r3
   d5e86:	4610      	movne	r0, r2
   d5e88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5e8c:	bf1c      	itt	ne
   d5e8e:	460b      	movne	r3, r1
   d5e90:	4602      	movne	r2, r0
   d5e92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5e96:	bf06      	itte	eq
   d5e98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5e9c:	ea91 0f03 	teqeq	r1, r3
   d5ea0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5ea4:	bd30      	pop	{r4, r5, pc}
   d5ea6:	bf00      	nop

000d5ea8 <__aeabi_ui2d>:
   d5ea8:	f090 0f00 	teq	r0, #0
   d5eac:	bf04      	itt	eq
   d5eae:	2100      	moveq	r1, #0
   d5eb0:	4770      	bxeq	lr
   d5eb2:	b530      	push	{r4, r5, lr}
   d5eb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5eb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ebc:	f04f 0500 	mov.w	r5, #0
   d5ec0:	f04f 0100 	mov.w	r1, #0
   d5ec4:	e750      	b.n	d5d68 <__adddf3+0x138>
   d5ec6:	bf00      	nop

000d5ec8 <__aeabi_i2d>:
   d5ec8:	f090 0f00 	teq	r0, #0
   d5ecc:	bf04      	itt	eq
   d5ece:	2100      	moveq	r1, #0
   d5ed0:	4770      	bxeq	lr
   d5ed2:	b530      	push	{r4, r5, lr}
   d5ed4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ed8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5edc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5ee0:	bf48      	it	mi
   d5ee2:	4240      	negmi	r0, r0
   d5ee4:	f04f 0100 	mov.w	r1, #0
   d5ee8:	e73e      	b.n	d5d68 <__adddf3+0x138>
   d5eea:	bf00      	nop

000d5eec <__aeabi_f2d>:
   d5eec:	0042      	lsls	r2, r0, #1
   d5eee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5ef2:	ea4f 0131 	mov.w	r1, r1, rrx
   d5ef6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5efa:	bf1f      	itttt	ne
   d5efc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5f00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5f04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5f08:	4770      	bxne	lr
   d5f0a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5f0e:	bf08      	it	eq
   d5f10:	4770      	bxeq	lr
   d5f12:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5f16:	bf04      	itt	eq
   d5f18:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5f1c:	4770      	bxeq	lr
   d5f1e:	b530      	push	{r4, r5, lr}
   d5f20:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5f24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5f2c:	e71c      	b.n	d5d68 <__adddf3+0x138>
   d5f2e:	bf00      	nop

000d5f30 <__aeabi_ul2d>:
   d5f30:	ea50 0201 	orrs.w	r2, r0, r1
   d5f34:	bf08      	it	eq
   d5f36:	4770      	bxeq	lr
   d5f38:	b530      	push	{r4, r5, lr}
   d5f3a:	f04f 0500 	mov.w	r5, #0
   d5f3e:	e00a      	b.n	d5f56 <__aeabi_l2d+0x16>

000d5f40 <__aeabi_l2d>:
   d5f40:	ea50 0201 	orrs.w	r2, r0, r1
   d5f44:	bf08      	it	eq
   d5f46:	4770      	bxeq	lr
   d5f48:	b530      	push	{r4, r5, lr}
   d5f4a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5f4e:	d502      	bpl.n	d5f56 <__aeabi_l2d+0x16>
   d5f50:	4240      	negs	r0, r0
   d5f52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5f56:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f5a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f5e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5f62:	f43f aed8 	beq.w	d5d16 <__adddf3+0xe6>
   d5f66:	f04f 0203 	mov.w	r2, #3
   d5f6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5f6e:	bf18      	it	ne
   d5f70:	3203      	addne	r2, #3
   d5f72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5f76:	bf18      	it	ne
   d5f78:	3203      	addne	r2, #3
   d5f7a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5f7e:	f1c2 0320 	rsb	r3, r2, #32
   d5f82:	fa00 fc03 	lsl.w	ip, r0, r3
   d5f86:	fa20 f002 	lsr.w	r0, r0, r2
   d5f8a:	fa01 fe03 	lsl.w	lr, r1, r3
   d5f8e:	ea40 000e 	orr.w	r0, r0, lr
   d5f92:	fa21 f102 	lsr.w	r1, r1, r2
   d5f96:	4414      	add	r4, r2
   d5f98:	e6bd      	b.n	d5d16 <__adddf3+0xe6>
   d5f9a:	bf00      	nop

000d5f9c <__aeabi_dmul>:
   d5f9c:	b570      	push	{r4, r5, r6, lr}
   d5f9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5fa2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5fa6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5faa:	bf1d      	ittte	ne
   d5fac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5fb0:	ea94 0f0c 	teqne	r4, ip
   d5fb4:	ea95 0f0c 	teqne	r5, ip
   d5fb8:	f000 f8de 	bleq	d6178 <__aeabi_dmul+0x1dc>
   d5fbc:	442c      	add	r4, r5
   d5fbe:	ea81 0603 	eor.w	r6, r1, r3
   d5fc2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5fc6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5fca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5fce:	bf18      	it	ne
   d5fd0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5fd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5fd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5fdc:	d038      	beq.n	d6050 <__aeabi_dmul+0xb4>
   d5fde:	fba0 ce02 	umull	ip, lr, r0, r2
   d5fe2:	f04f 0500 	mov.w	r5, #0
   d5fe6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5fea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5fee:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5ff2:	f04f 0600 	mov.w	r6, #0
   d5ff6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5ffa:	f09c 0f00 	teq	ip, #0
   d5ffe:	bf18      	it	ne
   d6000:	f04e 0e01 	orrne.w	lr, lr, #1
   d6004:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6008:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d600c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6010:	d204      	bcs.n	d601c <__aeabi_dmul+0x80>
   d6012:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6016:	416d      	adcs	r5, r5
   d6018:	eb46 0606 	adc.w	r6, r6, r6
   d601c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6020:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6024:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6028:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d602c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6030:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6034:	bf88      	it	hi
   d6036:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d603a:	d81e      	bhi.n	d607a <__aeabi_dmul+0xde>
   d603c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6040:	bf08      	it	eq
   d6042:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6046:	f150 0000 	adcs.w	r0, r0, #0
   d604a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d604e:	bd70      	pop	{r4, r5, r6, pc}
   d6050:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6054:	ea46 0101 	orr.w	r1, r6, r1
   d6058:	ea40 0002 	orr.w	r0, r0, r2
   d605c:	ea81 0103 	eor.w	r1, r1, r3
   d6060:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6064:	bfc2      	ittt	gt
   d6066:	ebd4 050c 	rsbsgt	r5, r4, ip
   d606a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d606e:	bd70      	popgt	{r4, r5, r6, pc}
   d6070:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6074:	f04f 0e00 	mov.w	lr, #0
   d6078:	3c01      	subs	r4, #1
   d607a:	f300 80ab 	bgt.w	d61d4 <__aeabi_dmul+0x238>
   d607e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6082:	bfde      	ittt	le
   d6084:	2000      	movle	r0, #0
   d6086:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d608a:	bd70      	pople	{r4, r5, r6, pc}
   d608c:	f1c4 0400 	rsb	r4, r4, #0
   d6090:	3c20      	subs	r4, #32
   d6092:	da35      	bge.n	d6100 <__aeabi_dmul+0x164>
   d6094:	340c      	adds	r4, #12
   d6096:	dc1b      	bgt.n	d60d0 <__aeabi_dmul+0x134>
   d6098:	f104 0414 	add.w	r4, r4, #20
   d609c:	f1c4 0520 	rsb	r5, r4, #32
   d60a0:	fa00 f305 	lsl.w	r3, r0, r5
   d60a4:	fa20 f004 	lsr.w	r0, r0, r4
   d60a8:	fa01 f205 	lsl.w	r2, r1, r5
   d60ac:	ea40 0002 	orr.w	r0, r0, r2
   d60b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d60b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d60b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d60bc:	fa21 f604 	lsr.w	r6, r1, r4
   d60c0:	eb42 0106 	adc.w	r1, r2, r6
   d60c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d60c8:	bf08      	it	eq
   d60ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d60ce:	bd70      	pop	{r4, r5, r6, pc}
   d60d0:	f1c4 040c 	rsb	r4, r4, #12
   d60d4:	f1c4 0520 	rsb	r5, r4, #32
   d60d8:	fa00 f304 	lsl.w	r3, r0, r4
   d60dc:	fa20 f005 	lsr.w	r0, r0, r5
   d60e0:	fa01 f204 	lsl.w	r2, r1, r4
   d60e4:	ea40 0002 	orr.w	r0, r0, r2
   d60e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d60ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d60f0:	f141 0100 	adc.w	r1, r1, #0
   d60f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d60f8:	bf08      	it	eq
   d60fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d60fe:	bd70      	pop	{r4, r5, r6, pc}
   d6100:	f1c4 0520 	rsb	r5, r4, #32
   d6104:	fa00 f205 	lsl.w	r2, r0, r5
   d6108:	ea4e 0e02 	orr.w	lr, lr, r2
   d610c:	fa20 f304 	lsr.w	r3, r0, r4
   d6110:	fa01 f205 	lsl.w	r2, r1, r5
   d6114:	ea43 0302 	orr.w	r3, r3, r2
   d6118:	fa21 f004 	lsr.w	r0, r1, r4
   d611c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6120:	fa21 f204 	lsr.w	r2, r1, r4
   d6124:	ea20 0002 	bic.w	r0, r0, r2
   d6128:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d612c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6130:	bf08      	it	eq
   d6132:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6136:	bd70      	pop	{r4, r5, r6, pc}
   d6138:	f094 0f00 	teq	r4, #0
   d613c:	d10f      	bne.n	d615e <__aeabi_dmul+0x1c2>
   d613e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6142:	0040      	lsls	r0, r0, #1
   d6144:	eb41 0101 	adc.w	r1, r1, r1
   d6148:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d614c:	bf08      	it	eq
   d614e:	3c01      	subeq	r4, #1
   d6150:	d0f7      	beq.n	d6142 <__aeabi_dmul+0x1a6>
   d6152:	ea41 0106 	orr.w	r1, r1, r6
   d6156:	f095 0f00 	teq	r5, #0
   d615a:	bf18      	it	ne
   d615c:	4770      	bxne	lr
   d615e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6162:	0052      	lsls	r2, r2, #1
   d6164:	eb43 0303 	adc.w	r3, r3, r3
   d6168:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d616c:	bf08      	it	eq
   d616e:	3d01      	subeq	r5, #1
   d6170:	d0f7      	beq.n	d6162 <__aeabi_dmul+0x1c6>
   d6172:	ea43 0306 	orr.w	r3, r3, r6
   d6176:	4770      	bx	lr
   d6178:	ea94 0f0c 	teq	r4, ip
   d617c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6180:	bf18      	it	ne
   d6182:	ea95 0f0c 	teqne	r5, ip
   d6186:	d00c      	beq.n	d61a2 <__aeabi_dmul+0x206>
   d6188:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d618c:	bf18      	it	ne
   d618e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6192:	d1d1      	bne.n	d6138 <__aeabi_dmul+0x19c>
   d6194:	ea81 0103 	eor.w	r1, r1, r3
   d6198:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d619c:	f04f 0000 	mov.w	r0, #0
   d61a0:	bd70      	pop	{r4, r5, r6, pc}
   d61a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d61a6:	bf06      	itte	eq
   d61a8:	4610      	moveq	r0, r2
   d61aa:	4619      	moveq	r1, r3
   d61ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d61b0:	d019      	beq.n	d61e6 <__aeabi_dmul+0x24a>
   d61b2:	ea94 0f0c 	teq	r4, ip
   d61b6:	d102      	bne.n	d61be <__aeabi_dmul+0x222>
   d61b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d61bc:	d113      	bne.n	d61e6 <__aeabi_dmul+0x24a>
   d61be:	ea95 0f0c 	teq	r5, ip
   d61c2:	d105      	bne.n	d61d0 <__aeabi_dmul+0x234>
   d61c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d61c8:	bf1c      	itt	ne
   d61ca:	4610      	movne	r0, r2
   d61cc:	4619      	movne	r1, r3
   d61ce:	d10a      	bne.n	d61e6 <__aeabi_dmul+0x24a>
   d61d0:	ea81 0103 	eor.w	r1, r1, r3
   d61d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d61d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d61dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d61e0:	f04f 0000 	mov.w	r0, #0
   d61e4:	bd70      	pop	{r4, r5, r6, pc}
   d61e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d61ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d61ee:	bd70      	pop	{r4, r5, r6, pc}

000d61f0 <__aeabi_ddiv>:
   d61f0:	b570      	push	{r4, r5, r6, lr}
   d61f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d61f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d61fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d61fe:	bf1d      	ittte	ne
   d6200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6204:	ea94 0f0c 	teqne	r4, ip
   d6208:	ea95 0f0c 	teqne	r5, ip
   d620c:	f000 f8a7 	bleq	d635e <__aeabi_ddiv+0x16e>
   d6210:	eba4 0405 	sub.w	r4, r4, r5
   d6214:	ea81 0e03 	eor.w	lr, r1, r3
   d6218:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d621c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6220:	f000 8088 	beq.w	d6334 <__aeabi_ddiv+0x144>
   d6224:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6228:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d622c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6230:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6234:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6238:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d623c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6240:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6244:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6248:	429d      	cmp	r5, r3
   d624a:	bf08      	it	eq
   d624c:	4296      	cmpeq	r6, r2
   d624e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6252:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6256:	d202      	bcs.n	d625e <__aeabi_ddiv+0x6e>
   d6258:	085b      	lsrs	r3, r3, #1
   d625a:	ea4f 0232 	mov.w	r2, r2, rrx
   d625e:	1ab6      	subs	r6, r6, r2
   d6260:	eb65 0503 	sbc.w	r5, r5, r3
   d6264:	085b      	lsrs	r3, r3, #1
   d6266:	ea4f 0232 	mov.w	r2, r2, rrx
   d626a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d626e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6272:	ebb6 0e02 	subs.w	lr, r6, r2
   d6276:	eb75 0e03 	sbcs.w	lr, r5, r3
   d627a:	bf22      	ittt	cs
   d627c:	1ab6      	subcs	r6, r6, r2
   d627e:	4675      	movcs	r5, lr
   d6280:	ea40 000c 	orrcs.w	r0, r0, ip
   d6284:	085b      	lsrs	r3, r3, #1
   d6286:	ea4f 0232 	mov.w	r2, r2, rrx
   d628a:	ebb6 0e02 	subs.w	lr, r6, r2
   d628e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6292:	bf22      	ittt	cs
   d6294:	1ab6      	subcs	r6, r6, r2
   d6296:	4675      	movcs	r5, lr
   d6298:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d629c:	085b      	lsrs	r3, r3, #1
   d629e:	ea4f 0232 	mov.w	r2, r2, rrx
   d62a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d62a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d62aa:	bf22      	ittt	cs
   d62ac:	1ab6      	subcs	r6, r6, r2
   d62ae:	4675      	movcs	r5, lr
   d62b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d62b4:	085b      	lsrs	r3, r3, #1
   d62b6:	ea4f 0232 	mov.w	r2, r2, rrx
   d62ba:	ebb6 0e02 	subs.w	lr, r6, r2
   d62be:	eb75 0e03 	sbcs.w	lr, r5, r3
   d62c2:	bf22      	ittt	cs
   d62c4:	1ab6      	subcs	r6, r6, r2
   d62c6:	4675      	movcs	r5, lr
   d62c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d62cc:	ea55 0e06 	orrs.w	lr, r5, r6
   d62d0:	d018      	beq.n	d6304 <__aeabi_ddiv+0x114>
   d62d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d62d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d62da:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d62de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d62e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d62e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d62ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d62ee:	d1c0      	bne.n	d6272 <__aeabi_ddiv+0x82>
   d62f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d62f4:	d10b      	bne.n	d630e <__aeabi_ddiv+0x11e>
   d62f6:	ea41 0100 	orr.w	r1, r1, r0
   d62fa:	f04f 0000 	mov.w	r0, #0
   d62fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d6302:	e7b6      	b.n	d6272 <__aeabi_ddiv+0x82>
   d6304:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6308:	bf04      	itt	eq
   d630a:	4301      	orreq	r1, r0
   d630c:	2000      	moveq	r0, #0
   d630e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6312:	bf88      	it	hi
   d6314:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6318:	f63f aeaf 	bhi.w	d607a <__aeabi_dmul+0xde>
   d631c:	ebb5 0c03 	subs.w	ip, r5, r3
   d6320:	bf04      	itt	eq
   d6322:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d632a:	f150 0000 	adcs.w	r0, r0, #0
   d632e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6332:	bd70      	pop	{r4, r5, r6, pc}
   d6334:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6338:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d633c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6340:	bfc2      	ittt	gt
   d6342:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6346:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d634a:	bd70      	popgt	{r4, r5, r6, pc}
   d634c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6350:	f04f 0e00 	mov.w	lr, #0
   d6354:	3c01      	subs	r4, #1
   d6356:	e690      	b.n	d607a <__aeabi_dmul+0xde>
   d6358:	ea45 0e06 	orr.w	lr, r5, r6
   d635c:	e68d      	b.n	d607a <__aeabi_dmul+0xde>
   d635e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6362:	ea94 0f0c 	teq	r4, ip
   d6366:	bf08      	it	eq
   d6368:	ea95 0f0c 	teqeq	r5, ip
   d636c:	f43f af3b 	beq.w	d61e6 <__aeabi_dmul+0x24a>
   d6370:	ea94 0f0c 	teq	r4, ip
   d6374:	d10a      	bne.n	d638c <__aeabi_ddiv+0x19c>
   d6376:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d637a:	f47f af34 	bne.w	d61e6 <__aeabi_dmul+0x24a>
   d637e:	ea95 0f0c 	teq	r5, ip
   d6382:	f47f af25 	bne.w	d61d0 <__aeabi_dmul+0x234>
   d6386:	4610      	mov	r0, r2
   d6388:	4619      	mov	r1, r3
   d638a:	e72c      	b.n	d61e6 <__aeabi_dmul+0x24a>
   d638c:	ea95 0f0c 	teq	r5, ip
   d6390:	d106      	bne.n	d63a0 <__aeabi_ddiv+0x1b0>
   d6392:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6396:	f43f aefd 	beq.w	d6194 <__aeabi_dmul+0x1f8>
   d639a:	4610      	mov	r0, r2
   d639c:	4619      	mov	r1, r3
   d639e:	e722      	b.n	d61e6 <__aeabi_dmul+0x24a>
   d63a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d63a4:	bf18      	it	ne
   d63a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d63aa:	f47f aec5 	bne.w	d6138 <__aeabi_dmul+0x19c>
   d63ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d63b2:	f47f af0d 	bne.w	d61d0 <__aeabi_dmul+0x234>
   d63b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d63ba:	f47f aeeb 	bne.w	d6194 <__aeabi_dmul+0x1f8>
   d63be:	e712      	b.n	d61e6 <__aeabi_dmul+0x24a>

000d63c0 <__gedf2>:
   d63c0:	f04f 3cff 	mov.w	ip, #4294967295
   d63c4:	e006      	b.n	d63d4 <__cmpdf2+0x4>
   d63c6:	bf00      	nop

000d63c8 <__ledf2>:
   d63c8:	f04f 0c01 	mov.w	ip, #1
   d63cc:	e002      	b.n	d63d4 <__cmpdf2+0x4>
   d63ce:	bf00      	nop

000d63d0 <__cmpdf2>:
   d63d0:	f04f 0c01 	mov.w	ip, #1
   d63d4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d63d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d63dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d63e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d63e4:	bf18      	it	ne
   d63e6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d63ea:	d01b      	beq.n	d6424 <__cmpdf2+0x54>
   d63ec:	b001      	add	sp, #4
   d63ee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d63f2:	bf0c      	ite	eq
   d63f4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d63f8:	ea91 0f03 	teqne	r1, r3
   d63fc:	bf02      	ittt	eq
   d63fe:	ea90 0f02 	teqeq	r0, r2
   d6402:	2000      	moveq	r0, #0
   d6404:	4770      	bxeq	lr
   d6406:	f110 0f00 	cmn.w	r0, #0
   d640a:	ea91 0f03 	teq	r1, r3
   d640e:	bf58      	it	pl
   d6410:	4299      	cmppl	r1, r3
   d6412:	bf08      	it	eq
   d6414:	4290      	cmpeq	r0, r2
   d6416:	bf2c      	ite	cs
   d6418:	17d8      	asrcs	r0, r3, #31
   d641a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d641e:	f040 0001 	orr.w	r0, r0, #1
   d6422:	4770      	bx	lr
   d6424:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6428:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d642c:	d102      	bne.n	d6434 <__cmpdf2+0x64>
   d642e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6432:	d107      	bne.n	d6444 <__cmpdf2+0x74>
   d6434:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6438:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d643c:	d1d6      	bne.n	d63ec <__cmpdf2+0x1c>
   d643e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6442:	d0d3      	beq.n	d63ec <__cmpdf2+0x1c>
   d6444:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6448:	4770      	bx	lr
   d644a:	bf00      	nop

000d644c <__aeabi_cdrcmple>:
   d644c:	4684      	mov	ip, r0
   d644e:	4610      	mov	r0, r2
   d6450:	4662      	mov	r2, ip
   d6452:	468c      	mov	ip, r1
   d6454:	4619      	mov	r1, r3
   d6456:	4663      	mov	r3, ip
   d6458:	e000      	b.n	d645c <__aeabi_cdcmpeq>
   d645a:	bf00      	nop

000d645c <__aeabi_cdcmpeq>:
   d645c:	b501      	push	{r0, lr}
   d645e:	f7ff ffb7 	bl	d63d0 <__cmpdf2>
   d6462:	2800      	cmp	r0, #0
   d6464:	bf48      	it	mi
   d6466:	f110 0f00 	cmnmi.w	r0, #0
   d646a:	bd01      	pop	{r0, pc}

000d646c <__aeabi_dcmpeq>:
   d646c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6470:	f7ff fff4 	bl	d645c <__aeabi_cdcmpeq>
   d6474:	bf0c      	ite	eq
   d6476:	2001      	moveq	r0, #1
   d6478:	2000      	movne	r0, #0
   d647a:	f85d fb08 	ldr.w	pc, [sp], #8
   d647e:	bf00      	nop

000d6480 <__aeabi_dcmplt>:
   d6480:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6484:	f7ff ffea 	bl	d645c <__aeabi_cdcmpeq>
   d6488:	bf34      	ite	cc
   d648a:	2001      	movcc	r0, #1
   d648c:	2000      	movcs	r0, #0
   d648e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6492:	bf00      	nop

000d6494 <__aeabi_dcmple>:
   d6494:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6498:	f7ff ffe0 	bl	d645c <__aeabi_cdcmpeq>
   d649c:	bf94      	ite	ls
   d649e:	2001      	movls	r0, #1
   d64a0:	2000      	movhi	r0, #0
   d64a2:	f85d fb08 	ldr.w	pc, [sp], #8
   d64a6:	bf00      	nop

000d64a8 <__aeabi_dcmpge>:
   d64a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d64ac:	f7ff ffce 	bl	d644c <__aeabi_cdrcmple>
   d64b0:	bf94      	ite	ls
   d64b2:	2001      	movls	r0, #1
   d64b4:	2000      	movhi	r0, #0
   d64b6:	f85d fb08 	ldr.w	pc, [sp], #8
   d64ba:	bf00      	nop

000d64bc <__aeabi_dcmpgt>:
   d64bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d64c0:	f7ff ffc4 	bl	d644c <__aeabi_cdrcmple>
   d64c4:	bf34      	ite	cc
   d64c6:	2001      	movcc	r0, #1
   d64c8:	2000      	movcs	r0, #0
   d64ca:	f85d fb08 	ldr.w	pc, [sp], #8
   d64ce:	bf00      	nop

000d64d0 <__cxa_atexit>:
   d64d0:	b510      	push	{r4, lr}
   d64d2:	4c05      	ldr	r4, [pc, #20]	; (d64e8 <__cxa_atexit+0x18>)
   d64d4:	4613      	mov	r3, r2
   d64d6:	b12c      	cbz	r4, d64e4 <__cxa_atexit+0x14>
   d64d8:	460a      	mov	r2, r1
   d64da:	4601      	mov	r1, r0
   d64dc:	2002      	movs	r0, #2
   d64de:	f3af 8000 	nop.w
   d64e2:	bd10      	pop	{r4, pc}
   d64e4:	4620      	mov	r0, r4
   d64e6:	e7fc      	b.n	d64e2 <__cxa_atexit+0x12>
   d64e8:	00000000 	.word	0x00000000

000d64ec <memcpy>:
   d64ec:	440a      	add	r2, r1
   d64ee:	4291      	cmp	r1, r2
   d64f0:	f100 33ff 	add.w	r3, r0, #4294967295
   d64f4:	d100      	bne.n	d64f8 <memcpy+0xc>
   d64f6:	4770      	bx	lr
   d64f8:	b510      	push	{r4, lr}
   d64fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d64fe:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6502:	4291      	cmp	r1, r2
   d6504:	d1f9      	bne.n	d64fa <memcpy+0xe>
   d6506:	bd10      	pop	{r4, pc}

000d6508 <memset>:
   d6508:	4402      	add	r2, r0
   d650a:	4603      	mov	r3, r0
   d650c:	4293      	cmp	r3, r2
   d650e:	d100      	bne.n	d6512 <memset+0xa>
   d6510:	4770      	bx	lr
   d6512:	f803 1b01 	strb.w	r1, [r3], #1
   d6516:	e7f9      	b.n	d650c <memset+0x4>

000d6518 <srand>:
   d6518:	b538      	push	{r3, r4, r5, lr}
   d651a:	4b0d      	ldr	r3, [pc, #52]	; (d6550 <srand+0x38>)
   d651c:	681d      	ldr	r5, [r3, #0]
   d651e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6520:	4604      	mov	r4, r0
   d6522:	b97b      	cbnz	r3, d6544 <srand+0x2c>
   d6524:	2018      	movs	r0, #24
   d6526:	f7fe fdf9 	bl	d511c <malloc>
   d652a:	4a0a      	ldr	r2, [pc, #40]	; (d6554 <srand+0x3c>)
   d652c:	4b0a      	ldr	r3, [pc, #40]	; (d6558 <srand+0x40>)
   d652e:	63a8      	str	r0, [r5, #56]	; 0x38
   d6530:	e9c0 2300 	strd	r2, r3, [r0]
   d6534:	4b09      	ldr	r3, [pc, #36]	; (d655c <srand+0x44>)
   d6536:	6083      	str	r3, [r0, #8]
   d6538:	230b      	movs	r3, #11
   d653a:	8183      	strh	r3, [r0, #12]
   d653c:	2201      	movs	r2, #1
   d653e:	2300      	movs	r3, #0
   d6540:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6544:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6546:	2200      	movs	r2, #0
   d6548:	611c      	str	r4, [r3, #16]
   d654a:	615a      	str	r2, [r3, #20]
   d654c:	bd38      	pop	{r3, r4, r5, pc}
   d654e:	bf00      	nop
   d6550:	2003e480 	.word	0x2003e480
   d6554:	abcd330e 	.word	0xabcd330e
   d6558:	e66d1234 	.word	0xe66d1234
   d655c:	0005deec 	.word	0x0005deec

000d6560 <rand>:
   d6560:	4b13      	ldr	r3, [pc, #76]	; (d65b0 <rand+0x50>)
   d6562:	b510      	push	{r4, lr}
   d6564:	681c      	ldr	r4, [r3, #0]
   d6566:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6568:	b97b      	cbnz	r3, d658a <rand+0x2a>
   d656a:	2018      	movs	r0, #24
   d656c:	f7fe fdd6 	bl	d511c <malloc>
   d6570:	4a10      	ldr	r2, [pc, #64]	; (d65b4 <rand+0x54>)
   d6572:	4b11      	ldr	r3, [pc, #68]	; (d65b8 <rand+0x58>)
   d6574:	63a0      	str	r0, [r4, #56]	; 0x38
   d6576:	e9c0 2300 	strd	r2, r3, [r0]
   d657a:	4b10      	ldr	r3, [pc, #64]	; (d65bc <rand+0x5c>)
   d657c:	6083      	str	r3, [r0, #8]
   d657e:	230b      	movs	r3, #11
   d6580:	8183      	strh	r3, [r0, #12]
   d6582:	2201      	movs	r2, #1
   d6584:	2300      	movs	r3, #0
   d6586:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d658a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d658c:	480c      	ldr	r0, [pc, #48]	; (d65c0 <rand+0x60>)
   d658e:	690a      	ldr	r2, [r1, #16]
   d6590:	694b      	ldr	r3, [r1, #20]
   d6592:	4c0c      	ldr	r4, [pc, #48]	; (d65c4 <rand+0x64>)
   d6594:	4350      	muls	r0, r2
   d6596:	fb04 0003 	mla	r0, r4, r3, r0
   d659a:	fba2 3404 	umull	r3, r4, r2, r4
   d659e:	1c5a      	adds	r2, r3, #1
   d65a0:	4404      	add	r4, r0
   d65a2:	f144 0000 	adc.w	r0, r4, #0
   d65a6:	e9c1 2004 	strd	r2, r0, [r1, #16]
   d65aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   d65ae:	bd10      	pop	{r4, pc}
   d65b0:	2003e480 	.word	0x2003e480
   d65b4:	abcd330e 	.word	0xabcd330e
   d65b8:	e66d1234 	.word	0xe66d1234
   d65bc:	0005deec 	.word	0x0005deec
   d65c0:	5851f42d 	.word	0x5851f42d
   d65c4:	4c957f2d 	.word	0x4c957f2d

000d65c8 <strlen>:
   d65c8:	4603      	mov	r3, r0
   d65ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   d65ce:	2a00      	cmp	r2, #0
   d65d0:	d1fb      	bne.n	d65ca <strlen+0x2>
   d65d2:	1a18      	subs	r0, r3, r0
   d65d4:	3801      	subs	r0, #1
   d65d6:	4770      	bx	lr

000d65d8 <dynalib_user>:
   d65d8:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d65e8:	0000 0000 6573 646e 6e69 5467 7268 6165     ....sendingThrea
   d65f8:	0064 5245 4f52 2052 5254 4749 4547 0044     d.ERROR TRIGGED.
   d6608:	4341 204b 4e49 2120 4d00 7365 6173 6567     ACK IN !.Message
   d6618:	4720 6261 3120 4d00 7365 6173 6567 4720      Gab 1.Message G
   d6628:	6261 3220 4400 6d6f 6e69 6f67 6e20 6527     ab 2.Domingo n'e
   d6638:	7473 7020 7361 6120 6c20 6527 6178 656d     st pas a l'exame
   d6648:	206e 7564 7320 6d61 6465 2c69 6920 206c     n du samedi, il 
   d6658:	6572 6167 6472 2065 656c 6220 7361 6265     regarde le baseb
   d6668:	6c61 216c 2121 2121 2121 2121 2121 2121     all!!!!!!!!!!!!!
   d6678:	2121 2121 4d00 7365 6173 6567 3a20 2520     !!!!.Message : %
   d6688:	0073 7243 2063 203a 6425 4200 4441 4d20     s.Crc : %d.BAD M
   d6698:	5345 4153 4547 5220 4345 4945 4556 0044     ESSAGE RECEIVED.
   d66a8:	4157 5449 4e49 2047 4954 454d 554f 0054     WAITING TIMEOUT.

000d66b8 <_ZTVN5spark13EthernetClassE>:
	...
   d66c0:	51cb 000d 51c1 000d 51b7 000d 51ad 000d     .Q...Q...Q...Q..
   d66d0:	51a1 000d 5195 000d 59c9 000d 59d1 000d     .Q...Q...Y...Y..
   d66e0:	5189 000d 5181 000d 5177 000d 516d 000d     .Q...Q..wQ..mQ..
   d66f0:	5a01 000d 7061 0070 5925 252d 2d6d 6425     .Z..app.%Y-%m-%d
   d6700:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d6710:	6d69 0065                                   ime.

000d6714 <_ZTV9IPAddress>:
	...
   d671c:	5529 000d 5519 000d 551b 000d               )U...U...U..

000d6728 <_ZTV9USBSerial>:
	...
   d6730:	55ff 000d 5667 000d 563d 000d 5271 000d     .U..gV..=V..qR..
   d6740:	562f 000d 5601 000d 5611 000d 5661 000d     /V...V...V..aV..
   d6750:	5621 000d 55fb 000d                         !V...U..

000d6758 <_ZTV11USARTSerial>:
	...
   d6760:	5769 000d 57d5 000d 57ad 000d 5271 000d     iW...W...W..qR..
   d6770:	577d 000d 5799 000d 578b 000d 57a7 000d     }W...W...W...W..
   d6780:	576b 000d 576f 000d                         kW..oW..

000d6788 <_ZTV7TwoWire>:
	...
   d6790:	5865 000d 58af 000d 5887 000d 5867 000d     eX...X...X..gX..
   d67a0:	588f 000d 5897 000d 589f 000d 58a7 000d     .X...X...X...X..

000d67b0 <_ZTVN5spark9WiFiClassE>:
	...
   d67b8:	5969 000d 595f 000d 5955 000d 590b 000d     iY.._Y..UY...Y..
   d67c8:	5949 000d 593d 000d 59c9 000d 59d1 000d     IY..=Y...Y...Y..
   d67d8:	5931 000d 5929 000d 591f 000d 5915 000d     1Y..)Y...Y...Y..
   d67e8:	5a01 000d                                   .Z..

000d67ec <_ZTVN5spark12NetworkClassE>:
	...
   d67f4:	5989 000d 5993 000d 599d 000d 59a7 000d     .Y...Y...Y...Y..
   d6804:	59b1 000d 59bd 000d 59c9 000d 59d1 000d     .Y...Y...Y...Y..
   d6814:	59d9 000d 59e5 000d 59ed 000d 59f7 000d     .Y...Y...Y...Y..
   d6824:	5a01 000d                                   .Z..

000d6828 <_ZSt7nothrow>:
	...

000d6829 <link_const_variable_data_end>:
   d6829:	00          	.byte	0x00
	...

000d682c <link_constructors_location>:
   d682c:	000d4c55 	.word	0x000d4c55
   d6830:	000d51d5 	.word	0x000d51d5
   d6834:	000d51fd 	.word	0x000d51fd
   d6838:	000d5249 	.word	0x000d5249
   d683c:	000d5391 	.word	0x000d5391
   d6840:	000d53a1 	.word	0x000d53a1
   d6844:	000d53d9 	.word	0x000d53d9
   d6848:	000d5975 	.word	0x000d5975
   d684c:	000d5ad5 	.word	0x000d5ad5
