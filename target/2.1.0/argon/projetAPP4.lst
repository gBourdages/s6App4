
c:/Users/Gabriel/Desktop/projetAPP4/target/2.1.0/argon/projetAPP4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001594  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d55b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e5b8  000d55b4  0001e5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001cc  2003e624  2003e624  0002e624  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5620  000d5620  00025620  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5648  000d5648  00025648  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010e040  00000000  00000000  0002564c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000126a4  00000000  00000000  0013368c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00022199  00000000  00000000  00145d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000022c8  00000000  00000000  00167ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006538  00000000  00000000  0016a191  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003478c  00000000  00000000  001706c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002dd01  00000000  00000000  001a4e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00102e6c  00000000  00000000  001d2b56  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005ab8  00000000  00000000  002d59c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 f999 	bl	d5364 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 f9a1 	bl	d5380 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5b8 	.word	0x2003e5b8
   d4048:	000d55b4 	.word	0x000d55b4
   d404c:	2003e624 	.word	0x2003e624
   d4050:	2003e624 	.word	0x2003e624
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fe01 	bl	d4c64 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5580 	.word	0x000d5580
   d407c:	000d55a4 	.word	0x000d55a4

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b898 	b.w	d41b4 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f9e3 	bl	d4450 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bdab 	b.w	d4be8 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bc69 	b.w	d4968 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bc67 	b.w	d4968 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bc6d 	b.w	d4978 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_Z23receivingThreadFunctionPv>:
  pinSetFast(OUTPUT_PIN);
  delay(10000);
}

void receivingThreadFunction(void *param) {
	while(true) {
   d40ae:	e7fe      	b.n	d40ae <_Z23receivingThreadFunctionPv>

000d40b0 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40b0:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40b2:	6803      	ldr	r3, [r0, #0]
   d40b4:	2b2f      	cmp	r3, #47	; 0x2f
{
   d40b6:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40b8:	d904      	bls.n	d40c4 <nrf_gpio_pin_port_decode+0x14>
   d40ba:	4a07      	ldr	r2, [pc, #28]	; (d40d8 <nrf_gpio_pin_port_decode+0x28>)
   d40bc:	2100      	movs	r1, #0
   d40be:	200a      	movs	r0, #10
   d40c0:	f000 fbb6 	bl	d4830 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40c4:	6823      	ldr	r3, [r4, #0]
   d40c6:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40c8:	bf83      	ittte	hi
   d40ca:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d40ce:	4803      	ldrhi	r0, [pc, #12]	; (d40dc <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40d0:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d40d2:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d40d6:	bd10      	pop	{r4, pc}
   d40d8:	000d4611 	.word	0x000d4611
   d40dc:	50000300 	.word	0x50000300

000d40e0 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d40e0:	b507      	push	{r0, r1, r2, lr}
   d40e2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d40e4:	a801      	add	r0, sp, #4
   d40e6:	f7ff ffe3 	bl	d40b0 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d40ea:	9a01      	ldr	r2, [sp, #4]
   d40ec:	2301      	movs	r3, #1
   d40ee:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d40f0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   d40f4:	b003      	add	sp, #12
   d40f6:	f85d fb04 	ldr.w	pc, [sp], #4

000d40fa <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d40fa:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d40fc:	2301      	movs	r3, #1
   d40fe:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d4100:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d4102:	4604      	mov	r4, r0
        if (th->func) {
   d4104:	b143      	cbz	r3, d4118 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d4106:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4108:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d410a:	2301      	movs	r3, #1
   d410c:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d410e:	2000      	movs	r0, #0
    }
   d4110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d4114:	f000 babc 	b.w	d4690 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d4118:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d411a:	2800      	cmp	r0, #0
   d411c:	d0f5      	beq.n	d410a <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d411e:	6883      	ldr	r3, [r0, #8]
   d4120:	b90b      	cbnz	r3, d4126 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d4122:	f001 f90e 	bl	d5342 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4126:	68c3      	ldr	r3, [r0, #12]
   d4128:	e7ee      	b.n	d4108 <_ZN6Thread3runEPv+0xe>

000d412a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d412a:	b510      	push	{r4, lr}
   d412c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d412e:	6800      	ldr	r0, [r0, #0]
   d4130:	b108      	cbz	r0, d4136 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4132:	f000 fc21 	bl	d4978 <free>
class SystemClass {
   d4136:	4620      	mov	r0, r4
   d4138:	bd10      	pop	{r4, pc}

000d413a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>:
      operator()(_Tp* __ptr) const
   d413a:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   d413c:	6804      	ldr	r4, [r0, #0]
      operator()(_Tp* __ptr) const
   d413e:	4605      	mov	r5, r0
	if (__ptr != nullptr)
   d4140:	b14c      	cbz	r4, d4156 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x1c>
      if (_M_manager)
   d4142:	68a3      	ldr	r3, [r4, #8]
   d4144:	b11b      	cbz	r3, d414e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0+0x14>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4146:	2203      	movs	r2, #3
   d4148:	4621      	mov	r1, r4
   d414a:	4620      	mov	r0, r4
   d414c:	4798      	blx	r3
	delete __ptr;
   d414e:	2110      	movs	r1, #16
   d4150:	4620      	mov	r0, r4
   d4152:	f001 f8f0 	bl	d5336 <_ZdlPvj>
   d4156:	4628      	mov	r0, r5
   d4158:	2114      	movs	r1, #20
      }
   d415a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   d415e:	f001 b8ea 	b.w	d5336 <_ZdlPvj>

000d4162 <_ZN6ThreadD1Ev>:
    ~Thread()
   d4162:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d4164:	6803      	ldr	r3, [r0, #0]
   d4166:	4604      	mov	r4, r0
        if (!isValid())
   d4168:	b19b      	cbz	r3, d4192 <_ZN6ThreadD1Ev+0x30>
        return isValid() && os_thread_is_current(d_->handle);
   d416a:	6858      	ldr	r0, [r3, #4]
   d416c:	f000 fa68 	bl	d4640 <os_thread_is_current>
   d4170:	b978      	cbnz	r0, d4192 <_ZN6ThreadD1Ev+0x30>
   d4172:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   d4174:	7c5a      	ldrb	r2, [r3, #17]
   d4176:	b912      	cbnz	r2, d417e <_ZN6ThreadD1Ev+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   d4178:	6858      	ldr	r0, [r3, #4]
   d417a:	f000 fa69 	bl	d4650 <os_thread_join>
        os_thread_cleanup(d_->handle);
   d417e:	6823      	ldr	r3, [r4, #0]
   d4180:	6858      	ldr	r0, [r3, #4]
   d4182:	f000 fa6d 	bl	d4660 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4186:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4188:	2300      	movs	r3, #0
   d418a:	6023      	str	r3, [r4, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d418c:	b108      	cbz	r0, d4192 <_ZN6ThreadD1Ev+0x30>
      operator()(_Tp* __ptr) const
   d418e:	f7ff ffd4 	bl	d413a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
	if (__ptr != nullptr)
   d4192:	6820      	ldr	r0, [r4, #0]
   d4194:	b108      	cbz	r0, d419a <_ZN6ThreadD1Ev+0x38>
      operator()(_Tp* __ptr) const
   d4196:	f7ff ffd0 	bl	d413a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
    }
   d419a:	4620      	mov	r0, r4
   d419c:	bd10      	pop	{r4, pc}
	...

000d41a0 <_ZN11SystemClass10ticksDelayEm>:
        return SYSTEM_US_TICKS;
    }

    static inline uint32_t ticks()
    {
        return SYSTEM_TICK_COUNTER;
   d41a0:	4b03      	ldr	r3, [pc, #12]	; (d41b0 <_ZN11SystemClass10ticksDelayEm+0x10>)
   d41a2:	6859      	ldr	r1, [r3, #4]
   d41a4:	685a      	ldr	r2, [r3, #4]
    }

    static inline void ticksDelay(uint32_t duration)
    {
        uint32_t start = ticks();
        while ((ticks()-start)<duration) {}
   d41a6:	1a52      	subs	r2, r2, r1
   d41a8:	4282      	cmp	r2, r0
   d41aa:	d3fb      	bcc.n	d41a4 <_ZN11SystemClass10ticksDelayEm+0x4>
    }
   d41ac:	4770      	bx	lr
   d41ae:	bf00      	nop
   d41b0:	e0001000 	.word	0xe0001000

000d41b4 <setup>:
void setup() {
   d41b4:	b508      	push	{r3, lr}
	Serial.begin(9600);
   d41b6:	f000 fe55 	bl	d4e64 <_Z16_fetch_usbserialv>
   d41ba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41be:	f000 fe45 	bl	d4e4c <_ZN9USBSerial5beginEl>
  pinMode(OUTPUT_PIN, OUTPUT_OPEN_DRAIN);
   d41c2:	2105      	movs	r1, #5
   d41c4:	2002      	movs	r0, #2
   d41c6:	f001 f85f 	bl	d5288 <pinMode>
}
   d41ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(INPUT_PIN, INPUT_PULLUP);
   d41ce:	2102      	movs	r1, #2
   d41d0:	2004      	movs	r0, #4
   d41d2:	f001 b859 	b.w	d5288 <pinMode>
	...

000d41d8 <_Z17sendManchesterLOWv>:
  sendManchesterHIGH();
  sendManchesterHIGH();
  sendManchesterLOW();
}

void sendManchesterLOW() {
   d41d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
/* Disabling USE_BIT_BAND since bitbanding is much slower! as per comment
 * by @pkourany on PR: https://github.com/spark/firmware/pull/556 */
#define USE_BIT_BAND 0

__attribute__((always_inline)) inline const Hal_Pin_Info* fastPinGetPinmap() {
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d41da:	4d34      	ldr	r5, [pc, #208]	; (d42ac <_Z17sendManchesterLOWv+0xd4>)
   d41dc:	4c34      	ldr	r4, [pc, #208]	; (d42b0 <_Z17sendManchesterLOWv+0xd8>)
   d41de:	782b      	ldrb	r3, [r5, #0]
   d41e0:	f3bf 8f5b 	dmb	ish
   d41e4:	f013 0f01 	tst.w	r3, #1
   d41e8:	d109      	bne.n	d41fe <_Z17sendManchesterLOWv+0x26>
   d41ea:	4628      	mov	r0, r5
   d41ec:	f7ff ff57 	bl	d409e <__cxa_guard_acquire>
   d41f0:	b128      	cbz	r0, d41fe <_Z17sendManchesterLOWv+0x26>
   d41f2:	f000 f9ed 	bl	d45d0 <HAL_Pin_Map>
   d41f6:	6020      	str	r0, [r4, #0]
   d41f8:	4628      	mov	r0, r5
   d41fa:	f7ff ff55 	bl	d40a8 <__cxa_guard_release>
    nrf_gpio_pin_set(nrf_pin);
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d41fe:	6823      	ldr	r3, [r4, #0]
   d4200:	f893 3020 	ldrb.w	r3, [r3, #32]
   d4204:	015e      	lsls	r6, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4206:	782b      	ldrb	r3, [r5, #0]
   d4208:	f3bf 8f5b 	dmb	ish
   d420c:	07d9      	lsls	r1, r3, #31
   d420e:	d409      	bmi.n	d4224 <_Z17sendManchesterLOWv+0x4c>
   d4210:	4826      	ldr	r0, [pc, #152]	; (d42ac <_Z17sendManchesterLOWv+0xd4>)
   d4212:	f7ff ff44 	bl	d409e <__cxa_guard_acquire>
   d4216:	b128      	cbz	r0, d4224 <_Z17sendManchesterLOWv+0x4c>
   d4218:	f000 f9da 	bl	d45d0 <HAL_Pin_Map>
   d421c:	6020      	str	r0, [r4, #0]
   d421e:	4823      	ldr	r0, [pc, #140]	; (d42ac <_Z17sendManchesterLOWv+0xd4>)
   d4220:	f7ff ff42 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4224:	6823      	ldr	r3, [r4, #0]
  pinResetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d4226:	4f23      	ldr	r7, [pc, #140]	; (d42b4 <_Z17sendManchesterLOWv+0xdc>)
   d4228:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d422c:	f003 031f 	and.w	r3, r3, #31
   d4230:	4333      	orrs	r3, r6
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4232:	a801      	add	r0, sp, #4
   d4234:	9301      	str	r3, [sp, #4]
   d4236:	f7ff ff3b 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d423a:	9a01      	ldr	r2, [sp, #4]
   d423c:	2301      	movs	r3, #1
   d423e:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d4240:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   d4244:	6838      	ldr	r0, [r7, #0]
   d4246:	f7ff ffab 	bl	d41a0 <_ZN11SystemClass10ticksDelayEm>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d424a:	782b      	ldrb	r3, [r5, #0]
   d424c:	f3bf 8f5b 	dmb	ish
   d4250:	07da      	lsls	r2, r3, #31
   d4252:	d409      	bmi.n	d4268 <_Z17sendManchesterLOWv+0x90>
   d4254:	4815      	ldr	r0, [pc, #84]	; (d42ac <_Z17sendManchesterLOWv+0xd4>)
   d4256:	f7ff ff22 	bl	d409e <__cxa_guard_acquire>
   d425a:	b128      	cbz	r0, d4268 <_Z17sendManchesterLOWv+0x90>
   d425c:	f000 f9b8 	bl	d45d0 <HAL_Pin_Map>
   d4260:	6020      	str	r0, [r4, #0]
   d4262:	4812      	ldr	r0, [pc, #72]	; (d42ac <_Z17sendManchesterLOWv+0xd4>)
   d4264:	f7ff ff20 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4268:	6823      	ldr	r3, [r4, #0]
   d426a:	f893 6020 	ldrb.w	r6, [r3, #32]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d426e:	782b      	ldrb	r3, [r5, #0]
   d4270:	f3bf 8f5b 	dmb	ish
   d4274:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4276:	ea4f 1646 	mov.w	r6, r6, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d427a:	d409      	bmi.n	d4290 <_Z17sendManchesterLOWv+0xb8>
   d427c:	480b      	ldr	r0, [pc, #44]	; (d42ac <_Z17sendManchesterLOWv+0xd4>)
   d427e:	f7ff ff0e 	bl	d409e <__cxa_guard_acquire>
   d4282:	b128      	cbz	r0, d4290 <_Z17sendManchesterLOWv+0xb8>
   d4284:	f000 f9a4 	bl	d45d0 <HAL_Pin_Map>
   d4288:	6020      	str	r0, [r4, #0]
   d428a:	4808      	ldr	r0, [pc, #32]	; (d42ac <_Z17sendManchesterLOWv+0xd4>)
   d428c:	f7ff ff0c 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4290:	6823      	ldr	r3, [r4, #0]
   d4292:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
   d4296:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d429a:	4330      	orrs	r0, r6
   d429c:	f7ff ff20 	bl	d40e0 <nrf_gpio_pin_set>
  pinSetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d42a0:	6838      	ldr	r0, [r7, #0]
   d42a2:	f7ff ff7d 	bl	d41a0 <_ZN11SystemClass10ticksDelayEm>
}
   d42a6:	b003      	add	sp, #12
   d42a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d42aa:	bf00      	nop
   d42ac:	2003e628 	.word	0x2003e628
   d42b0:	2003e62c 	.word	0x2003e62c
   d42b4:	2003e63c 	.word	0x2003e63c

000d42b8 <_Z18sendManchesterHIGHv>:

void sendManchesterHIGH() {
   d42b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42ba:	4d34      	ldr	r5, [pc, #208]	; (d438c <_Z18sendManchesterHIGHv+0xd4>)
   d42bc:	4c34      	ldr	r4, [pc, #208]	; (d4390 <_Z18sendManchesterHIGHv+0xd8>)
   d42be:	782b      	ldrb	r3, [r5, #0]
   d42c0:	f3bf 8f5b 	dmb	ish
   d42c4:	f013 0f01 	tst.w	r3, #1
   d42c8:	d109      	bne.n	d42de <_Z18sendManchesterHIGHv+0x26>
   d42ca:	4628      	mov	r0, r5
   d42cc:	f7ff fee7 	bl	d409e <__cxa_guard_acquire>
   d42d0:	b128      	cbz	r0, d42de <_Z18sendManchesterHIGHv+0x26>
   d42d2:	f000 f97d 	bl	d45d0 <HAL_Pin_Map>
   d42d6:	6020      	str	r0, [r4, #0]
   d42d8:	4628      	mov	r0, r5
   d42da:	f7ff fee5 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42de:	6823      	ldr	r3, [r4, #0]
   d42e0:	f893 6020 	ldrb.w	r6, [r3, #32]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42e4:	782b      	ldrb	r3, [r5, #0]
   d42e6:	f3bf 8f5b 	dmb	ish
   d42ea:	07d9      	lsls	r1, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42ec:	ea4f 1646 	mov.w	r6, r6, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42f0:	d409      	bmi.n	d4306 <_Z18sendManchesterHIGHv+0x4e>
   d42f2:	4826      	ldr	r0, [pc, #152]	; (d438c <_Z18sendManchesterHIGHv+0xd4>)
   d42f4:	f7ff fed3 	bl	d409e <__cxa_guard_acquire>
   d42f8:	b128      	cbz	r0, d4306 <_Z18sendManchesterHIGHv+0x4e>
   d42fa:	f000 f969 	bl	d45d0 <HAL_Pin_Map>
   d42fe:	6020      	str	r0, [r4, #0]
   d4300:	4822      	ldr	r0, [pc, #136]	; (d438c <_Z18sendManchesterHIGHv+0xd4>)
   d4302:	f7ff fed1 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4306:	6823      	ldr	r3, [r4, #0]
   d4308:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
   d430c:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d4310:	4330      	orrs	r0, r6
  pinSetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d4312:	4e20      	ldr	r6, [pc, #128]	; (d4394 <_Z18sendManchesterHIGHv+0xdc>)
   d4314:	f7ff fee4 	bl	d40e0 <nrf_gpio_pin_set>
   d4318:	6830      	ldr	r0, [r6, #0]
   d431a:	f7ff ff41 	bl	d41a0 <_ZN11SystemClass10ticksDelayEm>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d431e:	782b      	ldrb	r3, [r5, #0]
   d4320:	f3bf 8f5b 	dmb	ish
   d4324:	07da      	lsls	r2, r3, #31
   d4326:	d409      	bmi.n	d433c <_Z18sendManchesterHIGHv+0x84>
   d4328:	4818      	ldr	r0, [pc, #96]	; (d438c <_Z18sendManchesterHIGHv+0xd4>)
   d432a:	f7ff feb8 	bl	d409e <__cxa_guard_acquire>
   d432e:	b128      	cbz	r0, d433c <_Z18sendManchesterHIGHv+0x84>
   d4330:	f000 f94e 	bl	d45d0 <HAL_Pin_Map>
   d4334:	6020      	str	r0, [r4, #0]
   d4336:	4815      	ldr	r0, [pc, #84]	; (d438c <_Z18sendManchesterHIGHv+0xd4>)
   d4338:	f7ff feb6 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d433c:	6823      	ldr	r3, [r4, #0]
   d433e:	f893 3020 	ldrb.w	r3, [r3, #32]
   d4342:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4344:	782b      	ldrb	r3, [r5, #0]
   d4346:	f3bf 8f5b 	dmb	ish
   d434a:	07db      	lsls	r3, r3, #31
   d434c:	d409      	bmi.n	d4362 <_Z18sendManchesterHIGHv+0xaa>
   d434e:	480f      	ldr	r0, [pc, #60]	; (d438c <_Z18sendManchesterHIGHv+0xd4>)
   d4350:	f7ff fea5 	bl	d409e <__cxa_guard_acquire>
   d4354:	b128      	cbz	r0, d4362 <_Z18sendManchesterHIGHv+0xaa>
   d4356:	f000 f93b 	bl	d45d0 <HAL_Pin_Map>
   d435a:	6020      	str	r0, [r4, #0]
   d435c:	480b      	ldr	r0, [pc, #44]	; (d438c <_Z18sendManchesterHIGHv+0xd4>)
   d435e:	f7ff fea3 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4362:	6823      	ldr	r3, [r4, #0]
   d4364:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
   d4368:	f003 031f 	and.w	r3, r3, #31
   d436c:	433b      	orrs	r3, r7
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d436e:	a801      	add	r0, sp, #4
   d4370:	9301      	str	r3, [sp, #4]
   d4372:	f7ff fe9d 	bl	d40b0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4376:	9a01      	ldr	r2, [sp, #4]
   d4378:	2301      	movs	r3, #1
   d437a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   d437c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
  pinResetFast(OUTPUT_PIN);
  System.ticksDelay(manchesterTicks);
   d4380:	6830      	ldr	r0, [r6, #0]
   d4382:	f7ff ff0d 	bl	d41a0 <_ZN11SystemClass10ticksDelayEm>
}
   d4386:	b003      	add	sp, #12
   d4388:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d438a:	bf00      	nop
   d438c:	2003e628 	.word	0x2003e628
   d4390:	2003e62c 	.word	0x2003e62c
   d4394:	2003e63c 	.word	0x2003e63c

000d4398 <_Z7messagev>:
void message() {
   d4398:	b508      	push	{r3, lr}
  sendManchesterLOW();
   d439a:	f7ff ff1d 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d439e:	f7ff ff1b 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d43a2:	f7ff ff89 	bl	d42b8 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d43a6:	f7ff ff17 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d43aa:	f7ff ff85 	bl	d42b8 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d43ae:	f7ff ff13 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d43b2:	f7ff ff81 	bl	d42b8 <_Z18sendManchesterHIGHv>
}
   d43b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendManchesterLOW();
   d43ba:	f7ff bf0d 	b.w	d41d8 <_Z17sendManchesterLOWv>

000d43be <_Z6entetehh>:
void entete(uint8_t flags, uint8_t length) {
   d43be:	b508      	push	{r3, lr}
  sendManchesterLOW();
   d43c0:	f7ff ff0a 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43c4:	f7ff ff08 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43c8:	f7ff ff06 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43cc:	f7ff ff04 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43d0:	f7ff ff02 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43d4:	f7ff ff00 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43d8:	f7ff fefe 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43dc:	f7ff fefc 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43e0:	f7ff fefa 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43e4:	f7ff fef8 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43e8:	f7ff fef6 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43ec:	f7ff fef4 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43f0:	f7ff fef2 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43f4:	f7ff fef0 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterLOW();
   d43f8:	f7ff feee 	bl	d41d8 <_Z17sendManchesterLOWv>
}
   d43fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendManchesterHIGH();
   d4400:	f7ff bf5a 	b.w	d42b8 <_Z18sendManchesterHIGHv>

000d4404 <_Z9preambulev>:
void preambule() {
   d4404:	b508      	push	{r3, lr}
  sendManchesterLOW();
   d4406:	f7ff fee7 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d440a:	f7ff ff55 	bl	d42b8 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d440e:	f7ff fee3 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d4412:	f7ff ff51 	bl	d42b8 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d4416:	f7ff fedf 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d441a:	f7ff ff4d 	bl	d42b8 <_Z18sendManchesterHIGHv>
  sendManchesterLOW();
   d441e:	f7ff fedb 	bl	d41d8 <_Z17sendManchesterLOWv>
}
   d4422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendManchesterHIGH();
   d4426:	f7ff bf47 	b.w	d42b8 <_Z18sendManchesterHIGHv>

000d442a <_Z12startEndBytev>:
void startEndByte() {
   d442a:	b508      	push	{r3, lr}
  sendManchesterLOW();
   d442c:	f7ff fed4 	bl	d41d8 <_Z17sendManchesterLOWv>
  sendManchesterHIGH();
   d4430:	f7ff ff42 	bl	d42b8 <_Z18sendManchesterHIGHv>
  sendManchesterHIGH();
   d4434:	f7ff ff40 	bl	d42b8 <_Z18sendManchesterHIGHv>
  sendManchesterHIGH();
   d4438:	f7ff ff3e 	bl	d42b8 <_Z18sendManchesterHIGHv>
  sendManchesterHIGH();
   d443c:	f7ff ff3c 	bl	d42b8 <_Z18sendManchesterHIGHv>
  sendManchesterHIGH();
   d4440:	f7ff ff3a 	bl	d42b8 <_Z18sendManchesterHIGHv>
  sendManchesterHIGH();
   d4444:	f7ff ff38 	bl	d42b8 <_Z18sendManchesterHIGHv>
}
   d4448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sendManchesterLOW();
   d444c:	f7ff bec4 	b.w	d41d8 <_Z17sendManchesterLOWv>

000d4450 <loop>:
void loop() {
   d4450:	b570      	push	{r4, r5, r6, lr}
  preambule();
   d4452:	f7ff ffd7 	bl	d4404 <_Z9preambulev>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4456:	4c1f      	ldr	r4, [pc, #124]	; (d44d4 <loop+0x84>)
   d4458:	4d1f      	ldr	r5, [pc, #124]	; (d44d8 <loop+0x88>)
  startEndByte();
   d445a:	f7ff ffe6 	bl	d442a <_Z12startEndBytev>
  entete(1,1);
   d445e:	2101      	movs	r1, #1
   d4460:	4608      	mov	r0, r1
   d4462:	f7ff ffac 	bl	d43be <_Z6entetehh>
  message();
   d4466:	f7ff ff97 	bl	d4398 <_Z7messagev>
  startEndByte();
   d446a:	f7ff ffde 	bl	d442a <_Z12startEndBytev>
   d446e:	7823      	ldrb	r3, [r4, #0]
   d4470:	f3bf 8f5b 	dmb	ish
   d4474:	f013 0f01 	tst.w	r3, #1
   d4478:	d109      	bne.n	d448e <loop+0x3e>
   d447a:	4620      	mov	r0, r4
   d447c:	f7ff fe0f 	bl	d409e <__cxa_guard_acquire>
   d4480:	b128      	cbz	r0, d448e <loop+0x3e>
   d4482:	f000 f8a5 	bl	d45d0 <HAL_Pin_Map>
   d4486:	6028      	str	r0, [r5, #0]
   d4488:	4620      	mov	r0, r4
   d448a:	f7ff fe0d 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d448e:	682b      	ldr	r3, [r5, #0]
   d4490:	f893 6020 	ldrb.w	r6, [r3, #32]
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4494:	7823      	ldrb	r3, [r4, #0]
   d4496:	f3bf 8f5b 	dmb	ish
   d449a:	07db      	lsls	r3, r3, #31
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d449c:	ea4f 1646 	mov.w	r6, r6, lsl #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d44a0:	d409      	bmi.n	d44b6 <loop+0x66>
   d44a2:	480c      	ldr	r0, [pc, #48]	; (d44d4 <loop+0x84>)
   d44a4:	f7ff fdfb 	bl	d409e <__cxa_guard_acquire>
   d44a8:	b128      	cbz	r0, d44b6 <loop+0x66>
   d44aa:	f000 f891 	bl	d45d0 <HAL_Pin_Map>
   d44ae:	6028      	str	r0, [r5, #0]
   d44b0:	4808      	ldr	r0, [pc, #32]	; (d44d4 <loop+0x84>)
   d44b2:	f7ff fdf9 	bl	d40a8 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d44b6:	682b      	ldr	r3, [r5, #0]
   d44b8:	f893 0021 	ldrb.w	r0, [r3, #33]	; 0x21
   d44bc:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_pin_set(nrf_pin);
   d44c0:	4330      	orrs	r0, r6
   d44c2:	f7ff fe0d 	bl	d40e0 <nrf_gpio_pin_set>
}
   d44c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(10000);
   d44ca:	f242 7010 	movw	r0, #10000	; 0x2710
   d44ce:	f000 bb49 	b.w	d4b64 <delay>
   d44d2:	bf00      	nop
   d44d4:	2003e628 	.word	0x2003e628
   d44d8:	2003e62c 	.word	0x2003e62c

000d44dc <_GLOBAL__sub_I_SystemMode>:
}
   d44dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
              error_(SYSTEM_ERROR_NONE) {
   d44de:	4d27      	ldr	r5, [pc, #156]	; (d457c <_GLOBAL__sub_I_SystemMode+0xa0>)
    SleepResult() {}
   d44e0:	4b27      	ldr	r3, [pc, #156]	; (d4580 <_GLOBAL__sub_I_SystemMode+0xa4>)
   d44e2:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d44e4:	2400      	movs	r4, #0
        set_system_mode(mode);
   d44e6:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   d44e8:	602c      	str	r4, [r5, #0]
   d44ea:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d44ec:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d44ee:	f000 f9a7 	bl	d4840 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d44f2:	4a24      	ldr	r2, [pc, #144]	; (d4584 <_GLOBAL__sub_I_SystemMode+0xa8>)
   d44f4:	4924      	ldr	r1, [pc, #144]	; (d4588 <_GLOBAL__sub_I_SystemMode+0xac>)
   d44f6:	4628      	mov	r0, r5
   d44f8:	f000 ff18 	bl	d532c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);
   d44fc:	4621      	mov	r1, r4
   d44fe:	2001      	movs	r0, #1
   d4500:	f000 f9ae 	bl	d4860 <system_thread_set_state>
        : d_(new(std::nothrow) Data)
   d4504:	4921      	ldr	r1, [pc, #132]	; (d458c <_GLOBAL__sub_I_SystemMode+0xb0>)
   d4506:	2014      	movs	r0, #20
   d4508:	f000 ff17 	bl	d533a <_ZnwjRKSt9nothrow_t>
   d450c:	b128      	cbz	r0, d451a <_GLOBAL__sub_I_SystemMode+0x3e>
            exited(false) {
   d450e:	e9c0 4400 	strd	r4, r4, [r0]
   d4512:	e9c0 4402 	strd	r4, r4, [r0, #8]
   d4516:	7404      	strb	r4, [r0, #16]
   d4518:	7444      	strb	r4, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d451a:	4c1d      	ldr	r4, [pc, #116]	; (d4590 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d451c:	6020      	str	r0, [r4, #0]
        if (!d_) {
   d451e:	b1a8      	cbz	r0, d454c <_GLOBAL__sub_I_SystemMode+0x70>
        d_->func = function;
   d4520:	4b1c      	ldr	r3, [pc, #112]	; (d4594 <_GLOBAL__sub_I_SystemMode+0xb8>)
   d4522:	6083      	str	r3, [r0, #8]
        d_->func_param = function_param;
   d4524:	2300      	movs	r3, #0
   d4526:	60c3      	str	r3, [r0, #12]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d4528:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d452c:	e9cd 0300 	strd	r0, r3, [sp]
   d4530:	4919      	ldr	r1, [pc, #100]	; (d4598 <_GLOBAL__sub_I_SystemMode+0xbc>)
   d4532:	4b1a      	ldr	r3, [pc, #104]	; (d459c <_GLOBAL__sub_I_SystemMode+0xc0>)
   d4534:	2202      	movs	r2, #2
   d4536:	3004      	adds	r0, #4
   d4538:	f000 f87a 	bl	d4630 <os_thread_create>
   d453c:	b930      	cbnz	r0, d454c <_GLOBAL__sub_I_SystemMode+0x70>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d453e:	6823      	ldr	r3, [r4, #0]
        while (!d_->started) {
   d4540:	7c1b      	ldrb	r3, [r3, #16]
   d4542:	b94b      	cbnz	r3, d4558 <_GLOBAL__sub_I_SystemMode+0x7c>
            HAL_Delay_Milliseconds(1);
   d4544:	2001      	movs	r0, #1
   d4546:	f000 f85b 	bl	d4600 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d454a:	e7f8      	b.n	d453e <_GLOBAL__sub_I_SystemMode+0x62>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d454c:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d454e:	2300      	movs	r3, #0
   d4550:	6023      	str	r3, [r4, #0]
	if (__p != pointer())
   d4552:	b108      	cbz	r0, d4558 <_GLOBAL__sub_I_SystemMode+0x7c>
      operator()(_Tp* __ptr) const
   d4554:	f7ff fdf1 	bl	d413a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.0.part.0>
Thread thread("receivingThread", receivingThreadFunction);
   d4558:	4a0a      	ldr	r2, [pc, #40]	; (d4584 <_GLOBAL__sub_I_SystemMode+0xa8>)
   d455a:	4911      	ldr	r1, [pc, #68]	; (d45a0 <_GLOBAL__sub_I_SystemMode+0xc4>)
   d455c:	480c      	ldr	r0, [pc, #48]	; (d4590 <_GLOBAL__sub_I_SystemMode+0xb4>)
   d455e:	f000 fee5 	bl	d532c <__aeabi_atexit>
        return SYSTEM_US_TICKS;
   d4562:	4b10      	ldr	r3, [pc, #64]	; (d45a4 <_GLOBAL__sub_I_SystemMode+0xc8>)
   d4564:	4a10      	ldr	r2, [pc, #64]	; (d45a8 <_GLOBAL__sub_I_SystemMode+0xcc>)
   d4566:	681b      	ldr	r3, [r3, #0]
   d4568:	fbb3 f2f2 	udiv	r2, r3, r2
uint32_t manchesterTicks = System.ticksPerMicrosecond() * MANCHESTER_TIME;
   d456c:	f640 13c4 	movw	r3, #2500	; 0x9c4
   d4570:	4353      	muls	r3, r2
   d4572:	4a0e      	ldr	r2, [pc, #56]	; (d45ac <_GLOBAL__sub_I_SystemMode+0xd0>)
   d4574:	6013      	str	r3, [r2, #0]
}
   d4576:	b003      	add	sp, #12
   d4578:	bd30      	pop	{r4, r5, pc}
   d457a:	bf00      	nop
   d457c:	2003e630 	.word	0x2003e630
   d4580:	ffff0000 	.word	0xffff0000
   d4584:	2003e624 	.word	0x2003e624
   d4588:	000d412b 	.word	0x000d412b
   d458c:	000d557c 	.word	0x000d557c
   d4590:	2003e640 	.word	0x2003e640
   d4594:	000d40af 	.word	0x000d40af
   d4598:	000d53fc 	.word	0x000d53fc
   d459c:	000d40fb 	.word	0x000d40fb
   d45a0:	000d4163 	.word	0x000d4163
   d45a4:	2003e5bc 	.word	0x2003e5bc
   d45a8:	000f4240 	.word	0x000f4240
   d45ac:	2003e63c 	.word	0x2003e63c

000d45b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <netdb_freeaddrinfo+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	689b      	ldr	r3, [r3, #8]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030268 	.word	0x00030268

000d45c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <netdb_getaddrinfo+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	68db      	ldr	r3, [r3, #12]
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030268 	.word	0x00030268

000d45d0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <HAL_Pin_Map+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	681b      	ldr	r3, [r3, #0]
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	0003022c 	.word	0x0003022c

000d45e0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <HAL_Pin_Mode+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	689b      	ldr	r3, [r3, #8]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	0003022c 	.word	0x0003022c

000d45f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <HAL_RNG_GetRandomNumber+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	685b      	ldr	r3, [r3, #4]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030218 	.word	0x00030218

000d4600 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <HAL_Delay_Milliseconds+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	689b      	ldr	r3, [r3, #8]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030218 	.word	0x00030218

000d4610 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <HAL_Delay_Microseconds+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	68db      	ldr	r3, [r3, #12]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030218 	.word	0x00030218

000d4620 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	695b      	ldr	r3, [r3, #20]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030218 	.word	0x00030218

000d4630 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <os_thread_create+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	685b      	ldr	r3, [r3, #4]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030248 	.word	0x00030248

000d4640 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <os_thread_is_current+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	689b      	ldr	r3, [r3, #8]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030248 	.word	0x00030248

000d4650 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <os_thread_join+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	691b      	ldr	r3, [r3, #16]
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030248 	.word	0x00030248

000d4660 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <os_thread_cleanup+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	695b      	ldr	r3, [r3, #20]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030248 	.word	0x00030248

000d4670 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <os_mutex_recursive_create+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030248 	.word	0x00030248

000d4680 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <os_mutex_recursive_destroy+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030248 	.word	0x00030248

000d4690 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <os_thread_exit+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030248 	.word	0x00030248

000d46a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <inet_inet_ntop+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	695b      	ldr	r3, [r3, #20]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030264 	.word	0x00030264

000d46b0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <hal_usart_init+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	681b      	ldr	r3, [r3, #0]
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	0003023c 	.word	0x0003023c

000d46c0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <hal_usart_write+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	68db      	ldr	r3, [r3, #12]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	0003023c 	.word	0x0003023c

000d46d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <hal_usart_available+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	691b      	ldr	r3, [r3, #16]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	0003023c 	.word	0x0003023c

000d46e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <hal_usart_read+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	695b      	ldr	r3, [r3, #20]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003023c 	.word	0x0003023c

000d46f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <hal_usart_peek+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	699b      	ldr	r3, [r3, #24]
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	0003023c 	.word	0x0003023c

000d4700 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <hal_usart_flush+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	69db      	ldr	r3, [r3, #28]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	0003023c 	.word	0x0003023c

000d4710 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <hal_usart_is_enabled+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	6a1b      	ldr	r3, [r3, #32]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	0003023c 	.word	0x0003023c

000d4720 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <hal_usart_available_data_for_write+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	0003023c 	.word	0x0003023c

000d4730 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <hal_i2c_write+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	6a1b      	ldr	r3, [r3, #32]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	00030228 	.word	0x00030228

000d4740 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <hal_i2c_available+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	00030228 	.word	0x00030228

000d4750 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <hal_i2c_read+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	00030228 	.word	0x00030228

000d4760 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <hal_i2c_peek+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	00030228 	.word	0x00030228

000d4770 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <hal_i2c_flush+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030228 	.word	0x00030228

000d4780 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <hal_i2c_is_enabled+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030228 	.word	0x00030228

000d4790 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b02      	ldr	r3, [pc, #8]	; (d479c <hal_i2c_init+0xc>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4798:	9301      	str	r3, [sp, #4]
   d479a:	bd08      	pop	{r3, pc}
   d479c:	00030228 	.word	0x00030228

000d47a0 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <hal_spi_init+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	69db      	ldr	r3, [r3, #28]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030230 	.word	0x00030230

000d47b0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <hal_spi_is_enabled+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	6a1b      	ldr	r3, [r3, #32]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030230 	.word	0x00030230

000d47c0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <HAL_USB_USART_Init+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	681b      	ldr	r3, [r3, #0]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	0003024c 	.word	0x0003024c

000d47d0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <HAL_USB_USART_Begin+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	685b      	ldr	r3, [r3, #4]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	0003024c 	.word	0x0003024c

000d47e0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <HAL_USB_USART_Available_Data+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	691b      	ldr	r3, [r3, #16]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	0003024c 	.word	0x0003024c

000d47f0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	695b      	ldr	r3, [r3, #20]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	0003024c 	.word	0x0003024c

000d4800 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <HAL_USB_USART_Receive_Data+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	699b      	ldr	r3, [r3, #24]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	0003024c 	.word	0x0003024c

000d4810 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <HAL_USB_USART_Send_Data+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	69db      	ldr	r3, [r3, #28]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	0003024c 	.word	0x0003024c

000d4820 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <HAL_USB_USART_Flush_Data+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6a1b      	ldr	r3, [r3, #32]
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	0003024c 	.word	0x0003024c

000d4830 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <panic_+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030260 	.word	0x00030260

000d4840 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <set_system_mode+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	685b      	ldr	r3, [r3, #4]
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	00030220 	.word	0x00030220

000d4850 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <system_delay_ms+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	695b      	ldr	r3, [r3, #20]
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	00030220 	.word	0x00030220

000d4860 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <system_thread_set_state+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030220 	.word	0x00030220

000d4870 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b03      	ldr	r3, [pc, #12]	; (d4880 <system_ctrl_set_app_request_handler+0x10>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d487a:	9301      	str	r3, [sp, #4]
   d487c:	bd08      	pop	{r3, pc}
   d487e:	0000      	.short	0x0000
   d4880:	00030220 	.word	0x00030220

000d4884 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b03      	ldr	r3, [pc, #12]	; (d4894 <system_ctrl_set_result+0x10>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d488e:	9301      	str	r3, [sp, #4]
   d4890:	bd08      	pop	{r3, pc}
   d4892:	0000      	.short	0x0000
   d4894:	00030220 	.word	0x00030220

000d4898 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <network_connect+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	685b      	ldr	r3, [r3, #4]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030240 	.word	0x00030240

000d48a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <network_connecting+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	689b      	ldr	r3, [r3, #8]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030240 	.word	0x00030240

000d48b8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <network_disconnect+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	68db      	ldr	r3, [r3, #12]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030240 	.word	0x00030240

000d48c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <network_ready+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	691b      	ldr	r3, [r3, #16]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030240 	.word	0x00030240

000d48d8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <network_on+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	695b      	ldr	r3, [r3, #20]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030240 	.word	0x00030240

000d48e8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <network_off+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	699b      	ldr	r3, [r3, #24]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030240 	.word	0x00030240

000d48f8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <network_listen+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	69db      	ldr	r3, [r3, #28]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030240 	.word	0x00030240

000d4908 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <network_listening+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	6a1b      	ldr	r3, [r3, #32]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030240 	.word	0x00030240

000d4918 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <network_set_listen_timeout+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030240 	.word	0x00030240

000d4928 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <network_get_listen_timeout+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030240 	.word	0x00030240

000d4938 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <network_is_on+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	00030240 	.word	0x00030240

000d4948 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <network_is_off+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	00030240 	.word	0x00030240

000d4958 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <spark_set_random_seed_from_cloud_handler+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030244 	.word	0x00030244

000d4968 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <malloc+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	681b      	ldr	r3, [r3, #0]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	0003021c 	.word	0x0003021c

000d4978 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <free+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	685b      	ldr	r3, [r3, #4]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	0003021c 	.word	0x0003021c

000d4988 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <abort+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	0003021c 	.word	0x0003021c

000d4998 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <newlib_impure_ptr_callback+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	0003021c 	.word	0x0003021c

000d49a8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d49a8:	2200      	movs	r2, #0
   d49aa:	6840      	ldr	r0, [r0, #4]
   d49ac:	4611      	mov	r1, r2
   d49ae:	f7ff bfab 	b.w	d4908 <network_listening>

000d49b2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d49b2:	2200      	movs	r2, #0
   d49b4:	6840      	ldr	r0, [r0, #4]
   d49b6:	4611      	mov	r1, r2
   d49b8:	f7ff bfb6 	b.w	d4928 <network_get_listen_timeout>

000d49bc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d49bc:	6840      	ldr	r0, [r0, #4]
   d49be:	2200      	movs	r2, #0
   d49c0:	f7ff bfaa 	b.w	d4918 <network_set_listen_timeout>

000d49c4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d49c4:	6840      	ldr	r0, [r0, #4]
   d49c6:	2200      	movs	r2, #0
   d49c8:	f081 0101 	eor.w	r1, r1, #1
   d49cc:	f7ff bf94 	b.w	d48f8 <network_listen>

000d49d0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d49d0:	2300      	movs	r3, #0
   d49d2:	6840      	ldr	r0, [r0, #4]
   d49d4:	461a      	mov	r2, r3
   d49d6:	4619      	mov	r1, r3
   d49d8:	f7ff bf86 	b.w	d48e8 <network_off>

000d49dc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d49dc:	2300      	movs	r3, #0
   d49de:	6840      	ldr	r0, [r0, #4]
   d49e0:	461a      	mov	r2, r3
   d49e2:	4619      	mov	r1, r3
   d49e4:	f7ff bf78 	b.w	d48d8 <network_on>

000d49e8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d49e8:	2200      	movs	r2, #0
   d49ea:	6840      	ldr	r0, [r0, #4]
   d49ec:	4611      	mov	r1, r2
   d49ee:	f7ff bf6b 	b.w	d48c8 <network_ready>

000d49f2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d49f2:	2200      	movs	r2, #0
   d49f4:	6840      	ldr	r0, [r0, #4]
   d49f6:	4611      	mov	r1, r2
   d49f8:	f7ff bf56 	b.w	d48a8 <network_connecting>

000d49fc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d49fc:	6840      	ldr	r0, [r0, #4]
   d49fe:	2200      	movs	r2, #0
   d4a00:	2102      	movs	r1, #2
   d4a02:	f7ff bf59 	b.w	d48b8 <network_disconnect>

000d4a06 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4a06:	2300      	movs	r3, #0
   d4a08:	6840      	ldr	r0, [r0, #4]
   d4a0a:	461a      	mov	r2, r3
   d4a0c:	f7ff bf44 	b.w	d4898 <network_connect>

000d4a10 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4a10:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4a12:	2203      	movs	r2, #3
   d4a14:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4a16:	4a02      	ldr	r2, [pc, #8]	; (d4a20 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4a18:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4a1a:	4770      	bx	lr
   d4a1c:	2003e644 	.word	0x2003e644
   d4a20:	000d5414 	.word	0x000d5414

000d4a24 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4a24:	b510      	push	{r4, lr}
   d4a26:	4604      	mov	r4, r0
   d4a28:	4608      	mov	r0, r1
{
    _spi = spi;
   d4a2a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4a2c:	f7ff feb8 	bl	d47a0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4a30:	2300      	movs	r3, #0
   d4a32:	6063      	str	r3, [r4, #4]
}
   d4a34:	4620      	mov	r0, r4
   d4a36:	bd10      	pop	{r4, pc}

000d4a38 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4a38:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4a3a:	4b09      	ldr	r3, [pc, #36]	; (d4a60 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4a3c:	4c09      	ldr	r4, [pc, #36]	; (d4a64 <_GLOBAL__sub_I_System+0x2c>)
   d4a3e:	2202      	movs	r2, #2
   d4a40:	2000      	movs	r0, #0
   d4a42:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4a44:	4b08      	ldr	r3, [pc, #32]	; (d4a68 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4a46:	6020      	str	r0, [r4, #0]
   d4a48:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4a4a:	71a0      	strb	r0, [r4, #6]
   d4a4c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4a4e:	f7ff fef7 	bl	d4840 <set_system_mode>
SystemClass System;
   d4a52:	4620      	mov	r0, r4
   d4a54:	4a05      	ldr	r2, [pc, #20]	; (d4a6c <_GLOBAL__sub_I_System+0x34>)
   d4a56:	4906      	ldr	r1, [pc, #24]	; (d4a70 <_GLOBAL__sub_I_System+0x38>)
   d4a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4a5c:	f000 bc66 	b.w	d532c <__aeabi_atexit>
   d4a60:	2003e658 	.word	0x2003e658
   d4a64:	2003e64c 	.word	0x2003e64c
   d4a68:	ffff0000 	.word	0xffff0000
   d4a6c:	2003e624 	.word	0x2003e624
   d4a70:	000d412b 	.word	0x000d412b

000d4a74 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4a74:	b510      	push	{r4, lr}
   d4a76:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4a78:	6800      	ldr	r0, [r0, #0]
   d4a7a:	b108      	cbz	r0, d4a80 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4a7c:	f7ff fe00 	bl	d4680 <os_mutex_recursive_destroy>
    }
   d4a80:	4620      	mov	r0, r4
   d4a82:	bd10      	pop	{r4, pc}

000d4a84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4a84:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4a86:	4c06      	ldr	r4, [pc, #24]	; (d4aa0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4a88:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4a8a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4a8c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4a8e:	f7ff fdef 	bl	d4670 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4a92:	4620      	mov	r0, r4
   d4a94:	4a03      	ldr	r2, [pc, #12]	; (d4aa4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4a96:	4904      	ldr	r1, [pc, #16]	; (d4aa8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4a9c:	f000 bc46 	b.w	d532c <__aeabi_atexit>
   d4aa0:	2003e65c 	.word	0x2003e65c
   d4aa4:	2003e624 	.word	0x2003e624
   d4aa8:	000d4a75 	.word	0x000d4a75

000d4aac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4aae:	4606      	mov	r6, r0
   d4ab0:	460d      	mov	r5, r1
  size_t n = 0;
   d4ab2:	188f      	adds	r7, r1, r2
   d4ab4:	2400      	movs	r4, #0
  while (size--) {
   d4ab6:	42bd      	cmp	r5, r7
   d4ab8:	d00c      	beq.n	d4ad4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4aba:	6833      	ldr	r3, [r6, #0]
   d4abc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4ac0:	689b      	ldr	r3, [r3, #8]
   d4ac2:	4630      	mov	r0, r6
   d4ac4:	4798      	blx	r3
     if (chunk>=0)
   d4ac6:	1e03      	subs	r3, r0, #0
   d4ac8:	db01      	blt.n	d4ace <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4aca:	441c      	add	r4, r3
  while (size--) {
   d4acc:	e7f3      	b.n	d4ab6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4ace:	2c00      	cmp	r4, #0
   d4ad0:	bf08      	it	eq
   d4ad2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4ad4:	4620      	mov	r0, r4
   d4ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ad8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4ad8:	b513      	push	{r0, r1, r4, lr}
   d4ada:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4adc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4ade:	b159      	cbz	r1, d4af8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4ae0:	9101      	str	r1, [sp, #4]
   d4ae2:	f000 fc79 	bl	d53d8 <strlen>
   d4ae6:	6823      	ldr	r3, [r4, #0]
   d4ae8:	9901      	ldr	r1, [sp, #4]
   d4aea:	68db      	ldr	r3, [r3, #12]
   d4aec:	4602      	mov	r2, r0
   d4aee:	4620      	mov	r0, r4
    }
   d4af0:	b002      	add	sp, #8
   d4af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4af6:	4718      	bx	r3
    }
   d4af8:	b002      	add	sp, #8
   d4afa:	bd10      	pop	{r4, pc}

000d4afc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4afc:	6803      	ldr	r3, [r0, #0]
   d4afe:	689b      	ldr	r3, [r3, #8]
   d4b00:	4718      	bx	r3

000d4b02 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4b02:	b530      	push	{r4, r5, lr}
   d4b04:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4b06:	2300      	movs	r3, #0
   d4b08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4b0c:	2a01      	cmp	r2, #1
   d4b0e:	bf98      	it	ls
   d4b10:	220a      	movls	r2, #10
   d4b12:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4b14:	460d      	mov	r5, r1
   d4b16:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4b1a:	fb01 5312 	mls	r3, r1, r2, r5
   d4b1e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4b22:	2b09      	cmp	r3, #9
   d4b24:	bf94      	ite	ls
   d4b26:	3330      	addls	r3, #48	; 0x30
   d4b28:	3337      	addhi	r3, #55	; 0x37
   d4b2a:	b2db      	uxtb	r3, r3
  } while(n);
   d4b2c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4b2e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4b32:	d9ef      	bls.n	d4b14 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4b34:	4621      	mov	r1, r4
   d4b36:	f7ff ffcf 	bl	d4ad8 <_ZN5Print5writeEPKc>
}
   d4b3a:	b00b      	add	sp, #44	; 0x2c
   d4b3c:	bd30      	pop	{r4, r5, pc}
	...

000d4b40 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4b40:	4b01      	ldr	r3, [pc, #4]	; (d4b48 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4b42:	4a02      	ldr	r2, [pc, #8]	; (d4b4c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4b44:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4b46:	4770      	bx	lr
   d4b48:	2003e660 	.word	0x2003e660
   d4b4c:	000d5448 	.word	0x000d5448

000d4b50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4b50:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4b52:	681a      	ldr	r2, [r3, #0]
   d4b54:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4b56:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4b58:	4770      	bx	lr
   d4b5a:	bf00      	nop
   d4b5c:	2003e5b8 	.word	0x2003e5b8
   d4b60:	2003e664 	.word	0x2003e664

000d4b64 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4b64:	2100      	movs	r1, #0
   d4b66:	f7ff be73 	b.w	d4850 <system_delay_ms>

000d4b6a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4b6a:	b510      	push	{r4, lr}
      if (_M_manager)
   d4b6c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4b6e:	4604      	mov	r4, r0
      if (_M_manager)
   d4b70:	b113      	cbz	r3, d4b78 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b72:	2203      	movs	r2, #3
   d4b74:	4601      	mov	r1, r0
   d4b76:	4798      	blx	r3
    }
   d4b78:	4620      	mov	r0, r4
   d4b7a:	bd10      	pop	{r4, pc}

000d4b7c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4b7c:	b510      	push	{r4, lr}
   d4b7e:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d4b80:	f7ff fff3 	bl	d4b6a <_ZNSt14_Function_baseD1Ev>
   d4b84:	4620      	mov	r0, r4
   d4b86:	bd10      	pop	{r4, pc}

000d4b88 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4b88:	4803      	ldr	r0, [pc, #12]	; (d4b98 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4b8a:	4a04      	ldr	r2, [pc, #16]	; (d4b9c <_GLOBAL__sub_I_RGB+0x14>)
   d4b8c:	4904      	ldr	r1, [pc, #16]	; (d4ba0 <_GLOBAL__sub_I_RGB+0x18>)
   d4b8e:	2300      	movs	r3, #0
   d4b90:	6083      	str	r3, [r0, #8]
   d4b92:	f000 bbcb 	b.w	d532c <__aeabi_atexit>
   d4b96:	bf00      	nop
   d4b98:	2003e668 	.word	0x2003e668
   d4b9c:	2003e624 	.word	0x2003e624
   d4ba0:	000d4b7d 	.word	0x000d4b7d

000d4ba4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4ba4:	4b01      	ldr	r3, [pc, #4]	; (d4bac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4ba6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4ba8:	4770      	bx	lr
   d4baa:	bf00      	nop
   d4bac:	2003e5c0 	.word	0x2003e5c0

000d4bb0 <serialEventRun>:
{
   d4bb0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4bb2:	4b0b      	ldr	r3, [pc, #44]	; (d4be0 <serialEventRun+0x30>)
   d4bb4:	b143      	cbz	r3, d4bc8 <serialEventRun+0x18>
   d4bb6:	f000 f955 	bl	d4e64 <_Z16_fetch_usbserialv>
   d4bba:	6803      	ldr	r3, [r0, #0]
   d4bbc:	691b      	ldr	r3, [r3, #16]
   d4bbe:	4798      	blx	r3
   d4bc0:	2800      	cmp	r0, #0
   d4bc2:	dd01      	ble.n	d4bc8 <serialEventRun+0x18>
        serialEvent();
   d4bc4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4bc8:	4b06      	ldr	r3, [pc, #24]	; (d4be4 <serialEventRun+0x34>)
   d4bca:	b143      	cbz	r3, d4bde <serialEventRun+0x2e>
   d4bcc:	f000 f9c8 	bl	d4f60 <_Z22__fetch_global_Serial1v>
   d4bd0:	6803      	ldr	r3, [r0, #0]
   d4bd2:	691b      	ldr	r3, [r3, #16]
   d4bd4:	4798      	blx	r3
   d4bd6:	2800      	cmp	r0, #0
   d4bd8:	dd01      	ble.n	d4bde <serialEventRun+0x2e>
        serialEvent1();
   d4bda:	f3af 8000 	nop.w
}
   d4bde:	bd08      	pop	{r3, pc}
	...

000d4be8 <_post_loop>:
{
   d4be8:	b508      	push	{r3, lr}
	serialEventRun();
   d4bea:	f7ff ffe1 	bl	d4bb0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4bee:	f7ff fd17 	bl	d4620 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4bf2:	4b01      	ldr	r3, [pc, #4]	; (d4bf8 <_post_loop+0x10>)
   d4bf4:	6018      	str	r0, [r3, #0]
}
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	2003e7d4 	.word	0x2003e7d4

000d4bfc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4bfc:	4802      	ldr	r0, [pc, #8]	; (d4c08 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4bfe:	4a03      	ldr	r2, [pc, #12]	; (d4c0c <_Z33system_initialize_user_backup_ramv+0x10>)
   d4c00:	4903      	ldr	r1, [pc, #12]	; (d4c10 <_Z33system_initialize_user_backup_ramv+0x14>)
   d4c02:	1a12      	subs	r2, r2, r0
   d4c04:	f000 bbae 	b.w	d5364 <memcpy>
   d4c08:	2003f400 	.word	0x2003f400
   d4c0c:	2003f404 	.word	0x2003f404
   d4c10:	000d55b0 	.word	0x000d55b0

000d4c14 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4c14:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4c16:	2300      	movs	r3, #0
   d4c18:	9300      	str	r3, [sp, #0]
   d4c1a:	461a      	mov	r2, r3
   d4c1c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4c20:	f7ff fe30 	bl	d4884 <system_ctrl_set_result>
}
   d4c24:	b003      	add	sp, #12
   d4c26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4c2c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4c2c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4c2e:	8843      	ldrh	r3, [r0, #2]
   d4c30:	2b0a      	cmp	r3, #10
   d4c32:	d008      	beq.n	d4c46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4c34:	2b50      	cmp	r3, #80	; 0x50
   d4c36:	d10b      	bne.n	d4c50 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4c38:	4b09      	ldr	r3, [pc, #36]	; (d4c60 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4c3a:	681b      	ldr	r3, [r3, #0]
   d4c3c:	b14b      	cbz	r3, d4c52 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4c3e:	b003      	add	sp, #12
   d4c40:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4c44:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4c46:	f7ff ffe5 	bl	d4c14 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4c4a:	b003      	add	sp, #12
   d4c4c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4c50:	2300      	movs	r3, #0
   d4c52:	9300      	str	r3, [sp, #0]
   d4c54:	461a      	mov	r2, r3
   d4c56:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4c5a:	f7ff fe13 	bl	d4884 <system_ctrl_set_result>
}
   d4c5e:	e7f4      	b.n	d4c4a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4c60:	2003e67c 	.word	0x2003e67c

000d4c64 <module_user_init_hook>:
{
   d4c64:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4c66:	4c12      	ldr	r4, [pc, #72]	; (d4cb0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4c68:	4812      	ldr	r0, [pc, #72]	; (d4cb4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4c6a:	4d13      	ldr	r5, [pc, #76]	; (d4cb8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4c6c:	2100      	movs	r1, #0
   d4c6e:	f7ff fe93 	bl	d4998 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d4c72:	6823      	ldr	r3, [r4, #0]
   d4c74:	42ab      	cmp	r3, r5
   d4c76:	4b11      	ldr	r3, [pc, #68]	; (d4cbc <module_user_init_hook+0x58>)
   d4c78:	bf0c      	ite	eq
   d4c7a:	2201      	moveq	r2, #1
   d4c7c:	2200      	movne	r2, #0
   d4c7e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4c80:	d002      	beq.n	d4c88 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d4c82:	f7ff ffbb 	bl	d4bfc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d4c86:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4c88:	f7ff fcb2 	bl	d45f0 <HAL_RNG_GetRandomNumber>
   d4c8c:	4604      	mov	r4, r0
    srand(seed);
   d4c8e:	f000 fb7f 	bl	d5390 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4c92:	4b0b      	ldr	r3, [pc, #44]	; (d4cc0 <module_user_init_hook+0x5c>)
   d4c94:	b113      	cbz	r3, d4c9c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d4c96:	4620      	mov	r0, r4
   d4c98:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4c9c:	2100      	movs	r1, #0
   d4c9e:	4808      	ldr	r0, [pc, #32]	; (d4cc0 <module_user_init_hook+0x5c>)
   d4ca0:	f7ff fe5a 	bl	d4958 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4ca8:	4806      	ldr	r0, [pc, #24]	; (d4cc4 <module_user_init_hook+0x60>)
   d4caa:	2100      	movs	r1, #0
   d4cac:	f7ff bde0 	b.w	d4870 <system_ctrl_set_app_request_handler>
   d4cb0:	2003f400 	.word	0x2003f400
   d4cb4:	000d4ba5 	.word	0x000d4ba5
   d4cb8:	9a271c1e 	.word	0x9a271c1e
   d4cbc:	2003e678 	.word	0x2003e678
   d4cc0:	00000000 	.word	0x00000000
   d4cc4:	000d4c2d 	.word	0x000d4c2d

000d4cc8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4cc8:	4770      	bx	lr

000d4cca <_ZN9IPAddressD0Ev>:
   d4cca:	b510      	push	{r4, lr}
   d4ccc:	2118      	movs	r1, #24
   d4cce:	4604      	mov	r4, r0
   d4cd0:	f000 fb31 	bl	d5336 <_ZdlPvj>
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	bd10      	pop	{r4, pc}

000d4cd8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4cda:	7d03      	ldrb	r3, [r0, #20]
   d4cdc:	2b06      	cmp	r3, #6
{
   d4cde:	b08d      	sub	sp, #52	; 0x34
   d4ce0:	460e      	mov	r6, r1
   d4ce2:	f100 0704 	add.w	r7, r0, #4
   d4ce6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4cea:	d012      	beq.n	d4d12 <_ZNK9IPAddress7printToER5Print+0x3a>
   d4cec:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4cf0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4cf4:	220a      	movs	r2, #10
   d4cf6:	4630      	mov	r0, r6
   d4cf8:	f7ff ff03 	bl	d4b02 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4cfc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4cfe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4d00:	d019      	beq.n	d4d36 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4d02:	2c00      	cmp	r4, #0
   d4d04:	d0f4      	beq.n	d4cf0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4d06:	212e      	movs	r1, #46	; 0x2e
   d4d08:	4630      	mov	r0, r6
   d4d0a:	f7ff fef7 	bl	d4afc <_ZN5Print5printEc>
   d4d0e:	4404      	add	r4, r0
   d4d10:	e7ee      	b.n	d4cf0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4d12:	232f      	movs	r3, #47	; 0x2f
   d4d14:	466a      	mov	r2, sp
   d4d16:	4639      	mov	r1, r7
   d4d18:	200a      	movs	r0, #10
		buf[0] = 0;
   d4d1a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4d1e:	f7ff fcbf 	bl	d46a0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4d22:	4668      	mov	r0, sp
   d4d24:	f000 fb58 	bl	d53d8 <strlen>
   d4d28:	6833      	ldr	r3, [r6, #0]
   d4d2a:	4602      	mov	r2, r0
   d4d2c:	68db      	ldr	r3, [r3, #12]
   d4d2e:	4669      	mov	r1, sp
   d4d30:	4630      	mov	r0, r6
   d4d32:	4798      	blx	r3
   d4d34:	4604      	mov	r4, r0
    }
    return n;
}
   d4d36:	4620      	mov	r0, r4
   d4d38:	b00d      	add	sp, #52	; 0x34
   d4d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4d3c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4d3c:	b510      	push	{r4, lr}
   d4d3e:	4b05      	ldr	r3, [pc, #20]	; (d4d54 <_ZN9IPAddressC1Ev+0x18>)
   d4d40:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4d42:	2211      	movs	r2, #17
   d4d44:	f840 3b04 	str.w	r3, [r0], #4
   d4d48:	2100      	movs	r1, #0
   d4d4a:	f000 fb19 	bl	d5380 <memset>
}
   d4d4e:	4620      	mov	r0, r4
   d4d50:	bd10      	pop	{r4, pc}
   d4d52:	bf00      	nop
   d4d54:	000d5470 	.word	0x000d5470

000d4d58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4d58:	4603      	mov	r3, r0
   d4d5a:	4a07      	ldr	r2, [pc, #28]	; (d4d78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4d5c:	b510      	push	{r4, lr}
   d4d5e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4d62:	f101 0210 	add.w	r2, r1, #16
   d4d66:	f851 4b04 	ldr.w	r4, [r1], #4
   d4d6a:	f843 4b04 	str.w	r4, [r3], #4
   d4d6e:	4291      	cmp	r1, r2
   d4d70:	d1f9      	bne.n	d4d66 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4d72:	780a      	ldrb	r2, [r1, #0]
   d4d74:	701a      	strb	r2, [r3, #0]
}
   d4d76:	bd10      	pop	{r4, pc}
   d4d78:	000d5470 	.word	0x000d5470

000d4d7c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4d7c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4d7e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4d82:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4d86:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4d8a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4d8e:	2304      	movs	r3, #4
   d4d90:	6041      	str	r1, [r0, #4]
   d4d92:	7503      	strb	r3, [r0, #20]
}
   d4d94:	bd10      	pop	{r4, pc}

000d4d96 <_ZN9IPAddressaSEPKh>:
{
   d4d96:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4d98:	78cb      	ldrb	r3, [r1, #3]
   d4d9a:	9300      	str	r3, [sp, #0]
   d4d9c:	788b      	ldrb	r3, [r1, #2]
   d4d9e:	784a      	ldrb	r2, [r1, #1]
   d4da0:	7809      	ldrb	r1, [r1, #0]
   d4da2:	f7ff ffeb 	bl	d4d7c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4da6:	b002      	add	sp, #8
   d4da8:	bd10      	pop	{r4, pc}

000d4daa <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4daa:	7441      	strb	r1, [r0, #17]
}
   d4dac:	4770      	bx	lr

000d4dae <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4dae:	4770      	bx	lr

000d4db0 <_ZN9USBSerial4readEv>:
{
   d4db0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4db2:	2100      	movs	r1, #0
   d4db4:	7c00      	ldrb	r0, [r0, #16]
   d4db6:	f7ff fd23 	bl	d4800 <HAL_USB_USART_Receive_Data>
}
   d4dba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4dbe:	bd08      	pop	{r3, pc}

000d4dc0 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d4dc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4dc2:	2101      	movs	r1, #1
   d4dc4:	7c00      	ldrb	r0, [r0, #16]
   d4dc6:	f7ff fd1b 	bl	d4800 <HAL_USB_USART_Receive_Data>
}
   d4dca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4dce:	bd08      	pop	{r3, pc}

000d4dd0 <_ZN9USBSerial17availableForWriteEv>:
{
   d4dd0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4dd2:	7c00      	ldrb	r0, [r0, #16]
   d4dd4:	f7ff fd0c 	bl	d47f0 <HAL_USB_USART_Available_Data_For_Write>
}
   d4dd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ddc:	bd08      	pop	{r3, pc}

000d4dde <_ZN9USBSerial9availableEv>:
{
   d4dde:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4de0:	7c00      	ldrb	r0, [r0, #16]
   d4de2:	f7ff fcfd 	bl	d47e0 <HAL_USB_USART_Available_Data>
}
   d4de6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4dea:	bd08      	pop	{r3, pc}

000d4dec <_ZN9USBSerial5writeEh>:
{
   d4dec:	b513      	push	{r0, r1, r4, lr}
   d4dee:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4df0:	7c00      	ldrb	r0, [r0, #16]
{
   d4df2:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4df4:	f7ff fcfc 	bl	d47f0 <HAL_USB_USART_Available_Data_For_Write>
   d4df8:	2800      	cmp	r0, #0
   d4dfa:	9901      	ldr	r1, [sp, #4]
   d4dfc:	dc01      	bgt.n	d4e02 <_ZN9USBSerial5writeEh+0x16>
   d4dfe:	7c60      	ldrb	r0, [r4, #17]
   d4e00:	b120      	cbz	r0, d4e0c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4e02:	7c20      	ldrb	r0, [r4, #16]
   d4e04:	f7ff fd04 	bl	d4810 <HAL_USB_USART_Send_Data>
   d4e08:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d4e0c:	b002      	add	sp, #8
   d4e0e:	bd10      	pop	{r4, pc}

000d4e10 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d4e10:	7c00      	ldrb	r0, [r0, #16]
   d4e12:	f7ff bd05 	b.w	d4820 <HAL_USB_USART_Flush_Data>

000d4e16 <_ZN9USBSerialD0Ev>:
   d4e16:	b510      	push	{r4, lr}
   d4e18:	2114      	movs	r1, #20
   d4e1a:	4604      	mov	r4, r0
   d4e1c:	f000 fa8b 	bl	d5336 <_ZdlPvj>
   d4e20:	4620      	mov	r0, r4
   d4e22:	bd10      	pop	{r4, pc}

000d4e24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4e24:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4e2a:	4604      	mov	r4, r0
   d4e2c:	4608      	mov	r0, r1
   d4e2e:	2100      	movs	r1, #0
   d4e30:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4e34:	4b04      	ldr	r3, [pc, #16]	; (d4e48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4e36:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d4e38:	2301      	movs	r3, #1
  _serial = serial;
   d4e3a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4e3c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d4e3e:	4611      	mov	r1, r2
   d4e40:	f7ff fcbe 	bl	d47c0 <HAL_USB_USART_Init>
}
   d4e44:	4620      	mov	r0, r4
   d4e46:	bd10      	pop	{r4, pc}
   d4e48:	000d5484 	.word	0x000d5484

000d4e4c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d4e4c:	7c00      	ldrb	r0, [r0, #16]
   d4e4e:	2200      	movs	r2, #0
   d4e50:	f7ff bcbe 	b.w	d47d0 <HAL_USB_USART_Begin>

000d4e54 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d4e54:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4e56:	2214      	movs	r2, #20
{
   d4e58:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4e5a:	2100      	movs	r1, #0
   d4e5c:	f000 fa90 	bl	d5380 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d4e60:	4620      	mov	r0, r4
   d4e62:	bd10      	pop	{r4, pc}

000d4e64 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d4e64:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4e66:	4c10      	ldr	r4, [pc, #64]	; (d4ea8 <_Z16_fetch_usbserialv+0x44>)
{
   d4e68:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4e6a:	a803      	add	r0, sp, #12
   d4e6c:	f7ff fff2 	bl	d4e54 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4e70:	7821      	ldrb	r1, [r4, #0]
   d4e72:	f3bf 8f5b 	dmb	ish
   d4e76:	f011 0101 	ands.w	r1, r1, #1
   d4e7a:	d111      	bne.n	d4ea0 <_Z16_fetch_usbserialv+0x3c>
   d4e7c:	4620      	mov	r0, r4
   d4e7e:	9101      	str	r1, [sp, #4]
   d4e80:	f7ff f90d 	bl	d409e <__cxa_guard_acquire>
   d4e84:	9901      	ldr	r1, [sp, #4]
   d4e86:	b158      	cbz	r0, d4ea0 <_Z16_fetch_usbserialv+0x3c>
   d4e88:	aa03      	add	r2, sp, #12
   d4e8a:	4808      	ldr	r0, [pc, #32]	; (d4eac <_Z16_fetch_usbserialv+0x48>)
   d4e8c:	f7ff ffca 	bl	d4e24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4e90:	4620      	mov	r0, r4
   d4e92:	f7ff f909 	bl	d40a8 <__cxa_guard_release>
   d4e96:	4a06      	ldr	r2, [pc, #24]	; (d4eb0 <_Z16_fetch_usbserialv+0x4c>)
   d4e98:	4906      	ldr	r1, [pc, #24]	; (d4eb4 <_Z16_fetch_usbserialv+0x50>)
   d4e9a:	4804      	ldr	r0, [pc, #16]	; (d4eac <_Z16_fetch_usbserialv+0x48>)
   d4e9c:	f000 fa46 	bl	d532c <__aeabi_atexit>
	return _usbserial;
}
   d4ea0:	4802      	ldr	r0, [pc, #8]	; (d4eac <_Z16_fetch_usbserialv+0x48>)
   d4ea2:	b008      	add	sp, #32
   d4ea4:	bd10      	pop	{r4, pc}
   d4ea6:	bf00      	nop
   d4ea8:	2003e680 	.word	0x2003e680
   d4eac:	2003e684 	.word	0x2003e684
   d4eb0:	2003e624 	.word	0x2003e624
   d4eb4:	000d4daf 	.word	0x000d4daf

000d4eb8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d4eb8:	4770      	bx	lr

000d4eba <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4eba:	7441      	strb	r1, [r0, #17]
}
   d4ebc:	4770      	bx	lr

000d4ebe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d4ebe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d4ec0:	7c00      	ldrb	r0, [r0, #16]
   d4ec2:	f7ff fc2d 	bl	d4720 <hal_usart_available_data_for_write>
}
   d4ec6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4eca:	bd08      	pop	{r3, pc}

000d4ecc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d4ecc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d4ece:	7c00      	ldrb	r0, [r0, #16]
   d4ed0:	f7ff fbfe 	bl	d46d0 <hal_usart_available>
}
   d4ed4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ed8:	bd08      	pop	{r3, pc}

000d4eda <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d4eda:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d4edc:	7c00      	ldrb	r0, [r0, #16]
   d4ede:	f7ff fc07 	bl	d46f0 <hal_usart_peek>
}
   d4ee2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4ee6:	bd08      	pop	{r3, pc}

000d4ee8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d4ee8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d4eea:	7c00      	ldrb	r0, [r0, #16]
   d4eec:	f7ff fbf8 	bl	d46e0 <hal_usart_read>
}
   d4ef0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4ef4:	bd08      	pop	{r3, pc}

000d4ef6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d4ef6:	7c00      	ldrb	r0, [r0, #16]
   d4ef8:	f7ff bc02 	b.w	d4700 <hal_usart_flush>

000d4efc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d4efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4efe:	7c45      	ldrb	r5, [r0, #17]
{
   d4f00:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4f02:	b12d      	cbz	r5, d4f10 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d4f04:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d4f06:	b003      	add	sp, #12
   d4f08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d4f0c:	f7ff bbd8 	b.w	d46c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4f10:	7c00      	ldrb	r0, [r0, #16]
   d4f12:	9101      	str	r1, [sp, #4]
   d4f14:	f7ff fc04 	bl	d4720 <hal_usart_available_data_for_write>
   d4f18:	2800      	cmp	r0, #0
   d4f1a:	9901      	ldr	r1, [sp, #4]
   d4f1c:	dcf2      	bgt.n	d4f04 <_ZN11USARTSerial5writeEh+0x8>
}
   d4f1e:	4628      	mov	r0, r5
   d4f20:	b003      	add	sp, #12
   d4f22:	bd30      	pop	{r4, r5, pc}

000d4f24 <_ZN11USARTSerialD0Ev>:
   d4f24:	b510      	push	{r4, lr}
   d4f26:	2114      	movs	r1, #20
   d4f28:	4604      	mov	r4, r0
   d4f2a:	f000 fa04 	bl	d5336 <_ZdlPvj>
   d4f2e:	4620      	mov	r0, r4
   d4f30:	bd10      	pop	{r4, pc}
	...

000d4f34 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d4f34:	b510      	push	{r4, lr}
   d4f36:	f04f 0c00 	mov.w	ip, #0
   d4f3a:	4604      	mov	r4, r0
   d4f3c:	4608      	mov	r0, r1
   d4f3e:	4611      	mov	r1, r2
   d4f40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4f44:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d4f48:	4a04      	ldr	r2, [pc, #16]	; (d4f5c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d4f4a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d4f4c:	2201      	movs	r2, #1
  _serial = serial;
   d4f4e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4f50:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d4f52:	461a      	mov	r2, r3
   d4f54:	f7ff fbac 	bl	d46b0 <hal_usart_init>
}
   d4f58:	4620      	mov	r0, r4
   d4f5a:	bd10      	pop	{r4, pc}
   d4f5c:	000d54b4 	.word	0x000d54b4

000d4f60 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d4f60:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4f62:	4c0e      	ldr	r4, [pc, #56]	; (d4f9c <_Z22__fetch_global_Serial1v+0x3c>)
   d4f64:	7821      	ldrb	r1, [r4, #0]
   d4f66:	f3bf 8f5b 	dmb	ish
   d4f6a:	f011 0101 	ands.w	r1, r1, #1
   d4f6e:	d112      	bne.n	d4f96 <_Z22__fetch_global_Serial1v+0x36>
   d4f70:	4620      	mov	r0, r4
   d4f72:	9101      	str	r1, [sp, #4]
   d4f74:	f7ff f893 	bl	d409e <__cxa_guard_acquire>
   d4f78:	9901      	ldr	r1, [sp, #4]
   d4f7a:	b160      	cbz	r0, d4f96 <_Z22__fetch_global_Serial1v+0x36>
   d4f7c:	4a08      	ldr	r2, [pc, #32]	; (d4fa0 <_Z22__fetch_global_Serial1v+0x40>)
   d4f7e:	4b09      	ldr	r3, [pc, #36]	; (d4fa4 <_Z22__fetch_global_Serial1v+0x44>)
   d4f80:	4809      	ldr	r0, [pc, #36]	; (d4fa8 <_Z22__fetch_global_Serial1v+0x48>)
   d4f82:	f7ff ffd7 	bl	d4f34 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d4f86:	4620      	mov	r0, r4
   d4f88:	f7ff f88e 	bl	d40a8 <__cxa_guard_release>
   d4f8c:	4a07      	ldr	r2, [pc, #28]	; (d4fac <_Z22__fetch_global_Serial1v+0x4c>)
   d4f8e:	4908      	ldr	r1, [pc, #32]	; (d4fb0 <_Z22__fetch_global_Serial1v+0x50>)
   d4f90:	4805      	ldr	r0, [pc, #20]	; (d4fa8 <_Z22__fetch_global_Serial1v+0x48>)
   d4f92:	f000 f9cb 	bl	d532c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4f96:	4804      	ldr	r0, [pc, #16]	; (d4fa8 <_Z22__fetch_global_Serial1v+0x48>)
   d4f98:	b002      	add	sp, #8
   d4f9a:	bd10      	pop	{r4, pc}
   d4f9c:	2003e698 	.word	0x2003e698
   d4fa0:	2003e69c 	.word	0x2003e69c
   d4fa4:	2003e720 	.word	0x2003e720
   d4fa8:	2003e7a4 	.word	0x2003e7a4
   d4fac:	2003e624 	.word	0x2003e624
   d4fb0:	000d4eb9 	.word	0x000d4eb9

000d4fb4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4fb4:	4770      	bx	lr

000d4fb6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fb8:	4606      	mov	r6, r0
   d4fba:	4615      	mov	r5, r2
   d4fbc:	460c      	mov	r4, r1
   d4fbe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4fc0:	42bc      	cmp	r4, r7
   d4fc2:	d006      	beq.n	d4fd2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4fc4:	6833      	ldr	r3, [r6, #0]
   d4fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4fca:	689b      	ldr	r3, [r3, #8]
   d4fcc:	4630      	mov	r0, r6
   d4fce:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4fd0:	e7f6      	b.n	d4fc0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4fd2:	4628      	mov	r0, r5
   d4fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fd6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4fd6:	7c00      	ldrb	r0, [r0, #16]
   d4fd8:	2200      	movs	r2, #0
   d4fda:	f7ff bba9 	b.w	d4730 <hal_i2c_write>

000d4fde <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4fde:	7c00      	ldrb	r0, [r0, #16]
   d4fe0:	2100      	movs	r1, #0
   d4fe2:	f7ff bbad 	b.w	d4740 <hal_i2c_available>

000d4fe6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4fe6:	7c00      	ldrb	r0, [r0, #16]
   d4fe8:	2100      	movs	r1, #0
   d4fea:	f7ff bbb1 	b.w	d4750 <hal_i2c_read>

000d4fee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4fee:	7c00      	ldrb	r0, [r0, #16]
   d4ff0:	2100      	movs	r1, #0
   d4ff2:	f7ff bbb5 	b.w	d4760 <hal_i2c_peek>

000d4ff6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4ff6:	7c00      	ldrb	r0, [r0, #16]
   d4ff8:	2100      	movs	r1, #0
   d4ffa:	f7ff bbb9 	b.w	d4770 <hal_i2c_flush>

000d4ffe <_ZN7TwoWireD0Ev>:
   d4ffe:	b510      	push	{r4, lr}
   d5000:	2114      	movs	r1, #20
   d5002:	4604      	mov	r4, r0
   d5004:	f000 f997 	bl	d5336 <_ZdlPvj>
   d5008:	4620      	mov	r0, r4
   d500a:	bd10      	pop	{r4, pc}

000d500c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d500c:	b510      	push	{r4, lr}
   d500e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5012:	4604      	mov	r4, r0
   d5014:	4608      	mov	r0, r1
   d5016:	2100      	movs	r1, #0
   d5018:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d501c:	4b03      	ldr	r3, [pc, #12]	; (d502c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d501e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5020:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5022:	4611      	mov	r1, r2
   d5024:	f7ff fbb4 	bl	d4790 <hal_i2c_init>
}
   d5028:	4620      	mov	r0, r4
   d502a:	bd10      	pop	{r4, pc}
   d502c:	000d54e4 	.word	0x000d54e4

000d5030 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5030:	2200      	movs	r2, #0
   d5032:	6840      	ldr	r0, [r0, #4]
   d5034:	4611      	mov	r1, r2
   d5036:	f7ff bc47 	b.w	d48c8 <network_ready>

000d503a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d503a:	2200      	movs	r2, #0
   d503c:	6840      	ldr	r0, [r0, #4]
   d503e:	4611      	mov	r1, r2
   d5040:	f7ff bc62 	b.w	d4908 <network_listening>

000d5044 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5044:	2200      	movs	r2, #0
   d5046:	6840      	ldr	r0, [r0, #4]
   d5048:	4611      	mov	r1, r2
   d504a:	f7ff bc6d 	b.w	d4928 <network_get_listen_timeout>

000d504e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d504e:	6840      	ldr	r0, [r0, #4]
   d5050:	2200      	movs	r2, #0
   d5052:	f7ff bc61 	b.w	d4918 <network_set_listen_timeout>

000d5056 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5056:	6840      	ldr	r0, [r0, #4]
   d5058:	2200      	movs	r2, #0
   d505a:	f081 0101 	eor.w	r1, r1, #1
   d505e:	f7ff bc4b 	b.w	d48f8 <network_listen>

000d5062 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5062:	2300      	movs	r3, #0
   d5064:	6840      	ldr	r0, [r0, #4]
   d5066:	461a      	mov	r2, r3
   d5068:	4619      	mov	r1, r3
   d506a:	f7ff bc3d 	b.w	d48e8 <network_off>

000d506e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d506e:	2300      	movs	r3, #0
   d5070:	6840      	ldr	r0, [r0, #4]
   d5072:	461a      	mov	r2, r3
   d5074:	4619      	mov	r1, r3
   d5076:	f7ff bc2f 	b.w	d48d8 <network_on>

000d507a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d507a:	2200      	movs	r2, #0
   d507c:	6840      	ldr	r0, [r0, #4]
   d507e:	4611      	mov	r1, r2
   d5080:	f7ff bc12 	b.w	d48a8 <network_connecting>

000d5084 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5084:	6840      	ldr	r0, [r0, #4]
   d5086:	2200      	movs	r2, #0
   d5088:	2102      	movs	r1, #2
   d508a:	f7ff bc15 	b.w	d48b8 <network_disconnect>

000d508e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d508e:	2300      	movs	r3, #0
   d5090:	6840      	ldr	r0, [r0, #4]
   d5092:	461a      	mov	r2, r3
   d5094:	f7ff bc00 	b.w	d4898 <network_connect>

000d5098 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5098:	4b02      	ldr	r3, [pc, #8]	; (d50a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d509a:	2204      	movs	r2, #4
   d509c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d509e:	4a02      	ldr	r2, [pc, #8]	; (d50a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d50a0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d50a2:	4770      	bx	lr
   d50a4:	2003e7b8 	.word	0x2003e7b8
   d50a8:	000d550c 	.word	0x000d550c

000d50ac <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d50ac:	2300      	movs	r3, #0
   d50ae:	6840      	ldr	r0, [r0, #4]
   d50b0:	461a      	mov	r2, r3
   d50b2:	f7ff bbf1 	b.w	d4898 <network_connect>

000d50b6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d50b6:	6840      	ldr	r0, [r0, #4]
   d50b8:	2200      	movs	r2, #0
   d50ba:	2102      	movs	r1, #2
   d50bc:	f7ff bbfc 	b.w	d48b8 <network_disconnect>

000d50c0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d50c0:	2200      	movs	r2, #0
   d50c2:	6840      	ldr	r0, [r0, #4]
   d50c4:	4611      	mov	r1, r2
   d50c6:	f7ff bbef 	b.w	d48a8 <network_connecting>

000d50ca <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d50ca:	2200      	movs	r2, #0
   d50cc:	6840      	ldr	r0, [r0, #4]
   d50ce:	4611      	mov	r1, r2
   d50d0:	f7ff bbfa 	b.w	d48c8 <network_ready>

000d50d4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d50d4:	2300      	movs	r3, #0
   d50d6:	6840      	ldr	r0, [r0, #4]
   d50d8:	461a      	mov	r2, r3
   d50da:	4619      	mov	r1, r3
   d50dc:	f7ff bbfc 	b.w	d48d8 <network_on>

000d50e0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d50e0:	2300      	movs	r3, #0
   d50e2:	6840      	ldr	r0, [r0, #4]
   d50e4:	461a      	mov	r2, r3
   d50e6:	4619      	mov	r1, r3
   d50e8:	f7ff bbfe 	b.w	d48e8 <network_off>

000d50ec <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d50ec:	6840      	ldr	r0, [r0, #4]
   d50ee:	2100      	movs	r1, #0
   d50f0:	f7ff bc22 	b.w	d4938 <network_is_on>

000d50f4 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d50f4:	6840      	ldr	r0, [r0, #4]
   d50f6:	2100      	movs	r1, #0
   d50f8:	f7ff bc26 	b.w	d4948 <network_is_off>

000d50fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d50fc:	6840      	ldr	r0, [r0, #4]
   d50fe:	2200      	movs	r2, #0
   d5100:	f081 0101 	eor.w	r1, r1, #1
   d5104:	f7ff bbf8 	b.w	d48f8 <network_listen>

000d5108 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5108:	6840      	ldr	r0, [r0, #4]
   d510a:	2200      	movs	r2, #0
   d510c:	f7ff bc04 	b.w	d4918 <network_set_listen_timeout>

000d5110 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5110:	2200      	movs	r2, #0
   d5112:	6840      	ldr	r0, [r0, #4]
   d5114:	4611      	mov	r1, r2
   d5116:	f7ff bc07 	b.w	d4928 <network_get_listen_timeout>

000d511a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d511a:	2200      	movs	r2, #0
   d511c:	6840      	ldr	r0, [r0, #4]
   d511e:	4611      	mov	r1, r2
   d5120:	f7ff bbf2 	b.w	d4908 <network_listening>

000d5124 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5128:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d512a:	b095      	sub	sp, #84	; 0x54
   d512c:	4616      	mov	r6, r2
   d512e:	460d      	mov	r5, r1
   d5130:	4607      	mov	r7, r0
    IPAddress addr;
   d5132:	f7ff fe03 	bl	d4d3c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5136:	4621      	mov	r1, r4
   d5138:	2218      	movs	r2, #24
   d513a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d513c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d513e:	f000 f91f 	bl	d5380 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5142:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5144:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5148:	4621      	mov	r1, r4
   d514a:	466b      	mov	r3, sp
   d514c:	aa0c      	add	r2, sp, #48	; 0x30
   d514e:	4630      	mov	r0, r6
   d5150:	f7ff fa36 	bl	d45c0 <netdb_getaddrinfo>
    if (!r) {
   d5154:	4604      	mov	r4, r0
   d5156:	2800      	cmp	r0, #0
   d5158:	d146      	bne.n	d51e8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d515a:	4602      	mov	r2, r0
   d515c:	2101      	movs	r1, #1
   d515e:	6868      	ldr	r0, [r5, #4]
   d5160:	f7ff fbb2 	bl	d48c8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5164:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5166:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5168:	4622      	mov	r2, r4
   d516a:	6868      	ldr	r0, [r5, #4]
   d516c:	f7ff fbac 	bl	d48c8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5170:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5172:	4681      	mov	r9, r0
        bool ok = false;
   d5174:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5176:	2e00      	cmp	r6, #0
   d5178:	d036      	beq.n	d51e8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d517a:	2900      	cmp	r1, #0
   d517c:	d134      	bne.n	d51e8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d517e:	6873      	ldr	r3, [r6, #4]
   d5180:	2b02      	cmp	r3, #2
   d5182:	d003      	beq.n	d518c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5184:	2b0a      	cmp	r3, #10
   d5186:	d00b      	beq.n	d51a0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5188:	69f6      	ldr	r6, [r6, #28]
   d518a:	e7f4      	b.n	d5176 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d518c:	f1b8 0f00 	cmp.w	r8, #0
   d5190:	d004      	beq.n	d519c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5192:	6971      	ldr	r1, [r6, #20]
   d5194:	4638      	mov	r0, r7
   d5196:	3104      	adds	r1, #4
   d5198:	f7ff fdfd 	bl	d4d96 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d519c:	4641      	mov	r1, r8
   d519e:	e7f3      	b.n	d5188 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d51a0:	f1b9 0f00 	cmp.w	r9, #0
   d51a4:	d101      	bne.n	d51aa <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d51a6:	4649      	mov	r1, r9
   d51a8:	e7ee      	b.n	d5188 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d51aa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d51ac:	2210      	movs	r2, #16
   d51ae:	a801      	add	r0, sp, #4
   d51b0:	f000 f8e6 	bl	d5380 <memset>
                    a.v = 6;
   d51b4:	2306      	movs	r3, #6
   d51b6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d51ba:	ad01      	add	r5, sp, #4
   d51bc:	f104 0308 	add.w	r3, r4, #8
   d51c0:	3418      	adds	r4, #24
   d51c2:	6818      	ldr	r0, [r3, #0]
   d51c4:	6859      	ldr	r1, [r3, #4]
   d51c6:	462a      	mov	r2, r5
   d51c8:	c203      	stmia	r2!, {r0, r1}
   d51ca:	3308      	adds	r3, #8
   d51cc:	42a3      	cmp	r3, r4
   d51ce:	4615      	mov	r5, r2
   d51d0:	d1f7      	bne.n	d51c2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d51d2:	a901      	add	r1, sp, #4
   d51d4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d51d6:	ad07      	add	r5, sp, #28
   d51d8:	f7ff fdbe 	bl	d4d58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d51dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d51de:	1d3c      	adds	r4, r7, #4
   d51e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d51e2:	682b      	ldr	r3, [r5, #0]
   d51e4:	7023      	strb	r3, [r4, #0]
   d51e6:	e7de      	b.n	d51a6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d51e8:	9800      	ldr	r0, [sp, #0]
   d51ea:	f7ff f9e1 	bl	d45b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d51ee:	4638      	mov	r0, r7
   d51f0:	b015      	add	sp, #84	; 0x54
   d51f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d51f8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d51f8:	4b02      	ldr	r3, [pc, #8]	; (d5204 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d51fa:	4a03      	ldr	r2, [pc, #12]	; (d5208 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d51fc:	601a      	str	r2, [r3, #0]
   d51fe:	2200      	movs	r2, #0
   d5200:	605a      	str	r2, [r3, #4]

} // spark
   d5202:	4770      	bx	lr
   d5204:	2003e7c0 	.word	0x2003e7c0
   d5208:	000d5548 	.word	0x000d5548

000d520c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d520c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d520e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5210:	d902      	bls.n	d5218 <pinAvailable+0xc>
    return false;
   d5212:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5214:	b002      	add	sp, #8
   d5216:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5218:	f1a0 030b 	sub.w	r3, r0, #11
   d521c:	2b02      	cmp	r3, #2
   d521e:	d81a      	bhi.n	d5256 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5220:	4c17      	ldr	r4, [pc, #92]	; (d5280 <pinAvailable+0x74>)
   d5222:	7821      	ldrb	r1, [r4, #0]
   d5224:	f3bf 8f5b 	dmb	ish
   d5228:	f011 0101 	ands.w	r1, r1, #1
   d522c:	d10b      	bne.n	d5246 <pinAvailable+0x3a>
   d522e:	4620      	mov	r0, r4
   d5230:	9101      	str	r1, [sp, #4]
   d5232:	f7fe ff34 	bl	d409e <__cxa_guard_acquire>
   d5236:	9901      	ldr	r1, [sp, #4]
   d5238:	b128      	cbz	r0, d5246 <pinAvailable+0x3a>
   d523a:	4812      	ldr	r0, [pc, #72]	; (d5284 <pinAvailable+0x78>)
   d523c:	f7ff fbf2 	bl	d4a24 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5240:	4620      	mov	r0, r4
   d5242:	f7fe ff31 	bl	d40a8 <__cxa_guard_release>
   d5246:	4b0f      	ldr	r3, [pc, #60]	; (d5284 <pinAvailable+0x78>)
   d5248:	7818      	ldrb	r0, [r3, #0]
   d524a:	f7ff fab1 	bl	d47b0 <hal_spi_is_enabled>
   d524e:	2800      	cmp	r0, #0
   d5250:	d1df      	bne.n	d5212 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5252:	2001      	movs	r0, #1
   d5254:	e7de      	b.n	d5214 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5256:	2801      	cmp	r0, #1
   d5258:	d809      	bhi.n	d526e <pinAvailable+0x62>
   d525a:	f000 f83f 	bl	d52dc <_Z19__fetch_global_Wirev>
   d525e:	2100      	movs	r1, #0
   d5260:	7c00      	ldrb	r0, [r0, #16]
   d5262:	f7ff fa8d 	bl	d4780 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5266:	f080 0001 	eor.w	r0, r0, #1
   d526a:	b2c0      	uxtb	r0, r0
   d526c:	e7d2      	b.n	d5214 <pinAvailable+0x8>
   d526e:	3809      	subs	r0, #9
   d5270:	2801      	cmp	r0, #1
   d5272:	d8ee      	bhi.n	d5252 <pinAvailable+0x46>
   d5274:	f7ff fe74 	bl	d4f60 <_Z22__fetch_global_Serial1v>
   d5278:	7c00      	ldrb	r0, [r0, #16]
   d527a:	f7ff fa49 	bl	d4710 <hal_usart_is_enabled>
   d527e:	e7f2      	b.n	d5266 <pinAvailable+0x5a>
   d5280:	2003e7c8 	.word	0x2003e7c8
   d5284:	2003e7cc 	.word	0x2003e7cc

000d5288 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5288:	2823      	cmp	r0, #35	; 0x23
{
   d528a:	b538      	push	{r3, r4, r5, lr}
   d528c:	4604      	mov	r4, r0
   d528e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5290:	d80a      	bhi.n	d52a8 <pinMode+0x20>
   d5292:	29ff      	cmp	r1, #255	; 0xff
   d5294:	d008      	beq.n	d52a8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5296:	f7ff ffb9 	bl	d520c <pinAvailable>
   d529a:	b128      	cbz	r0, d52a8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d529c:	4629      	mov	r1, r5
   d529e:	4620      	mov	r0, r4
}
   d52a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d52a4:	f7ff b99c 	b.w	d45e0 <HAL_Pin_Mode>
}
   d52a8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d52ac <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d52ac:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d52ae:	2300      	movs	r3, #0
   d52b0:	2520      	movs	r5, #32
   d52b2:	8043      	strh	r3, [r0, #2]
   d52b4:	2314      	movs	r3, #20
{
   d52b6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d52b8:	8003      	strh	r3, [r0, #0]
   d52ba:	6085      	str	r5, [r0, #8]
   d52bc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d52be:	4906      	ldr	r1, [pc, #24]	; (d52d8 <_Z17acquireWireBufferv+0x2c>)
   d52c0:	4628      	mov	r0, r5
   d52c2:	f000 f83c 	bl	d533e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d52c6:	4904      	ldr	r1, [pc, #16]	; (d52d8 <_Z17acquireWireBufferv+0x2c>)
	};
   d52c8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d52ca:	4628      	mov	r0, r5
   d52cc:	f000 f837 	bl	d533e <_ZnajRKSt9nothrow_t>
	};
   d52d0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d52d2:	4620      	mov	r0, r4
   d52d4:	bd38      	pop	{r3, r4, r5, pc}
   d52d6:	bf00      	nop
   d52d8:	000d557c 	.word	0x000d557c

000d52dc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d52dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d52de:	4d0f      	ldr	r5, [pc, #60]	; (d531c <_Z19__fetch_global_Wirev+0x40>)
   d52e0:	7829      	ldrb	r1, [r5, #0]
   d52e2:	f3bf 8f5b 	dmb	ish
   d52e6:	f011 0401 	ands.w	r4, r1, #1
{
   d52ea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d52ec:	d113      	bne.n	d5316 <_Z19__fetch_global_Wirev+0x3a>
   d52ee:	4628      	mov	r0, r5
   d52f0:	f7fe fed5 	bl	d409e <__cxa_guard_acquire>
   d52f4:	b178      	cbz	r0, d5316 <_Z19__fetch_global_Wirev+0x3a>
   d52f6:	a801      	add	r0, sp, #4
   d52f8:	f7ff ffd8 	bl	d52ac <_Z17acquireWireBufferv>
   d52fc:	aa01      	add	r2, sp, #4
   d52fe:	4621      	mov	r1, r4
   d5300:	4807      	ldr	r0, [pc, #28]	; (d5320 <_Z19__fetch_global_Wirev+0x44>)
   d5302:	f7ff fe83 	bl	d500c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5306:	4628      	mov	r0, r5
   d5308:	f7fe fece 	bl	d40a8 <__cxa_guard_release>
   d530c:	4a05      	ldr	r2, [pc, #20]	; (d5324 <_Z19__fetch_global_Wirev+0x48>)
   d530e:	4906      	ldr	r1, [pc, #24]	; (d5328 <_Z19__fetch_global_Wirev+0x4c>)
   d5310:	4803      	ldr	r0, [pc, #12]	; (d5320 <_Z19__fetch_global_Wirev+0x44>)
   d5312:	f000 f80b 	bl	d532c <__aeabi_atexit>
	return wire;
}
   d5316:	4802      	ldr	r0, [pc, #8]	; (d5320 <_Z19__fetch_global_Wirev+0x44>)
   d5318:	b007      	add	sp, #28
   d531a:	bd30      	pop	{r4, r5, pc}
   d531c:	2003e7d8 	.word	0x2003e7d8
   d5320:	2003e7dc 	.word	0x2003e7dc
   d5324:	2003e624 	.word	0x2003e624
   d5328:	000d4fb5 	.word	0x000d4fb5

000d532c <__aeabi_atexit>:
   d532c:	460b      	mov	r3, r1
   d532e:	4601      	mov	r1, r0
   d5330:	4618      	mov	r0, r3
   d5332:	f000 b809 	b.w	d5348 <__cxa_atexit>

000d5336 <_ZdlPvj>:
   d5336:	f7fe beb0 	b.w	d409a <_ZdlPv>

000d533a <_ZnwjRKSt9nothrow_t>:
   d533a:	f7fe beaa 	b.w	d4092 <_Znwj>

000d533e <_ZnajRKSt9nothrow_t>:
   d533e:	f7fe beaa 	b.w	d4096 <_Znaj>

000d5342 <_ZSt25__throw_bad_function_callv>:
   d5342:	b508      	push	{r3, lr}
   d5344:	f7ff fb20 	bl	d4988 <abort>

000d5348 <__cxa_atexit>:
   d5348:	b510      	push	{r4, lr}
   d534a:	4c05      	ldr	r4, [pc, #20]	; (d5360 <__cxa_atexit+0x18>)
   d534c:	4613      	mov	r3, r2
   d534e:	b12c      	cbz	r4, d535c <__cxa_atexit+0x14>
   d5350:	460a      	mov	r2, r1
   d5352:	4601      	mov	r1, r0
   d5354:	2002      	movs	r0, #2
   d5356:	f3af 8000 	nop.w
   d535a:	bd10      	pop	{r4, pc}
   d535c:	4620      	mov	r0, r4
   d535e:	e7fc      	b.n	d535a <__cxa_atexit+0x12>
   d5360:	00000000 	.word	0x00000000

000d5364 <memcpy>:
   d5364:	440a      	add	r2, r1
   d5366:	4291      	cmp	r1, r2
   d5368:	f100 33ff 	add.w	r3, r0, #4294967295
   d536c:	d100      	bne.n	d5370 <memcpy+0xc>
   d536e:	4770      	bx	lr
   d5370:	b510      	push	{r4, lr}
   d5372:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5376:	f803 4f01 	strb.w	r4, [r3, #1]!
   d537a:	4291      	cmp	r1, r2
   d537c:	d1f9      	bne.n	d5372 <memcpy+0xe>
   d537e:	bd10      	pop	{r4, pc}

000d5380 <memset>:
   d5380:	4402      	add	r2, r0
   d5382:	4603      	mov	r3, r0
   d5384:	4293      	cmp	r3, r2
   d5386:	d100      	bne.n	d538a <memset+0xa>
   d5388:	4770      	bx	lr
   d538a:	f803 1b01 	strb.w	r1, [r3], #1
   d538e:	e7f9      	b.n	d5384 <memset+0x4>

000d5390 <srand>:
   d5390:	b538      	push	{r3, r4, r5, lr}
   d5392:	4b0d      	ldr	r3, [pc, #52]	; (d53c8 <srand+0x38>)
   d5394:	681d      	ldr	r5, [r3, #0]
   d5396:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5398:	4604      	mov	r4, r0
   d539a:	b97b      	cbnz	r3, d53bc <srand+0x2c>
   d539c:	2018      	movs	r0, #24
   d539e:	f7ff fae3 	bl	d4968 <malloc>
   d53a2:	4a0a      	ldr	r2, [pc, #40]	; (d53cc <srand+0x3c>)
   d53a4:	4b0a      	ldr	r3, [pc, #40]	; (d53d0 <srand+0x40>)
   d53a6:	63a8      	str	r0, [r5, #56]	; 0x38
   d53a8:	e9c0 2300 	strd	r2, r3, [r0]
   d53ac:	4b09      	ldr	r3, [pc, #36]	; (d53d4 <srand+0x44>)
   d53ae:	6083      	str	r3, [r0, #8]
   d53b0:	230b      	movs	r3, #11
   d53b2:	8183      	strh	r3, [r0, #12]
   d53b4:	2201      	movs	r2, #1
   d53b6:	2300      	movs	r3, #0
   d53b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d53bc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d53be:	2200      	movs	r2, #0
   d53c0:	611c      	str	r4, [r3, #16]
   d53c2:	615a      	str	r2, [r3, #20]
   d53c4:	bd38      	pop	{r3, r4, r5, pc}
   d53c6:	bf00      	nop
   d53c8:	2003e5c0 	.word	0x2003e5c0
   d53cc:	abcd330e 	.word	0xabcd330e
   d53d0:	e66d1234 	.word	0xe66d1234
   d53d4:	0005deec 	.word	0x0005deec

000d53d8 <strlen>:
   d53d8:	4603      	mov	r3, r0
   d53da:	f813 2b01 	ldrb.w	r2, [r3], #1
   d53de:	2a00      	cmp	r2, #0
   d53e0:	d1fb      	bne.n	d53da <strlen+0x2>
   d53e2:	1a18      	subs	r0, r3, r0
   d53e4:	3801      	subs	r0, #1
   d53e6:	4770      	bx	lr

000d53e8 <dynalib_user>:
   d53e8:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d53f8:	0000 0000 6572 6563 7669 6e69 5467 7268     ....receivingThr
   d5408:	6165 0064                                   ead.

000d540c <_ZTVN5spark13EthernetClassE>:
	...
   d5414:	4a07 000d 49fd 000d 49f3 000d 49e9 000d     .J...I...I...I..
   d5424:	49dd 000d 49d1 000d 50ed 000d 50f5 000d     .I...I...P...P..
   d5434:	49c5 000d 49bd 000d 49b3 000d 49a9 000d     .I...I...I...I..
   d5444:	5125 000d 7061 0070 5925 252d 2d6d 6425     %Q..app.%Y-%m-%d
   d5454:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d5464:	6d69 0065                                   ime.

000d5468 <_ZTV9IPAddress>:
	...
   d5470:	4cd9 000d 4cc9 000d 4ccb 000d               .L...L...L..

000d547c <_ZTV9USBSerial>:
	...
   d5484:	4daf 000d 4e17 000d 4ded 000d 4aad 000d     .M...N...M...J..
   d5494:	4ddf 000d 4db1 000d 4dc1 000d 4e11 000d     .M...M...M...N..
   d54a4:	4dd1 000d 4dab 000d                         .M...M..

000d54ac <_ZTV11USARTSerial>:
	...
   d54b4:	4eb9 000d 4f25 000d 4efd 000d 4aad 000d     .N..%O...N...J..
   d54c4:	4ecd 000d 4ee9 000d 4edb 000d 4ef7 000d     .N...N...N...N..
   d54d4:	4ebb 000d 4ebf 000d                         .N...N..

000d54dc <_ZTV7TwoWire>:
	...
   d54e4:	4fb5 000d 4fff 000d 4fd7 000d 4fb7 000d     .O...O...O...O..
   d54f4:	4fdf 000d 4fe7 000d 4fef 000d 4ff7 000d     .O...O...O...O..

000d5504 <_ZTVN5spark9WiFiClassE>:
	...
   d550c:	508f 000d 5085 000d 507b 000d 5031 000d     .P...P..{P..1P..
   d551c:	506f 000d 5063 000d 50ed 000d 50f5 000d     oP..cP...P...P..
   d552c:	5057 000d 504f 000d 5045 000d 503b 000d     WP..OP..EP..;P..
   d553c:	5125 000d                                   %Q..

000d5540 <_ZTVN5spark12NetworkClassE>:
	...
   d5548:	50ad 000d 50b7 000d 50c1 000d 50cb 000d     .P...P...P...P..
   d5558:	50d5 000d 50e1 000d 50ed 000d 50f5 000d     .P...P...P...P..
   d5568:	50fd 000d 5109 000d 5111 000d 511b 000d     .P...Q...Q...Q..
   d5578:	5125 000d                                   %Q..

000d557c <_ZSt7nothrow>:
	...

000d557d <link_const_variable_data_end>:
   d557d:	00          	.byte	0x00
	...

000d5580 <link_constructors_location>:
   d5580:	000d44dd 	.word	0x000d44dd
   d5584:	000d4a11 	.word	0x000d4a11
   d5588:	000d4a39 	.word	0x000d4a39
   d558c:	000d4a85 	.word	0x000d4a85
   d5590:	000d4b41 	.word	0x000d4b41
   d5594:	000d4b51 	.word	0x000d4b51
   d5598:	000d4b89 	.word	0x000d4b89
   d559c:	000d5099 	.word	0x000d5099
   d55a0:	000d51f9 	.word	0x000d51f9

000d55a4 <link_constructors_end>:
	...
